import mineflayer, { Bot } from 'mineflayer'
import { pathfinder, Movements } from 'mineflayer-pathfinder'
import * as net from 'net'

// Import goals using createRequire for CommonJS module
import { createRequire } from 'module'
const require = createRequire(import.meta.url)
const { goals } = require('mineflayer-pathfinder')
import { plugin as pvp } from 'mineflayer-pvp'
import { plugin as collectBlock } from 'mineflayer-collectblock'
const autoEat = require('mineflayer-auto-eat').plugin
import { Vec3 } from 'vec3'

// Import c√°c module ƒë√£ t√°ch
import { BotConfig, BotState } from './types'
import { updateBotStatus, setBotConnected, getBotStatus } from './bot-status'
const { mineflayer: mineflayerViewer } = require('prismarine-viewer')

const geminiApiKey = process.env.GEMINI_API_KEY // Google Gemini API key

// Bot configuration
const BOT_CONFIG: BotConfig = {
  host: process.env.MINECRAFT_SERVER_HOST || 'thuatzai123.aternos.me',
  port: parseInt(process.env.MINECRAFT_SERVER_PORT || '38893'),
  username: process.env.MINECRAFT_BOT_USERNAME || 'ice',
  version: process.env.MINECRAFT_VERSION || '1.21.2',
  auth: 'offline' as const,
  skinUrl: process.env.BOT_SKIN_URL || 'https://crafatar.com/skins/f014f08b7402657d', // Skin t·ª´ NameMC
  capeUrl: process.env.BOT_CAPE_URL || undefined
}

// Export BOT_CONFIG globally for bot-status sync
;(global as any).BOT_CONFIG = BOT_CONFIG;

// All manager functionality is now integrated directly in this file

// Global state variables
let bot: Bot
let targetPlayer: any = null
let prismarineViewerInstance: any = null
let prismarineViewerSetup = false
let followInterval: NodeJS.Timeout | null = null
let protectInterval: NodeJS.Timeout | null = null
let autoFarmActive = false
let isFollowing = false
let isProtecting = false
let lootedChests: Set<string> = new Set() // Ghi nh·ªõ r∆∞∆°ng ƒë√£ loot
let isEating = false // Track tr·∫°ng th√°i ƒëang ƒÉn
let autoFishingActive = false // Track tr·∫°ng th√°i c√¢u c√°
let autoItemCollectionDisabled = false // T·∫°m d·ª´ng nh·∫∑t ƒë·ªì khi c√¢u c√°
let autoEquipDisabled = false // T·∫°m d·ª´ng t·ª± ƒë·ªông trang b·ªã khi c√¢u c√°
let lastPlayerCommand = Date.now() // Track l·∫ßn cu·ªëi player ra l·ªánh
let lastEatTime = 0 // Track l·∫ßn cu·ªëi ƒÉn ƒë·ªÉ tr√°nh spam
let bobberThrowCount = 0 // ƒê·∫øm s·ªë l·∫ßn √¢m thanh fishing_bobber.throw
let reconnectAttempts = 0
const MAX_RECONNECT_ATTEMPTS = 5

// Presence check variables
let presenceCheckFailures = 0
let lastPresenceCheck = Date.now()

// Auto mining variables - RESTORED per user requirements
let autoMiningActive = false
let currentMiningTarget: any = null
let targetOreType = ''
let miningInterval: NodeJS.Timeout | null = null
let lastMinedPosition: any = null
let isCurrentlyDigging = false

// Auto mining variables - REMOVED but needed for cleanup (replaced by new implementation above)

// Auto eat plugin variables
let autoEatPluginActive = false // Track tr·∫°ng th√°i auto eat plugin
let lastMobCheckTime = 0 // Track l·∫ßn cu·ªëi ki·ªÉm tra mob xung quanh

// Auto mining variables - REMOVED
// Ch·ª©c nƒÉng auto mining ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè ho√†n to√†n

// Auto chest hunting variables - RESTORED per user requirements
let autoChestHuntingActive = false
let currentChestTarget: any = null
let chestHuntingInterval: NodeJS.Timeout | null = null
let lastChestPosition: any = null
let isCurrentlyApproachingChest = false
let farmInterval: NodeJS.Timeout | null = null // Farm interval for compatibility

// Auto crop farming variables - NEW
let autoCropFarmerActive = false
let cropFarmerInterval: NodeJS.Timeout | null = null
let currentHoeTool: any = null
let harvestedCrops: Set<string> = new Set() // Track harvested crops to avoid re-harvesting

// PVP variables - NEW
let pvpActive = false
let pvpProActive = false
let pvpTargetName = ''
let pvpInterval: NodeJS.Timeout | null = null
let hasWarnedWeakPlayer = false // Track n·∫øu ƒë√£ chat "Sao c·∫≠u y·∫øu th·∫ø"
let lastPvpTpAttempt = 0 // Track l·∫ßn cu·ªëi th·ª≠ /tp trong PVP
let lastShieldCheck = 0 // Track l·∫ßn cu·ªëi check shield
let isCirclingBehind = false // Track n·∫øu ƒëang v√≤ng ra sau l∆∞ng

// Bi·∫øn cho respawn handling
let lastMode = 'idle' // Track ch·∫ø ƒë·ªô tr∆∞·ªõc khi ch·∫øt
let lastPosition: any = null // Track v·ªã tr√≠ tr∆∞·ªõc khi ch·∫øt
let lastTargetPlayerName = '' // Track t√™n player ƒëang theo/b·∫£o v·ªá
let hasTpPermission: boolean | null = null // Track quy·ªÅn /tp
let tpFailCount = 0 // ƒê·∫øm s·ªë l·∫ßn /tp th·∫•t b·∫°i
let lastAttackTime = 0 // Track l·∫ßn cu·ªëi t·∫•n c√¥ng ƒë·ªÉ cooldown

// Auto Explore variables - NEW
let autoExploreActive = false
let exploreInterval: NodeJS.Timeout | null = null
let exploreDirection: { x: number, z: number } | null = null
let discoveredStructures: Set<string> = new Set() // Track discovered structures
let lastExploreMove = 0

// Compatibility shims to replace deleted manager modules
let equipmentManager: any
let autoEatManager: any
let combatManager: any
let fishingManager: any
let followingManager: any
let protectingManager: any
let autoFarmManager: any
let autoBuildManager: any
let autoMiningManager: any

// Forward declarations c·ªßa c√°c h√†m s·∫Ω ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a sau
let startFollowingPlayer: (username: string) => void
let stopFollowing: () => void
let startProtectingPlayer: (username: string) => void
let stopProtecting: () => void
let startSmartAutoFishing: () => void
let stopSmartAutoFishing: () => void
let startSmartAutoBuild: (buildType: string) => void
let stopSmartAutoBuild: () => void
// Auto mining functions removed
let startAutoFarmAll: () => void
let stopAutoFarm: () => void
let startAutoMining: (oreType: string) => void
let stopAutoMining: () => void
// Auto chest hunting functions
let startAutoChestHunting: () => void
let stopAutoChestHunting: () => void
// Auto crop farming functions
let startAutoCropFarmer: () => void
let stopAutoCropFarmer: () => void
// PVP functions
let startPvP: (targetName: string) => void
let startPvPPro: (targetName: string) => void
let stopPvP: (silent?: boolean) => void
// Auto Explore functions
let startAutoExplore: () => void
let stopAutoExplore: () => void

// Create compatibility shims
function createManagerShims() {
  followingManager = {
    startFollowingPlayer: (playerName: string) => startFollowingPlayer(playerName),
    stopFollowing: () => stopFollowing(),
    getIsFollowing: () => isFollowing,
    getTargetPlayerName: () => lastTargetPlayerName
  }

  protectingManager = {
    startProtectingPlayer: (playerName: string) => startProtectingPlayer(playerName),
    stopProtecting: () => stopProtecting(),
    getIsProtecting: () => isProtecting,
    getTargetPlayerName: () => lastTargetPlayerName
  }

  autoFarmManager = {
    startAutoFarm: () => startAutoFarmAll(),
    startAutoFarmAll: () => startAutoFarmAll(),
    stopAutoFarm: () => stopAutoFarm(),
    getIsAutoFarmActive: () => autoFarmActive
  }

  // Auto mining manager removed

  fishingManager = {
    startSmartAutoFishing: () => startSmartAutoFishing(),
    stopSmartAutoFishing: () => stopSmartAutoFishing(),
    getIsAutoFishingActive: () => autoFishingActive
  }

  autoBuildManager = {
    startSmartAutoBuild: (buildType: string) => startSmartAutoBuild(buildType),
    stopSmartAutoBuild: () => stopSmartAutoBuild()
  }

  autoEatManager = {
    setup: () => setupAutoEatPlugin(),
    disable: () => disableAutoEatPlugin()
  }

  equipmentManager = {
    equipBestWeapon: () => equipBestSwordForCombat(),
    setup: () => {}
  }

  combatManager = {
    setup: () => {}
  }
}

async function testServerConnection() {
  return new Promise<boolean>((resolve) => {
    const socket = new net.Socket()

    socket.setTimeout(5000) // 5 second timeout

    socket.on('connect', () => {
      socket.destroy()
      resolve(true)
    })

    socket.on('timeout', () => {
      socket.destroy()
      resolve(false)
    })

    socket.on('error', () => {
      resolve(false)
    })

    socket.connect(BOT_CONFIG.port, BOT_CONFIG.host)
  })
}

async function createBot() {
  console.log(`üöÄ ƒêang t·∫°o bot m·ªõi... (Th·ª≠ l·∫ßn ${reconnectAttempts + 1}/${MAX_RECONNECT_ATTEMPTS})`)
  console.log(`üì° K·∫øt n·ªëi t·ªõi: ${BOT_CONFIG.host}:${BOT_CONFIG.port}`)

  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    console.log('‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi t·ªëi ƒëa. D·ª´ng bot.')
    console.log('üí° G·ª£i √Ω: Ki·ªÉm tra xem server Minecraft c√≥ ƒëang online kh√¥ng:')
    console.log(`   - Truy c·∫≠p https://${BOT_CONFIG.host} ƒë·ªÉ ki·ªÉm tra status`)
    console.log('   - Ho·∫∑c thay ƒë·ªïi MINECRAFT_SERVER_HOST trong file .env')
    return
  }

  // Test server connectivity first
  console.log('üîç Ki·ªÉm tra k·∫øt n·ªëi server...')
  const serverOnline = await testServerConnection()

  if (!serverOnline) {
    console.log('‚ùå Server kh√¥ng ph·∫£n h·ªìi. Server c√≥ th·ªÉ ƒëang offline.')
    console.log('üí° G·ª£i √Ω:')
    console.log('   1. Ki·ªÉm tra server Aternos c√≥ ƒëang ch·∫°y kh√¥ng')
    console.log('   2. Th·ª≠ k·∫øt n·ªëi b·∫±ng Minecraft client tr∆∞·ªõc')
    console.log('   3. Ki·ªÉm tra ƒë·ªãa ch·ªâ server v√† port c√≥ ƒë√∫ng kh√¥ng')
    console.log('‚è≥ S·∫Ω th·ª≠ l·∫°i sau...')

    // Still attempt connection but with warning
  } else {
    console.log('‚úÖ Server ph·∫£n h·ªìi, ƒëang k·∫øt n·ªëi bot...')
  }

  bot = mineflayer.createBot({
    host: BOT_CONFIG.host,
    port: BOT_CONFIG.port,
    username: BOT_CONFIG.username,
    version: BOT_CONFIG.version,
    auth: BOT_CONFIG.auth,
    keepAlive: true,
    checkTimeoutInterval: 60000, // Check connection m·ªói 60s
    hideErrors: false,
    skinUrl: BOT_CONFIG.skinUrl, // √Åp d·ª•ng skin t·ª´ config
    capeUrl: BOT_CONFIG.capeUrl   // √Åp d·ª•ng cape n·∫øu c√≥
  })

  // TƒÉng MaxListeners ƒë·ªÉ tr√°nh warning
  bot.setMaxListeners(100)

  // Setup real prismarine-viewer for 3D world viewing with dedicated host
  function setupPrismarineViewer() {
    // Prevent multiple setups
    if (prismarineViewerSetup) {
      console.log('‚ö†Ô∏è Prismarine viewer already set up, skipping...')
      return
    }

    try {
      console.log('üñ•Ô∏è Setting up Prismarine Viewer (one-time setup)...')
      prismarineViewerSetup = true

      // Cleanup any existing viewer instance first
      if (prismarineViewerInstance) {
        try {
          console.log('üßπ Cleaning up existing prismarine-viewer instance...')
          if (typeof prismarineViewerInstance.close === 'function') {
            prismarineViewerInstance.close()
          }
        } catch (cleanupErr) {
          console.log('‚ö†Ô∏è Error cleaning up old viewer:', cleanupErr.message)
        }
        prismarineViewerInstance = null
      }

      console.log('üñ•Ô∏è ƒêang kh·ªüi ƒë·ªông Real Prismarine Viewer v·ªõi host ri√™ng...')

      // Check if mineflayerViewer is available
      if (typeof mineflayerViewer === 'function') {
        // Try ports starting from 3005 to avoid conflicts
        const tryPorts = [3005, 3006, 3007, 3008, 3009]
        let viewerStarted = false

        for (const tryPort of tryPorts) {
          if (viewerStarted) break

          try {
            console.log(`üîç Trying to start prismarine-viewer on port ${tryPort}...`)

            // Start real prismarine-viewer with dynamic port
            const viewer = mineflayerViewer(bot, {
              port: tryPort,
              firstPerson: false,
              host: '0.0.0.0',  // Bind to all interfaces for Replit
              viewDistance: 'far',
              chatHistory: true,
              outputTextToConsole: false
            })

            // Store viewer instance for cleanup
            prismarineViewerInstance = viewer
            viewerStarted = true

            console.log(`‚úÖ Prismarine viewer started successfully on port ${tryPort}!`)

            // Setup viewer with enhanced options
            if (viewer && typeof viewer.on === 'function') {
              viewer.on('listening', () => {
                console.log(`‚úÖ Real Prismarine Viewer ƒë√£ kh·ªüi ƒë·ªông tr√™n port ${tryPort}!`)
                console.log(`üåç C√≥ th·ªÉ xem th·∫ø gi·ªõi Minecraft 3D t·∫°i: http://0.0.0.0:${tryPort}`)

                // Notify web interface about viewer URL with dynamic port
                const viewerUrl = `https://${process.env.REPL_SLUG || 'workspace'}-${process.env.REPL_OWNER || 'xihobel480'}.replit.dev:${tryPort}`
                console.log(`üéÆ External Viewer URL: ${viewerUrl}`)

                // Send viewer URL to main web interface
                fetch('http://localhost:5000/api/bot-viewer-url', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    url: viewerUrl,
                    port: tryPort,
                    status: 'active',
                    botId: 'botlolicute'
                  })
                }).catch(() => {})

                bot.chat('üéÆ 3D Viewer ƒë√£ s·∫µn s√†ng!')
              })

              viewer.on('error', (error: any) => {
                console.log(`‚ùå L·ªói Real Prismarine Viewer tr√™n port ${tryPort}:`, error.message)
                // Try next port
                prismarineViewerInstance = null
              })
            } else {
              console.log('‚ö†Ô∏è Prismarine viewer kh√¥ng h·ªó tr·ª£ events, ch·ªâ kh·ªüi ƒë·ªông c∆° b·∫£n')
              console.log(`‚úÖ Real Prismarine Viewer ƒë√£ kh·ªüi ƒë·ªông tr√™n port ${tryPort}!`)

              // Still try to notify web interface
              const viewerUrl = `https://${process.env.REPL_SLUG || 'workspace'}-${process.env.REPL_OWNER || 'xihobel480'}.replit.dev:${tryPort}`
              console.log(`üéÆ External Viewer URL: ${viewerUrl}`)

              fetch('http://localhost:5000/api/bot-viewer-url', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  url: viewerUrl,
                  port: tryPort,
                  status: 'active',
                  botId: 'botlolicute'
                })
              }).catch(() => {})

              bot.chat('üéÆ 3D Viewer ƒë√£ s·∫µn s√†ng!')
            }

            break // Successfully started, exit port loop

          } catch (portError: any) {
            console.log(`‚ùå Port ${tryPort} busy, trying next port...`)
            prismarineViewerInstance = null
            continue
          }
        }

        if (!viewerStarted) {
          console.log('‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông prismarine-viewer tr√™n b·∫•t k·ª≥ port n√†o, d√πng fallback')
          throw new Error('All ports busy for prismarine-viewer')
        }
      } else {
        console.log('‚ùå mineflayerViewer kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng fallback')
        throw new Error('mineflayerViewer not available')
      }

      // Keep bot view tracking for web interface
      startBotViewTracking()
      setupBotEnvironmentTracking()

      console.log('‚úÖ Real Prismarine Viewer setup ho√†n t·∫•t tr√™n port 3001!')
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói kh·ªüi ƒë·ªông Real Prismarine Viewer:', error)
      // Fallback: ch·ªâ ch·∫°y basic tracking
      startBotViewTracking()
      setupBotEnvironmentTracking()
    }
  }

  // Enhanced bot view tracking function
  function startBotViewTracking() {
    setInterval(() => {
      if (bot && bot.entity) {
        const pos = bot.entity.position
        const viewData = {
          position: pos,
          health: bot.health,
          food: bot.food,
          yaw: bot.entity.yaw,
          pitch: bot.entity.pitch,
          gamemode: bot.game?.gameMode || 'unknown',
          dimension: bot.game?.dimension || 'overworld',
          inventory: getFullInventoryData(),
          time: bot.time?.timeOfDay || 0,
          weather: bot.isRaining ? 'M∆∞a' : 'N·∫Øng'
        }

        // Update bot status v·ªõi enhanced view data - silent update
        updateBotStatus({
          position: viewData.position,
          health: viewData.health,
          food: viewData.food,
          status: `T·ªça ƒë·ªô: ${Math.floor(pos.x)}, ${Math.floor(pos.y)}, ${Math.floor(pos.z)} | HP: ${viewData.health}/20 | ƒê·ªì ƒÉn: ${viewData.food}/20`,
          inventory: viewData.inventory,
          gamemode: viewData.gamemode,
          weather: viewData.weather
        })

        // Sync v·ªõi prismarine-viewer ƒë·ªÉ hi·ªÉn th·ªã real-time data
        syncWithPrismarineViewer(viewData)
      }
    }, 5000) // Update m·ªói 5 gi√¢y theo y√™u c·∫ßu
  }

  // Function ƒë·ªÉ l·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin inventory bao g·ªìm trang b·ªã
  function getFullInventoryData() {
    try {
      const items = bot.inventory?.items() || []
      const inventory = items.map(item => ({
        name: item.name,
        displayName: item.displayName || item.name,
        count: item.count,
        slot: item.slot,
        type: item.type
      }))

      // L·∫•y th√¥ng tin trang b·ªã
      const equipment = {
        hand: bot.heldItem ? {
          name: bot.heldItem.name,
          displayName: bot.heldItem.displayName || bot.heldItem.name,
          count: bot.heldItem.count
        } : null,
        helmet: bot.inventory.slots[5] ? {
          name: bot.inventory.slots[5].name,
          displayName: bot.inventory.slots[5].displayName || bot.inventory.slots[5].name,
          count: bot.inventory.slots[5].count
        } : null,
        chestplate: bot.inventory.slots[6] ? {
          name: bot.inventory.slots[6].name,
          displayName: bot.inventory.slots[6].displayName || bot.inventory.slots[6].name,
          count: bot.inventory.slots[6].count
        } : null,
        leggings: bot.inventory.slots[7] ? {
          name: bot.inventory.slots[7].name,
          displayName: bot.inventory.slots[7].displayName || bot.inventory.slots[7].name,
          count: bot.inventory.slots[7].count
        } : null,
        boots: bot.inventory.slots[8] ? {
          name: bot.inventory.slots[8].name,
          displayName: bot.inventory.slots[8].displayName || bot.inventory.slots[8].name,
          count: bot.inventory.slots[8].count
        } : null,
        offhand: bot.inventory.slots[45] ? {
          name: bot.inventory.slots[45].name,
          displayName: bot.inventory.slots[45].displayName || bot.inventory.slots[45].name,
          count: bot.inventory.slots[45].count
        } : null
      }

      return {
        items: inventory,
        equipment: equipment,
        totalItems: items.length
      }
    } catch (error) {
      console.log('L·ªói l·∫•y inventory data:', error)
      return {
        items: [],
        equipment: {},
        totalItems: 0
      }
    }
  }

  // Function ƒë·ªÉ sync data v·ªõi prismarine-viewer
  async function syncWithPrismarineViewer(viewData: any) {
    try {
      await fetch('http://localhost:3001/api/bot-viewer-sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          position: viewData.position,
          health: viewData.health,
          food: viewData.food,
          status: `T·ªça ƒë·ªô: ${Math.floor(viewData.position.x)}, ${Math.floor(viewData.position.y)}, ${Math.floor(viewData.position.z)} | HP: ${viewData.health}/20 | ƒê·ªì ƒÉn: ${viewData.food}/20`,
          inventory: viewData.inventory,
          connected: true
        })
      })
    } catch (error) {
      // Silent fail ƒë·ªÉ kh√¥ng spam console
    }
  }

  // Th√™m tracking environment chi ti·∫øt
  function setupBotEnvironmentTracking() {
    if (!bot) return

    // Track c√°c entities xung quanh
    bot.on('entitySpawn', (entity) => {
      if (entity.type === 'player') {
        console.log(`üë§ Player xu·∫•t hi·ªán: ${entity.username || entity.displayName || 'Unknown'}`)
      } else if (entity.type === 'mob') {
        console.log(`üêæ Mob xu·∫•t hi·ªán: ${entity.name || entity.displayName || 'Unknown'}`)
      }
    })

    // Track block breaks/places - disabled to reduce spam
    // bot.on('blockUpdate', (oldBlock, newBlock) => {
    //   if (oldBlock && newBlock && oldBlock.type !== newBlock.type) {
    //     console.log(`üß± Block thay ƒë·ªïi t·∫°i ${newBlock.position}: ${oldBlock.name} ‚Üí ${newBlock.name}`)
    //   }
    // })

    // Track chat messages
    bot.on('chat', (username, message) => {
      console.log(`üí¨ [${username}]: ${message}`)
    })
  }

  // Load plugins with error handling
  try {
    bot.loadPlugin(pathfinder)
    bot.loadPlugin(pvp)
    bot.loadPlugin(collectBlock)

    // Load auto-eat plugin v·ªõi ki·ªÉm tra
    if (typeof autoEat === 'function') {
      bot.loadPlugin(autoEat)
      console.log('‚úÖ Auto-eat plugin loaded successfully')
    } else {
      console.log('‚ö†Ô∏è Auto-eat plugin not available, skipping...')
    }

    console.log('‚úÖ Plugins loaded successfully')
  } catch (pluginError) {
    console.log('‚ö†Ô∏è Warning loading plugins:', pluginError)
  }

  // Connection events
  bot.on('login', () => {
    console.log('üîë Bot ƒëang ƒëƒÉng nh·∫≠p...')
  })

  bot.on('spawn', () => {
    console.log('üéâ Bot ƒë√£ spawn th√†nh c√¥ng!')
    console.log(`üé® Skin ƒë∆∞·ª£c √°p d·ª•ng: ${BOT_CONFIG.skinUrl}`)
    if (BOT_CONFIG.capeUrl) {
      console.log(`üé™ Cape ƒë∆∞·ª£c √°p d·ª•ng: ${BOT_CONFIG.capeUrl}`)
    }
    reconnectAttempts = 0 // Reset on successful connection

    // Reset presence check failures on successful spawn
    presenceCheckFailures = 0
    lastPresenceCheck = Date.now()

    // ƒê·ª£i 2 gi√¢y cho bot ·ªïn ƒë·ªãnh tr∆∞·ªõc khi setup
    setTimeout(() => {
      try {
        const defaultMove = new Movements(bot)
        bot.pathfinder.setMovements(defaultMove)

        // Initialize compatibility shims
        createManagerShims()

        // Start c√°c ch·ª©c nƒÉng v·ªõi delay
        setTimeout(() => startStatusUpdates(), 1000)
        setTimeout(() => startWebStatusUpdates(), 1500)
        setTimeout(() => setupAutoEatPlugin(), 2000)
        setTimeout(() => collectNearbyItems(), 3000)

        // X·ª≠ l√Ω respawn sau khi bot ƒë√£ ·ªïn ƒë·ªãnh
        setTimeout(() => handleRespawn(), 5000)

        // Kh·ªüi ƒë·ªông prismarine-viewer tr√™n port 3001
        setTimeout(() => setupPrismarineViewer(), 6000)

        // Start monitoring player list to ensure bot is actually in server
        setTimeout(() => startPlayerListMonitoring(), 7000)

        console.log('‚úÖ Bot setup ho√†n t·∫•t v√† ·ªïn ƒë·ªãnh')

        // C·∫≠p nh·∫≠t bot status cho web interface
        setBotConnected(true, bot)
      } catch (error) {
        console.log('‚ö†Ô∏è L·ªói setup bot sau spawn:', error)
      }
    }, 2000)
  })

  // Monitor player list to ensure bot is actually in the server
  function startPlayerListMonitoring() {
    let playerListCheckFailures = 0
    const MAX_PLAYERLIST_FAILURES = 2

    const playerListInterval = setInterval(() => {
      if (!bot || !bot._client || bot._client.state !== 'play') {
        clearInterval(playerListInterval)
        return
      }

      try {
        const playerList = Object.keys(bot.players || {})
        const botInList = playerList.includes(bot.username) || playerList.some(name =>
          name.toLowerCase() === bot.username.toLowerCase()
        )

        if (!botInList && playerList.length > 0) {
          playerListCheckFailures++
          console.log(`‚ö†Ô∏è Bot not found in player list (${playerListCheckFailures}/${MAX_PLAYERLIST_FAILURES})`)
          console.log(`üìã Current players: [${playerList.join(', ')}]`)

          if (playerListCheckFailures >= MAX_PLAYERLIST_FAILURES) {
            console.log('‚ùå Bot not in server player list, triggering reconnect...')
            clearInterval(playerListInterval)

            // Force disconnect and reconnect
            try {
              bot._client.end()
            } catch (e) {}

            setTimeout(() => {
              if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
                console.log('üöÄ Reconnecting due to player list check failure...')
                createBot()
              }
            }, 2000)
            return
          }
        } else {
          if (playerListCheckFailures > 0) {
            console.log('‚úÖ Bot found in player list, monitoring continues')
            playerListCheckFailures = 0
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Player list monitoring error:', error.message)
        playerListCheckFailures++
      }
    }, 15000) // Check every 15 seconds
  }

  bot.on('death', () => {
    console.log('üíÄ Bot ƒë√£ ch·∫øt!')

    // Th√¥ng b√°o qua Facebook Messenger
    // botMessenger.notifyOwner('bot_died', `Bot ƒë√£ ch·∫øt t·∫°i v·ªã tr√≠ ${Math.floor(bot.entity.position.x)}, ${Math.floor(bot.entity.position.y)}, ${Math.floor(bot.entity.position.z)}`)

    // L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i
    lastPosition = bot.entity.position ? { ...bot.entity.position } : null

    if (followingManager.getIsFollowing()) {
      lastMode = 'following'
      lastTargetPlayerName = followingManager.getTargetPlayerName() || ''
    } else if (protectingManager.getIsProtecting()) {
      lastMode = 'protecting'
      lastTargetPlayerName = protectingManager.getTargetPlayerName() || ''
    } else if (autoFarmManager.getIsAutoFarmActive()) {
      lastMode = 'farming'
    } else if (autoCropFarmerActive) {
      lastMode = 'crop_farming'
    } else if (autoFishingActive) {
      lastMode = 'fishing'
    // Mining mode removed
    } else if (autoChestHuntingActive) {
      lastMode = 'chest_hunting'
    } else {
      lastMode = 'idle'
    }

    console.log(`üíæ ƒê√£ l∆∞u tr·∫°ng th√°i: ${lastMode}, target: ${lastTargetPlayerName}`)
    bot.chat('üíÄ T·ªõ ch·∫øt r·ªìi! S·∫Ω quay l·∫°i ngay...')
  })

  bot.on('health', () => {
    // Handle health updates silently
  })

  // Suppress deprecated physicTick warnings from plugins
  const originalConsoleWarn = console.warn
  console.warn = (...args) => {
    const message = args.join(' ')
    if (!message.includes('physicTick') && !message.includes('deprecated')) {
      originalConsoleWarn.apply(console, args)
    }
  }

  // H√†m trang b·ªã KI·∫æM T·ªêINH·∫§T - B·∫ÆT BU·ªòC cho chi·∫øn ƒë·∫•u
  function equipBestSwordForCombat() {
    try {
      // CH·ªà T√åM KI·∫æM - ∆∞u ti√™n tuy·ªát ƒë·ªëi cho combat
      const swords = bot.inventory.items().filter(item =>
        item.name.includes('sword')
      )

      if (swords.length > 0) {
        // Sort ki·∫øm theo ƒë·ªô m·∫°nh: netherite > diamond > iron > stone > wood
        const bestSword = swords.sort((a, b) => {
          const getSwordTier = (name: string) => {
            if (name.includes('netherite')) return 10
            if (name.includes('diamond')) return 8
            if (name.includes('iron')) return 6
            if (name.includes('stone')) return 4
            if (name.includes('wooden') || name.includes('wood')) return 2
            return 1
          }
          return getSwordTier(b.name) - getSwordTier(a.name)
        })[0]

        // B·∫ÆT BU·ªòC trang b·ªã ki·∫øm t·ªët nh·∫•t
        if (!bot.heldItem || bot.heldItem.name !== bestSword.name) {
          bot.equip(bestSword, 'hand').catch(() => {})
          console.log(`‚öîÔ∏è B·∫ÆT BU·ªòC trang b·ªã ki·∫øm: ${bestSword.name} cho combat`)
          return true
        }
        return true
      } else {
        // Kh√¥ng c√≥ ki·∫øm, trang b·ªã r√¨u t·ªët nh·∫•t
        const axes = bot.inventory.items().filter(item => item.name.includes('axe'))
        if (axes.length > 0) {
          const bestAxe = axes.sort((a, b) => {
            const getAxeTier = (name: string) => {
              if (name.includes('netherite')) return 10
              if (name.includes('diamond')) return 8
              if (name.includes('iron')) return 6
              if (name.includes('stone')) return 4
              if (name.includes('wooden') || name.includes('wood')) return 2
              return 1
            }
            return getAxeTier(b.name) - getAxeTier(a.name)
          })[0]

          bot.equip(bestAxe, 'hand').catch(() => {})
          console.log(`ü™ì Trang b·ªã r√¨u thay th·∫ø: ${bestAxe.name} cho combat`)
          return true
        }
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ ki·∫øm ho·∫∑c r√¨u ƒë·ªÉ combat!')
        return false
      }
    } catch (error) {
      console.log('‚ùå L·ªói trang b·ªã ki·∫øm combat:', error)
      return false
    }
  }

  // H√†m trang b·ªã c√¥ng c·ª• ph√π h·ª£p khi ƒëi theo (kh√¥ng combat)
  function equipBestToolForFollowing() {
    try {
      // Khi ƒëi theo, ∆∞u ti√™n pickaxe > shovel > axe > sword
      const tools = bot.inventory.items().filter(item =>
        item.name.includes('pickaxe') ||
        item.name.includes('shovel') ||
        item.name.includes('axe') ||
        item.name.includes('sword')
      )

      if (tools.length > 0) {
        // S·∫Øp x·∫øp theo ∆∞u ti√™n: pickaxe > shovel > axe > sword
        const bestTool = tools.sort((a, b) => {
          const getToolPriority = (name: string) => {
            if (name.includes('pickaxe')) return 100
            if (name.includes('shovel')) return 80
            if (name.includes('axe')) return 60
            if (name.includes('sword')) return 40
            return 0
          }

          const getTier = (name: string) => {
            if (name.includes('netherite')) return 10
            if (name.includes('diamond')) return 8
            if (name.includes('iron')) return 6
            if (name.includes('stone')) return 4
            if (name.includes('wooden') || name.includes('wood')) return 2
            return 1
          }

          const priorityA = getToolPriority(a.name) + getTier(a.name)
          const priorityB = getToolPriority(b.name) + getTier(b.name)
          return priorityB - priorityA
        })[0]

        if (!bot.heldItem || bot.heldItem.name !== bestTool.name) {
          bot.equip(bestTool, 'hand').catch(() => {})
          console.log(`üîß Trang b·ªã c√¥ng c·ª• theo d√µi: ${bestTool.name}`)
        }
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã c√¥ng c·ª•:', error)
    }
  }

  // Bow functions removed

  // Ki·ªÉm tra v·∫≠t c·∫£n gi·ªØa bot v√† target (raycast) - FIXED VERSION
  function hasLineOfSight(target: any): boolean {
    try {
      if (!target || !target.position) return false

      const botPos = bot.entity.position
      const targetPos = target.position

      // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ki·ªÉm tra: m·∫Øt bot v√† trung t√¢m target
      const from = new Vec3(botPos.x, botPos.y + 1.6, botPos.z) // M·∫Øt bot (1.6 blocks cao)
      const to = new Vec3(targetPos.x, targetPos.y + 0.5, targetPos.z) // Trung t√¢m target

      const distance = from.distanceTo(to)
      if (distance < 2) return true // Qu√° g·∫ßn th√¨ lu√¥n c√≥ line of sight

      // T√≠nh vector h∆∞·ªõng
      const direction = to.clone().subtract(from).normalize()

      // Ki·ªÉm tra t·ª´ng 0.5 block d·ªçc theo ƒë∆∞·ªùng
      const steps = Math.floor(distance * 2)
      for (let i = 1; i < steps; i++) {
        const checkPoint = from.clone().add(direction.clone().scale(i * 0.5))
        const block = bot.blockAt(checkPoint.floor())

        // Ki·ªÉm tra block r·∫Øn c·∫£n ƒë∆∞·ªùng
        if (block && block.name !== 'air') {
          // Cho ph√©p b·∫Øn qua c√°c block kh√¥ng r·∫Øn
          const passableBlocks = [
            'water', 'lava', 'grass', 'tall_grass', 'fern', 'large_fern',
            'flower', 'dandelion', 'poppy', 'rose', 'vine', 'snow',
            'snow_layer', 'torch', 'redstone_torch', 'lever', 'button',
            'pressure_plate', 'tripwire', 'string', 'web', 'fire'
          ]

          const isPassable = passableBlocks.some(passable =>
            block.name.includes(passable)
          )

          if (!isPassable && block.boundingBox === 'block') {
            console.log(`üö´V·∫≠t c·∫£n: ${block.name} t·∫°i ${checkPoint.x.toFixed(1)}, ${checkPoint.y.toFixed(1)}, ${checkPoint.z.toFixed(1)}`)
            return false
          }
        }
      }

      return true // Kh√¥ng c√≥ v·∫≠t c·∫£n
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói ki·ªÉm tra line of sight:', error)
      return true // Cho ph√©p t·∫•n c√¥ng n·∫øu c√≥ l·ªói ƒë·ªÉ tr√°nh block ho√†n to√†n
    }
  }

  // H√†m t·∫•n c√¥ng c·∫≠n chi·∫øn SPAM C·ª∞C NHANH - t·∫•n c√¥ng li√™n t·ª•c kh√¥ng ng·ª´ng
  function meleeAttack(target: any, distance: number): boolean {
    if (!target || !target.isValid || !target.position) return false

    try {
      // Ng·∫Øm m·ª•c ti√™u tr∆∞·ªõc khi t·∫•n c√¥ng c·∫≠n chi·∫øn
      const targetPos = target.position.clone()
      targetPos.y += target.height * 0.5 // Ng·∫Øm v√†o trung t√¢m ƒë·ªÉ ch√≠nh x√°c h∆°n

      // ƒê·∫£m b·∫£o kh√¥ng nh√¨n xu·ªëng ƒë·∫•t trong c·∫≠n chi·∫øn
      const botEyeY = bot.entity.position.y + 1.6
      if (targetPos.y < botEyeY - 0.8) {
        targetPos.y = botEyeY - 0.5
      }

      // Ng·∫Øm c·ª±c nhanh
      bot.lookAt(targetPos, false)

      // T·∫•n c√¥ng - gi·∫£m xu·ªëng ƒë·ªÉ tr√°nh spam
      for (let i = 0; i < 3; i++) {
        bot.attack(target)
      }

      // B·∫≠t sprint ƒë·ªÉ tƒÉng damage v√† t·ªëc ƒë·ªô
      bot.setControlState('sprint', true)

      // T·∫•n c√¥ng spam (ƒë√£ lo·∫°i b·ªè log ƒë·ªÉ tr√°nh spam console)
      return true
    } catch (error) {
      console.log('‚ùå L·ªói t·∫•n c√¥ng c·∫≠n chi·∫øn:', error)
      return false
    }
  }

  async function equipBestArmor() {
    try {
      const armorSlots: {[key: string]: any} = {
        head: null,
        torso: null,
        legs: null,
        feet: null
      }

      // Material priority t·ª´ x·ªãn ƒë·∫øn c√πi
      const materialPriority = ['netherite', 'diamond', 'iron', 'gold', 'chainmail', 'leather']

      for (const item of bot.inventory.items()) {
        // Check helmet
        if (item.name.includes('helmet')) {
          if (!armorSlots.head) {
            armorSlots.head = item
          } else {
            // Compare by material priority (safer than maxDurability)
            const currentMaterial = materialPriority.findIndex(m => armorSlots.head.name.includes(m))
            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))
            if (newMaterial < currentMaterial || newMaterial === -1) {
              armorSlots.head = item
            }
          }
        }
        // Check chestplate
        else if (item.name.includes('chestplate')) {
          if (!armorSlots.torso) {
            armorSlots.torso = item
          } else {
            const currentMaterial = materialPriority.findIndex(m => armorSlots.torso.name.includes(m))
            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))
            if (newMaterial < currentMaterial || newMaterial === -1) {
              armorSlots.torso = item
            }
          }
        }
        // Check leggings
        else if (item.name.includes('leggings')) {
          if (!armorSlots.legs) {
            armorSlots.legs = item
          } else {
            const currentMaterial = materialPriority.findIndex(m => armorSlots.legs.name.includes(m))
            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))
            if (newMaterial < currentMaterial || newMaterial === -1) {
              armorSlots.legs = item
            }
          }
        }
        // Check boots
        else if (item.name.includes('boots')) {
          if (!armorSlots.feet) {
            armorSlots.feet = item
          } else {
            const currentMaterial = materialPriority.findIndex(m => armorSlots.feet.name.includes(m))
            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))
            if (newMaterial < currentMaterial || newMaterial === -1) {
              armorSlots.feet = item
            }
          }
        }
      }

      // Equip armor v·ªõi async/await ƒë·ªÉ tr√°nh l·ªói
      for (const [slot, item] of Object.entries(armorSlots)) {
        if (item) {
          try {
            const destination = slot === 'torso' ? 'torso' : slot
            await bot.equip(item, destination as any)
          } catch (equipError) {
            // Silent fail - gi√°p c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c trang b·ªã r·ªìi
          }
        }
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã gi√°p:', error)
    }
  }

  async function equipBestTool() {
    try {
      const pickaxes = bot.inventory.items().filter(item => item.name.includes('pickaxe'))

      if (pickaxes.length > 0) {
        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden']
        let bestPickaxe = pickaxes[0]

        for (const material of priority) {
          const pickaxe = pickaxes.find(p => p.name.includes(material))
          if (pickaxe) {
            bestPickaxe = pickaxe
            break
          }
        }

        if (!bot.heldItem || bot.heldItem.name !== bestPickaxe.name) {
          await bot.equip(bestPickaxe, 'hand')
          console.log(`üî® Trang b·ªã ${bestPickaxe.name}`)
        }
        return true
      } else {
        console.log('Kh√¥ng c√≥ pickaxe n√†o ƒë·ªÉ trang b·ªã.')
        return false
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã tool:', error)
      return false
    }
  }

  function equipOffhand() {
    try {
      const totem = bot.inventory.items().find(item => item.name === 'totem_of_undying')
      const shield = bot.inventory.items().find(item => item.name.includes('shield'))

      if (totem) {
        bot.equip(totem, 'off-hand').catch(() => {})
        console.log(`‚ú® Bot ƒë√£ trang b·ªã V·∫≠t T·ªï v√†o tay tr√°i.`)
      } else if (shield) {
        bot.equip(shield, 'off-hand').catch(() => {})
        console.log(`üõ°Ô∏è Bot ƒë√£ trang b·ªã Khi√™n v√†o tay tr√°i.`)
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã offhand:', error)
    }
  }

  // Helper function ƒë·ªÉ ki·ªÉm tra c√≥ n√™n ch·∫∑n ho·∫°t ƒë·ªông khi c√¢u c√° kh√¥ng
  function isBlockedByFishing() {
    return autoFishingActive && (autoEquipDisabled || autoItemCollectionDisabled)
  }

  // X·ª≠ l√Ω respawn - quay l·∫°i v·ªã tr√≠ c≈© v√† ti·∫øp t·ª•c ch·∫ø ƒë·ªô
  async function handleRespawn() {
    // Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ tr·∫°ng th√°i ƒë∆∞·ª£c l∆∞u
    if (lastMode === 'idle' || !lastPosition) {
      return
    }

    console.log(`üîÑ B·∫Øt ƒë·∫ßu kh√¥i ph·ª•c tr·∫°ng th√°i: ${lastMode}`)

    // ƒê·ª£i 3 gi√¢y ƒë·ªÉ bot ·ªïn ƒë·ªãnh sau khi respawn
    setTimeout(async () => {
      try {
        // Ki·ªÉm tra quy·ªÅn /tp n·∫øu ch∆∞a bi·∫øt
        if (hasTpPermission === null) {
          console.log('üîç Ki·ªÉm tra quy·ªÅn /tp...')
          const currentPos = bot.entity.position
          bot.chat(`/tp ${bot.username} ${Math.floor(currentPos.x)} ${Math.floor(currentPos.y + 1)} ${Math.floor(currentPos.z)}`)

          // Ki·ªÉm tra sau 2 gi√¢y
          setTimeout(() => {
            const newPos = bot.entity.position
            const moved = Math.abs(newPos.y - currentPos.y) > 0.5

            if (moved) {
              hasTpPermission = true
              console.log('‚úÖ Bot c√≥ quy·ªÅn /tp')
              // Th·ª±c hi·ªán teleport v·ªÅ v·ªã tr√≠ c≈©
              performRespawnTeleport()
            } else {
              hasTpPermission = false
              tpFailCount++
              console.log('‚ùå Bot kh√¥ng c√≥ quy·ªÅn /tp')
              bot.chat('ü•∫ T·ªõ kh√¥ng c√≥ quy·ªÅn /tp ƒë·ªÉ quay l·∫°i v·ªã tr√≠ c≈©. D·ª´ng ho·∫°t ƒë·ªông!')
              resetRespawnState()
            }
          }, 2000)
        } else if (hasTpPermission === true) {
          // C√≥ quy·ªÅn /tp, th·ª±c hi·ªán ngay
          performRespawnTeleport()
        } else {
          // Kh√¥ng c√≥ quy·ªÅn /tp
          tpFailCount++
          if (tpFailCount >= 3) {
            bot.chat('ü•∫ T·ªõ kh√¥ng c√≥ quy·ªÅn /tp. D·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông!')
            resetRespawnState()
            return
          }
          console.log('‚ùå B·ªè qua respawn v√¨ kh√¥ng c√≥ quy·ªÅn /tp')
        }
      } catch (error) {
        console.log('‚ùå L·ªói khi ki·ªÉm tra quy·ªÅn /tp:', error)
        resetRespawnState()
      }
    }, 3000)
  }

  function performRespawnTeleport() {
    if (!lastPosition) return

    console.log(`üöÄ Teleport v·ªÅ v·ªã tr√≠ c≈©: ${Math.floor(lastPosition.x)}, ${Math.floor(lastPosition.y)}, ${Math.floor(lastPosition.z)}`)
    const tpCommand = `/tp ${bot.username} ${Math.floor(lastPosition.x)} ${Math.floor(lastPosition.y)} ${Math.floor(lastPosition.z)}`
    bot.chat(tpCommand)

    // Ki·ªÉm tra th√†nh c√¥ng sau 3 gi√¢y
    setTimeout(() => {
      const currentPos = bot.entity.position
      const distance = Math.sqrt(
        Math.pow(currentPos.x - lastPosition!.x, 2) +
        Math.pow(currentPos.y - lastPosition!.y, 2) +
        Math.pow(currentPos.z - lastPosition!.z, 2)
      )

      if (distance < 10) {
        console.log('‚úÖ Teleport th√†nh c√¥ng, kh√¥i ph·ª•c ch·∫ø ƒë·ªô')
        restorePreviousMode()
      } else {
        console.log('‚ùå Teleport th·∫•t b·∫°i, th·ª≠ l·∫°i...')
        tpFailCount++
        if (tpFailCount < 3) {
          setTimeout(() => performRespawnTeleport(), 2000)
        } else {
          console.log('‚ùå Teleport th·∫•t b·∫°i qu√° nhi·ªÅu l·∫ßn, d·ª´ng kh√¥i ph·ª•c')
          resetRespawnState()
        }
      }
    }, 3000)
  }

  function restorePreviousMode() {
    console.log(`üîÑ Kh√¥i ph·ª•c ch·∫ø ƒë·ªô: ${lastMode}`)

    switch (lastMode) {
      case 'following':
        if (lastTargetPlayerName) {
          bot.chat(`üîÑ Quay l·∫°i theo ${lastTargetPlayerName}!`)
          followingManager.startFollowingPlayer(lastTargetPlayerName)
        }
        break

      case 'protecting':
        if (lastTargetPlayerName) {
          bot.chat(`üîÑ Quay l·∫°i b·∫£o v·ªá ${lastTargetPlayerName}!`)
          protectingManager.startProtectingPlayer(lastTargetPlayerName)
        }
        break

      case 'farming':
        bot.chat('üîÑ Quay l·∫°i auto farm!')
        autoFarmManager.startAutoFarmAll()
        break

      case 'crop_farming':
        bot.chat('üîÑ Quay l·∫°i auto crop farmer!')
        startAutoCropFarmer()
        break

      case 'fishing':
        bot.chat('üîÑ Quay l·∫°i auto c√¢u!')
        fishingManager.startSmartAutoFishing()
        break

      // Mining mode removed

      case 'chest_hunting':
        bot.chat('üîÑ Quay l·∫°i auto t√¨m r∆∞∆°ng!')
        startAutoChestHunting()
        break

      default:
        console.log('üîÑ Kh√¥ng c√≥ ch·∫ø ƒë·ªô ƒë·ªÉ kh√¥i ph·ª•c')
        break
    }

    // Reset tr·∫°ng th√°i sau khi kh√¥i ph·ª•c
    resetRespawnState()
  }

  function resetRespawnState() {
    lastPosition = null
    lastMode = 'idle'
    lastTargetPlayerName = ''
    tpFailCount = 0
  }

  // H√†m trang b·ªã v≈© kh√≠ t·ªët nh·∫•t
  function equipBestWeapon() {
    try {
      // T√¨m v≈© kh√≠ t·ªët nh·∫•t theo th·ª© t·ª±: sword > axe > bow
      const weapons = bot.inventory.items().filter(item =>
        item.name.includes('sword') ||
        item.name.includes('axe') ||
        item.name.includes('bow')
      )

      if (weapons.length > 0) {
        // Sort theo ƒë·ªô m·∫°nh
        const bestWeapon = weapons.sort((a, b) => {
          const getWeaponTier = (name: string) => {
            if (name.includes('netherite')) return 100
            if (name.includes('diamond')) return 80
            if (name.includes('iron')) return 60
            if (name.includes('stone')) return 40
            if (name.includes('wooden') || name.includes('wood')) return 20
            return 10
          }

          const getWeaponType = (name: string) => {
            if (name.includes('sword')) return 1000
            if (name.includes('axe')) return 800
            if (name.includes('bow')) return 600
            return 0
          }

          const scoreA = getWeaponType(a.name) + getWeaponTier(a.name)
          const scoreB = getWeaponType(b.name) + getWeaponTier(b.name)
          return scoreB - scoreA
        })[0]

        if (!bot.heldItem || bot.heldItem.name !== bestWeapon.name) {
          bot.equip(bestWeapon, 'hand').catch(() => {})
        }
      }
    } catch (error) {
      console.log('L·ªói trang b·ªã v≈© kh√≠:', error)
    }
  }

  // T·ª± ƒë·ªông trang b·ªã ƒë·ªãnh k·ª≥ (ch·∫∑n khi ƒëang c√¢u) - gi·∫£m frequency v√¨ plugin t·ª± x·ª≠ l√Ω
  setInterval(() => {
    // Kh√¥ng trang b·ªã khi ƒëang c√¢u c√° ho·∫∑c ƒëang ƒÉn
    if (isBlockedByFishing() || isEating) {
      return
    }

    equipBestWeapon()
    equipBestArmor()
    equipOffhand()
  }, 15000) // TƒÉng l√™n 15 gi√¢y v√¨ plugin t·ª± x·ª≠ l√Ω vi·ªác ƒÉn

  // ------------------ Auto eat plugin ------------------
  function setupAutoEatPlugin() {
    console.log('üçΩÔ∏è Kh·ªüi t·∫°o Auto Eat Plugin - Ch·ªâ ƒÉn khi ƒë√≥i < 6 v√† an to√†n!')

    // Ki·ªÉm tra xem bot.autoEat c√≥ t·ªìn t·∫°i kh√¥ng
    if (!bot.autoEat) {
      console.log('‚ö†Ô∏è Auto eat plugin kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng manual eating')
      autoEatPluginActive = false
      setupManualEating()
      return
    }

    console.log('‚úÖ Auto eat plugin ƒë√£ ho·∫°t ƒë·ªông!')
    autoEatPluginActive = true

    try {
      // C·∫•u h√¨nh auto eat plugin
      bot.autoEat.options = {
        priority: 'foodPoints', // ∆Øu ti√™n theo ƒëi·ªÉm th·ª©c ƒÉn
        startAt: 6, // B·∫Øt ƒë·∫ßu ƒÉn khi food < 6 (3 ƒë√πi)
        bannedFood: [
          // Lo·∫°i b·ªè th·ª©c ƒÉn c√≥ hi·ªáu ·ª©ng ƒë·ªôc
          'spider_eye', 'poisonous_potato', 'pufferfish', 'raw_chicken',
          'rotten_flesh', 'suspicious_stew'
        ],
        // Ch·ªâ ƒÉn nh·ªØng th·ª©c ƒÉn an to√†n kh√¥ng g√¢y hi·ªáu ·ª©ng ƒë·ªôc
        allowedFood: [
          'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',
          'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',
          'golden_apple', 'enchanted_golden_apple', 'cooked_mutton',
          'cookie', 'melon_slice', 'sweet_berries', 'honey_bottle',
          'milk_bucket', 'mushroom_stew', 'rabbit_stew', 'beetroot_soup'
        ],
        timeout: 3000 // Timeout 3 gi√¢y cho vi·ªác ƒÉn
      }

      // Event listener khi b·∫Øt ƒë·∫ßu ƒÉn
      bot.on('autoeat_started', (item: any) => {
        console.log(`üçû Auto eat b·∫Øt ƒë·∫ßu ƒÉn: ${item.name} - Food hi·ªán t·∫°i: ${bot.food}/20`)
        isEating = true
      })

      // Event listener khi ƒÉn xong
      bot.on('autoeat_finished', (item: any) => {
        console.log(`‚úÖ Auto eat ho√†n th√†nh: ${item.name} - Food hi·ªán t·∫°i: ${bot.food}/20`)
        isEating = false

        // Trang b·ªã l·∫°i c√¥ng c·ª• mining sau khi ƒÉn n·∫øu ƒëang mine
        if (autoMiningActive) {
          setTimeout(() => {
            equipBestPickaxe()
          }, 500)
        } else if (!isBlockedByFishing()) {
          setTimeout(() => {
            equipBestWeapon()
          }, 500)
        }
      })

      // Event listener khi l·ªói ƒÉn
      bot.on('autoeat_error', (error: any) => {
        console.log('‚ö†Ô∏è Auto eat l·ªói:', error.message)
        isEating = false
      })

      // Ki·ªÉm tra mob xung quanh m·ªói 2 gi√¢y - ch·ªâ ƒÉn khi an to√†n
      setInterval(() => {
        if (!autoEatPluginActive || !bot.autoEat) return

        const currentTime = Date.now()
        if (currentTime - lastMobCheckTime < 2000) return // Ch·ªâ check m·ªói 2 gi√¢y
        lastMobCheckTime = currentTime

        const food = bot.food

        // Ch·ªâ ki·ªÉm tra khi th·ª±c s·ª± c·∫ßn ƒÉn
        if (food >= 6) {
          // ƒê·ªß no, t·∫Øt auto eat
          if (bot.autoEat.isEnabled && bot.autoEat.isEnabled()) {
            bot.autoEat.disable()
          }
          return
        }

        // Qu√©t mob xung quanh 4 blocks - ch·ªâ khi kh√¥ng ƒëang mine
        if (!autoMiningActive) {
          const nearbyMobs = Object.values(bot.entities).filter((entity: any) => {
            if (!entity || !entity.position) return false
            if (entity.type !== 'mob') return false
            if (entity.name?.includes('villager') || entity.name?.includes('iron_golem')) return false

            const distance = bot.entity.position.distanceTo(entity.position)
            return distance <= 4
          })

          if (nearbyMobs.length === 0) {
            // An to√†n, b·∫≠t auto eat
            if (bot.autoEat.isEnabled && !bot.autoEat.isEnabled() && food < 6) {
              bot.autoEat.enable()
              console.log('üçΩÔ∏è V√πng an to√†n - B·∫≠t auto eat (Food:', food, '/20)')
            }
          } else {
            // C√≥ mob g·∫ßn, t·∫Øt auto eat ƒë·ªÉ t·∫≠p trung chi·∫øn ƒë·∫•u
            if (bot.autoEat.isEnabled && bot.autoEat.isEnabled()) {
              bot.autoEat.disable()
              console.log('‚öîÔ∏è C√≥ mob g·∫ßn - T·∫°m t·∫Øt auto eat ƒë·ªÉ combat')
            }
          }
        } else {
          // ƒêang mine - lu√¥n cho ph√©p ƒÉn khi c·∫ßn
          if (bot.autoEat.isEnabled && !bot.autoEat.isEnabled() && food < 6) {
            bot.autoEat.enable()
            console.log('‚õèÔ∏è Mine mode - B·∫≠t auto eat (Food:', food, '/20)')
          }
        }
      }, 2000) // Check m·ªói 2 gi√¢y

      console.log('üçΩÔ∏è Auto eat plugin setup ho√†n t·∫•t!')
    } catch (error) {
      console.log('‚ùå L·ªói setup auto eat plugin:', error.message)
      autoEatPluginActive = false
      setupManualEating()
    }
  }

  // Backup manual eating system
  function setupManualEating() {
    console.log('üçΩÔ∏è Kh·ªüi t·∫°o Manual Eating System')

    setInterval(() => {
      if (autoEatPluginActive || isEating) return

      const food = bot.food
      if (food < 6) { // Ch·ªâ ƒÉn khi ƒë√≥i < 6
        const safeFood = bot.inventory.items().find(item => {
          const name = item.name.toLowerCase()
          const safeItems = [
            'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',
            'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',
            'golden_apple', 'enchanted_golden_apple', 'cooked_mutton',
            'cookie', 'melon_slice', 'sweet_berries'
          ]
          return safeItems.some(safe => name.includes(safe))
        })

        if (safeFood) {
          isEating = true
          console.log(`üçû Manual eating: ${safeFood.name}`)

          bot.equip(safeFood, 'hand').then(() => {
            bot.consume().then(() => {
              console.log(`‚úÖ ƒê√£ ƒÉn ${safeFood.name}`)
              isEating = false

              // Trang b·ªã l·∫°i c√¥ng c·ª• sau khi ƒÉn
              if (autoMiningActive) {
                setTimeout(() => equipBestPickaxe(), 500)
              } else if (!isBlockedByFishing()) {
                setTimeout(() => equipBestWeapon(), 500)
              }
            }).catch(() => {
              isEating = false
            })
          }).catch(() => {
            isEating = false
          })
        }
      }
    }, 3000) // Check m·ªói 3 gi√¢y
  }

  // H√†m t·∫Øt auto eat plugin
  function disableAutoEatPlugin() {
    if (autoEatPluginActive && bot.autoEat) {
      bot.autoEat.disable()
      autoEatPluginActive = false
      console.log('‚èπÔ∏è Auto eat plugin ƒë√£ t·∫Øt')
    }
  }

  // ------------------ Nh·∫∑t item ------------------
  let itemCollectionDisabled = false // Bi·∫øn ƒë·ªÉ t·∫Øt nh·∫∑t ƒë·ªì khi d·ª´ng

  function collectNearbyItems() {
    setInterval(() => {
      // Ch·∫∑n nh·∫∑t ƒë·ªì khi ƒëang c√¢u c√° ho·∫∑c khi b·ªã disabled
      if (isBlockedByFishing() || itemCollectionDisabled) {
        return
      }

      try {
        const entities = Object.values(bot.entities)
        for (const entity of entities) {
          if (entity.name === 'item' && entity.position && bot.entity.position.distanceTo(entity.position) < 5) {
            bot.lookAt(entity.position, true).catch(() => {})
            bot.collectBlock.collect(entity).catch(() => {})
          }
        }
      } catch (error) {
        // Ignore errors
      }
    }, 2000)
  }

  // ============= ITEM TRACKING SYSTEM =============
  // Map ƒë·ªÉ l∆∞u th√¥ng tin item entities khi ch√∫ng spawn
  const itemEntityMap = new Map<number, {
    id: number,
    count: number,
    name: string,
    displayName: string,
    spawnTime: number
  }>()

  // Theo d√µi khi item entities spawn ƒë·ªÉ l∆∞u metadata
  bot.on('entitySpawn', (entity: any) => {
    // Ch·ªâ quan t√¢m ƒë·∫øn item entities
    if (entity.name === 'item' && entity.metadata) {
      try {
        // L·∫•y th√¥ng tin item t·ª´ metadata
        const itemStack = entity.metadata.item
        if (itemStack && itemStack.itemId !== undefined) {
          // Tra c·ª©u t√™n item t·ª´ registry b·∫±ng itemId
          const itemInfo = bot.registry.items[itemStack.itemId]
          if (itemInfo) {
            // L∆∞u v√†o Map v·ªõi entity ID l√†m key
            itemEntityMap.set(entity.id, {
              id: itemStack.itemId,
              count: itemStack.itemCount || 1,
              name: itemInfo.name,
              displayName: itemInfo.displayName || itemInfo.name,
              spawnTime: Date.now()
            })

            console.log(`üìã Item spawned: ${itemInfo.name} x${itemStack.itemCount || 1} (entity ${entity.id})`)
          }
        }
      } catch (error) {
        // B·ªè qua l·ªói parsing metadata
      }
    }
  })

  // Cleanup Map ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√°nh memory leak (x√≥a items c≈© h∆°n 60 gi√¢y)
  setInterval(() => {
    const now = Date.now()
    for (const [entityId, itemData] of itemEntityMap.entries()) {
      if (now - itemData.spawnTime > 60000) { // 60 gi√¢y
        itemEntityMap.delete(entityId)
      }
    }
  }, 30000) // Cleanup m·ªói 30 gi√¢y

  // Track khi bot nh·∫∑t item - ENHANCED VERSION
  bot.on('playerCollect', (collector: any, collected: any) => {
    if (collector.username === bot.username) {
      let itemName = 'Unknown item'
      let itemCount = 1

      // PH∆Ø∆†NG PH√ÅP 1: L·∫•y t·ª´ Map ƒë√£ l∆∞u (∆∞u ti√™n cao nh·∫•t)
      if (collected.id && itemEntityMap.has(collected.id)) {
        const itemData = itemEntityMap.get(collected.id)!
        itemName = itemData.displayName || itemData.name
        itemCount = itemData.count

        // X√≥a kh·ªèi Map sau khi s·ª≠ d·ª•ng
        itemEntityMap.delete(collected.id)

        console.log(`üéÅ Bot ƒë√£ nh·∫≠n: ${itemName} x${itemCount} (t·ª´ Map)`)
        return
      }

      // PH∆Ø∆†NG PH√ÅP 2: Th·ª≠ l·∫•y t·ª´ metadata hi·ªán t·∫°i
      if (collected.metadata && collected.metadata.item) {
        const itemStack = collected.metadata.item
        if (itemStack.itemId !== undefined) {
          const itemInfo = bot.registry.items[itemStack.itemId]
          if (itemInfo) {
            itemName = itemInfo.displayName || itemInfo.name
            itemCount = itemStack.itemCount || 1
            console.log(`üéÅ Bot ƒë√£ nh·∫≠n: ${itemName} x${itemCount} (t·ª´ metadata)`)
            return
          }
        }
      }

      // PH∆Ø∆†NG PH√ÅP 3: Fallback methods
      if (collected.metadata && collected.metadata.itemName) {
        itemName = collected.metadata.itemName
      } else if (collected.name && collected.name !== 'item') {
        itemName = collected.name
      } else if (collected.metadata && collected.metadata.itemId) {
        const itemById = bot.registry.items[collected.metadata.itemId]
        if (itemById) {
          itemName = itemById.displayName || itemById.name
        }
      }

      // L√†m s·∫°ch t√™n item (b·ªè minecraft: prefix n·∫øu c√≥)
      if (itemName.includes(':')) {
        itemName = itemName.split(':').pop() || itemName
      }

      // Log v·ªõi t√™n ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán
      console.log(`üéÅ Bot ƒë√£ nh·∫≠n: ${itemName} x${itemCount} (fallback)`)
    }
  })

  // Backup method: Listen for inventory changes ƒë·ªÉ track items ƒë∆∞·ª£c nh·∫∑t
  bot.on('windowUpdate', (slot: number, oldItem: any, newItem: any) => {
    // Ch·ªâ track khi c√≥ item m·ªõi ƒë∆∞·ª£c th√™m v√†o inventory
    if (newItem && !oldItem && slot >= 9 && slot <= 44) { // Slots c·ªßa main inventory
      let itemName = newItem.name || 'unknown_item'

      // C·∫£i thi·ªán t√™n hi·ªÉn th·ªã
      if (newItem.displayName) {
        itemName = newItem.displayName
      } else if (newItem.name) {
        // Convert technical name th√†nh display name
        itemName = newItem.name.replace(/_/g, ' ')
          .split(' ')
          .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ')
      }

      console.log(`üì¶ Inventory updated: +${itemName} x${newItem.count} (slot ${slot})`)
    }
  })

  // ------------------ Random Status Updates ------------------
  function startStatusUpdates() {
    setInterval(() => {
      // Removed flirting, now only provides status updates when needed
      if (Math.random() < 0.1) { // 10% chance every 30s for status
        const statusMessages = [
          "ü§ñ T·ªõ ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!",
          "‚ö° H·ªá th·ªëng bot stable!",
          "üîã Bot ready cho commands!",
          "üåü M·ªçi th·ª© OK!"
        ]
        const randomMessage = statusMessages[Math.floor(Math.random() * statusMessages.length)]
        console.log(`Status: ${randomMessage}`)
      }
    }, 30000) // 30 gi√¢y m·ªôt l·∫ßn
  }

  // Function ƒë·ªÉ c·∫≠p nh·∫≠t web status real-time - silent mode
  function startWebStatusUpdates() {
    setInterval(() => {
      if (bot && bot.entity) {
        // Determine current mode
        let currentMode = 'idle';
        let currentStatus = 'ƒêang ch·ªù l·ªánh';

        if (isFollowing) {
          currentMode = 'following';
          currentStatus = `ƒêang theo ${targetPlayer?.username || 'player'}`;
        } else if (isProtecting) {
          currentMode = 'protecting';
          currentStatus = `ƒêang b·∫£o v·ªá ${targetPlayer?.username || 'player'}`;
        } else if (autoFarmActive) {
          currentMode = 'autofarming';
          currentStatus = 'ƒêang auto farm monsters';
        } else if (autoCropFarmerActive) {
          currentMode = 'crop_farming';
          currentStatus = 'ƒêang auto crop farmer';
        } else if (autoFishingActive) {
          currentMode = 'fishing';
          currentStatus = 'ƒêang c√¢u c√°';
        // Mining status removed
        } else if (autoMiningActive) {
          currentMode = 'mining';
          currentStatus = `ƒêang ƒë√†o ${targetOreType}`;
        } else if (autoChestHuntingActive) {
          currentMode = 'chest_hunting';
          currentStatus = 'ƒêang t√¨m r∆∞∆°ng';
        }

        // Get nearby entities
        const nearbyMobs = Object.values(bot.entities)
          .filter(entity => entity.type === 'mob' && entity.position)
          .filter(entity => bot.entity.position.distanceTo(entity.position) < 10)
          .map(entity => ({
            type: entity.name || 'unknown',
            distance: Math.round(bot.entity.position.distanceTo(entity.position) * 10) / 10
          }))
          .slice(0, 5); // Limit to 5 entities

        const currentPosition = {
          x: Math.round(bot.entity.position.x),
          y: Math.round(bot.entity.position.y),
          z: Math.round(bot.entity.position.z)
        };

        // Silent update bot status for web interface (no console logs)
        updateBotStatus({
          connected: true,
          health: bot.health,
          food: bot.food,
          position: currentPosition,
          mode: currentMode,
          status: currentStatus,
          nearbyMobs: nearbyMobs,
          equipment: {
            weapon: bot.heldItem?.name || null,
            armor: [] // Could be expanded later
          },
          targetPlayer: targetPlayer?.username || null,
          lastActivity: new Date().toLocaleString('vi-VN')
        });

        // ƒê·ªìng b·ªô v·ªõi Prismarine Viewer m·ªói 10 gi√¢y ƒë·ªÉ gi·∫£m spam
        if (Date.now() % 10000 < 2000) {
          const viewData = {
            position: currentPosition,
            health: bot.health,
            food: bot.food,
            inventory: getFullInventoryData()
          };

          syncWithPrismarineViewer(viewData);
        }
      }
    }, 5000) // Sync m·ªói 5 gi√¢y ƒë·ªÉ c√¢n b·∫±ng gi·ªØa real-time v√† performance
  }

  // ------------------ SMART AUTO FISHING ------------------
  // Bi·∫øn tracking cho smart auto fishing
  let isFishing = false
  let fishingInterval: NodeJS.Timeout | null = null
  let currentHook: any = null
  let hookCheckInterval: NodeJS.Timeout | null = null
  let fishingStartTime = 0
  let hasFishBitten = false
  let lastHookPosition: any = null

  // Alias ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi l·ªánh chat c≈©
  startSmartAutoFishing = function() {
    // D·ª´ng c√°c ho·∫°t ƒë·ªông kh√°c TR∆Ø·ªöC khi b·∫Øt ƒë·∫ßu c√¢u
    stopFollowing()
    stopProtecting()
    autoFarmActive = false

    // K√≠ch ho·∫°t ch·∫ø ƒë·ªô c√¢u c√° th√¥ng minh
    autoFishingActive = true
    autoItemCollectionDisabled = true  // T·∫°m d·ª´ng nh·∫∑t ƒë·ªì
    autoEquipDisabled = true           // T·∫°m d·ª´ng t·ª± ƒë·ªông trang b·ªã
    itemCollectionDisabled = false     // B·∫≠t l·∫°i nh·∫∑t ƒë·ªì cho fishing

    isFishing = false
    currentHook = null
    bobberThrowCount = 0 // Reset ƒë·∫øm √¢m thanh fishing_bobber.throw cho l·∫ßn c√¢u n√†y

    bot.chat('üé£ B·∫Øt ƒë·∫ßu auto c√¢u th√¥ng minh! T·ªõ ch·ªâ c·∫ßm c·∫ßn c√¢u th√¥i n√®~ ‚ú®')
    console.log('üé£ Smart Auto Fishing - Activated')

    if (fishingInterval) {
      clearInterval(fishingInterval)
    }

    fishingInterval = setInterval(async () => {
      if (!autoFishingActive) {
        clearInterval(fishingInterval!)
        fishingInterval = null
        return
      }

      // N·∫øu ƒëang c√¢u th√¨ kh√¥ng l√†m g√¨ c·∫£, ch·ªâ ƒë·ª£i
      if (isFishing) {
        return
      }

      try {
        // B∆Ø·ªöC 1: Ki·ªÉm tra c·∫ßn c√¢u
        const fishingRod = bot.inventory.items().find(item => item.name.includes('fishing_rod'))

        if (!fishingRod) {
          bot.chat('ü•∫ Kh√¥ng c√≥ c·∫ßn c√¢u! C·∫ßn c·∫ßn c√¢u ƒë·ªÉ ho·∫°t ƒë·ªông n√®!')
          stopSmartAutoFishing()
          return
        }

        // B∆Ø·ªöC 2: Ch·ªâ c·∫ßm c·∫ßn c√¢u - b·ªè t·∫•t c·∫£ ƒë·ªì kh√°c
        if (!bot.heldItem || !bot.heldItem.name.includes('fishing_rod')) {
          await bot.equip(fishingRod, 'hand')
          console.log('üé£ Ch·ªâ c·∫ßm c·∫ßn c√¢u:', fishingRod.name)
          await new Promise(resolve => setTimeout(resolve, 1200))
        }

        // B∆Ø·ªöC 3: T√¨m n∆∞·ªõc ƒë·ªÉ c√¢u
        const waterBlock = bot.findBlock({
          matching: (block) => block && (block.name === 'water'),
          maxDistance: 20,
          useExtraInfo: true
        })

        if (waterBlock) {
          // Di chuy·ªÉn ƒë·∫øn g·∫ßn n∆∞·ªõc n·∫øu c·∫ßn
          if (bot.entity.position.distanceTo(waterBlock.position) > 5) {
            const movements = new Movements(bot)
            movements.allowSprinting = true
            bot.pathfinder.setMovements(movements)
            const nearWaterGoal = new goals.GoalNear(waterBlock.position.x, waterBlock.position.y, waterBlock.position.z, 4)
            bot.pathfinder.setGoal(nearWaterGoal)
            await new Promise(resolve => setTimeout(resolve, 2000))
            bot.pathfinder.setGoal(null)
          }

          // B∆Ø·ªöC 4: Th·∫£ c√¢u xu·ªëng n∆∞·ªõc
          await bot.lookAt(waterBlock.position.offset(0.5, 0.5, 0.5), true)
          await new Promise(resolve => setTimeout(resolve, 400))

          console.log('üé£ Th·∫£ c·∫ßn xu·ªëng n∆∞·ªõc!')
          isFishing = true
          currentHook = null
          bobberThrowCount = 0 // Reset ƒë·∫øm √¢m thanh fishing_bobber.throw cho l·∫ßn c√¢u n√†y
          bot.activateItem() // Th·∫£ phao

          // B∆Ø·ªöC 5: Setup event listeners cho fishing
          setupFishingEventListeners()

          // B∆Ø·ªöC 6: ƒê·ª£i 4 gi√¢y tr∆∞·ªõc khi theo d√µi
          setTimeout(() => {
            if (!autoFishingActive || !isFishing) return

            // T√¨m fishing hook entity v·ªõi nhi·ªÅu l·∫ßn th·ª≠
            let attempts = 0
            const maxAttempts = 10
            const findHook = () => {
              attempts++
              currentHook = Object.values(bot.entities).find(entity =>
                (entity.name === 'fishing_bobber' || entity.name === 'fishing_hook') &&
                entity.position &&
                bot.entity.position.distanceTo(entity.position) < 15
              )

              if (currentHook) {
                console.log('‚úÖ ƒê√£ t√¨m th·∫•y phao, b·∫Øt ƒë·∫ßu theo d√µi chuy·ªÉn ƒë·ªông...')
                startSmartHookWatcher()
              } else if (attempts < maxAttempts) {
                console.log(`‚ö†Ô∏è Kh√¥ng th·∫•y phao, th·ª≠ l·∫°i... (${attempts}/${maxAttempts})`)
                setTimeout(findHook, 500) // Th·ª≠ l·∫°i sau 0.5 gi√¢y
              } else {
                console.log('‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y phao sau nhi·ªÅu l·∫ßn th·ª≠, th·∫£ c·∫ßn l·∫°i')
                isFishing = false
              }
            }
            findHook()
          }, 4000) // ƒê·ª£i 4 gi√¢y nh∆∞ y√™u c·∫ßu tr∆∞·ªõc khi theo d√µi

        } else {
          bot.chat('ü•∫ Kh√¥ng t√¨m th·∫•y n∆∞·ªõc g·∫ßn! C·∫ßn t√¨m ao, s√¥ng ho·∫∑c bi·ªÉn~')
          stopSmartAutoFishing()
        }

      } catch (error) {
        console.log('‚ùå L·ªói smart fishing:', error)
        bot.chat('üòµ C√≥ l·ªói khi c√¢u c√°! Th·ª≠ l·∫°i sau~')
        isFishing = false
      }
    }, 6000) // Ki·ªÉm tra m·ªói 6 gi√¢y
  }

  // Alias ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
  function startAutoFishing() {
    return startSmartAutoFishing()
  }

  // H√†m theo d√µi fishing hook metadata - ∆ØU TI√äN S·ªê 1
  let lastHookMetadata: any = null

  // H·ªá th·ªëng ph√°t hi·ªán c√° c·∫Øn th√¥ng minh - FIXED VERSION
  let fishingIndicators = {
    particleCount: 0,
    velocityDetections: 0,
    positionChanges: 0,
    strongMovements: 0,
    lastResetTime: Date.now()
  }

  function startSmartHookWatcher() {
    if (hookCheckInterval) {
      clearInterval(hookCheckInterval)
    }

    fishingStartTime = Date.now()
    hasFishBitten = false
    lastHookPosition = currentHook.position ? { ...currentHook.position } : null

    // Reset indicators khi b·∫Øt ƒë·∫ßu fishing m·ªõi
    fishingIndicators = {
      particleCount: 0,
      velocityDetections: 0,
      positionChanges: 0,
      strongMovements: 0,
      lastResetTime: Date.now()
    }

    console.log('üé£ B·∫Øt ƒë·∫ßu smart hook watcher, ƒë·ª£i 6 gi√¢y tr∆∞·ªõc khi ph√°t hi·ªán...')

    hookCheckInterval = setInterval(() => {
      if (!autoFishingActive || !isFishing || hasFishBitten) {
        if (hookCheckInterval) {
          clearInterval(hookCheckInterval)
          hookCheckInterval = null
        }
        return
      }

      const currentTime = Date.now()
      const fishingDuration = currentTime - fishingStartTime

      // T√¨m hook entity hi·ªán t·∫°i
      const hookEntity = Object.values(bot.entities).find(entity =>
        entity.id === currentHook.id &&
        (entity.name === 'fishing_bobber' || entity.name === 'fishing_hook')
      )

      if (!hookEntity) {
        // Hook bi·∫øn m·∫•t = ƒë√£ c√¢u ƒë∆∞·ª£c c√° (ch·ªâ sau 6 gi√¢y)
        if (fishingDuration > 6000) {
          console.log('üêü PHAO BI·∫æN M·∫§T - ƒê√É C√ÇU ƒê∆Ø·ª¢C C√Å!')
          hasFishBitten = true
          handleSmartFishCaught()
        }
        return
      }

      // CH·ªà B·∫ÆT ƒê·∫¶U PH√ÅT HI·ªÜN SAU 6 GI√ÇY ƒê·ªÇ TR√ÅNH GI·∫¨T C·∫¶N S·ªöM
      if (fishingDuration < 6000) {
        // C·∫≠p nh·∫≠t v·ªã tr√≠ ƒë·ªÉ chu·∫©n b·ªã
        if (hookEntity.position) {
          lastHookPosition = { ...hookEntity.position }
        }
        return
      }

      // PH∆Ø∆†NG PH√ÅP 1: Theo d√µi chuy·ªÉn ƒë·ªông Y (phao b·ªã k√©o xu·ªëng)
      if (hookEntity.position && lastHookPosition) {
        const yChange = lastHookPosition.y - hookEntity.position.y // D∆∞∆°ng = phao ch√¨m xu·ªëng
        const distanceMoved = Math.sqrt(
          (hookEntity.position.x - lastHookPosition.x) ** 2 +
          (hookEntity.position.y - lastHookPosition.y) ** 2 +
          (hookEntity.position.z - lastHookPosition.z) ** 2
        )

        // Log debug m·ªói 2 gi√¢y (b·ªõt spam)
        if (fishingDuration % 2000 < 100) {
          console.log(`üé£ DEBUG: Y: ${yChange.toFixed(3)}, Dist: ${distanceMoved.toFixed(3)}, Time: ${(fishingDuration/1000).toFixed(1)}s, Sounds: ${bobberThrowCount}`)
        }

        // ƒê·∫æM C√ÅC D·∫§U HI·ªÜU C√Å C·∫ÆN (ch·ªâ sau 6 gi√¢y) - TH√îNG S·ªê T·ªêI ∆ØU

        // ƒêI·ªÄU KI·ªÜN 1: √Çm thanh fishing_bobber.throw l·∫ßn 2 + chuy·ªÉn ƒë·ªông th·∫≠t (ng∆∞·ª°ng c√° c·∫Øn)
        if (bobberThrowCount >= 2 && (yChange > 0.25 || distanceMoved > 0.25)) {
          console.log(`üêü √ÇM THANH L·∫¶N 2 + C√Å C·∫ÆN TH·∫¨T! Y: ${yChange.toFixed(3)}, D: ${distanceMoved.toFixed(3)}`)
          handleSmartFishCaught()
          return
        }

        // ƒêI·ªÄU KI·ªÜN 2: Chuy·ªÉn ƒë·ªông c·ª±c m·∫°nh (ch·∫Øc ch·∫Øn c√≥ c√°) - Ng∆∞·ª°ng g·∫ßn nh∆∞ ch·∫Øc ch·∫Øn
        if (yChange > 0.40 || distanceMoved > 0.40) {
          console.log(`üêü CHUY·ªÇN ƒê·ªòNG C·ª∞C M·∫†NH! Y: ${yChange.toFixed(3)}, Distance: ${distanceMoved.toFixed(3)}`)
          handleSmartFishCaught()
          return
        }
      }

      // PH∆Ø∆†NG PH√ÅP 2: Velocity detection - TH√îNG S·ªê T·ªêI ∆ØU
      if (hookEntity.velocity && fishingDuration > 6000) {
        const velocityMagnitude = Math.sqrt(
          hookEntity.velocity.x ** 2 +
          hookEntity.velocity.y ** 2 +
          hookEntity.velocity.z ** 2
        )

        // Ch·ªâ ƒë·∫øm velocity tr√™n ng∆∞·ª°ng nhi·ªÖu (>0.05)
        if (velocityMagnitude > 0.05) {
          fishingIndicators.velocityDetections++
        }

        // Velocity c√° c·∫Øn + √¢m thanh (ng∆∞·ª°ng t·ªëi ∆∞u >0.25)
        if (velocityMagnitude > 0.25 && bobberThrowCount >= 2) {
          console.log(`üêü VELOCITY C√Å C·∫ÆN + √ÇM THANH! V: ${velocityMagnitude.toFixed(3)}`)
          handleSmartFishCaught()
          return
        }

        // Velocity g·∫ßn nh∆∞ ch·∫Øc ch·∫Øn (>0.40)
        if (velocityMagnitude > 0.40) {
          console.log(`üêü VELOCITY CH·∫ÆC CH·∫ÆN! V: ${velocityMagnitude.toFixed(3)}`)
          handleSmartFishCaught()
          return
        }
      }

      // C·∫≠p nh·∫≠t v·ªã tr√≠ cu·ªëi c·ªßa phao
      if (hookEntity.position) {
        lastHookPosition = { ...hookEntity.position }
      }

      // H·ªÜ TH·ªêNG D·ª∞ PH√íNG - CH·ªà K√çCH HO·∫†T MU·ªòN H∆†N
      const totalIndicators = fishingIndicators.particleCount + fishingIndicators.velocityDetections + fishingIndicators.positionChanges

      // D·ª∞ PH√íNG 1: Sau 10 gi√¢y + nhi·ªÅu d·∫•u hi·ªáu m·∫°nh
      if (fishingDuration > 10000 && fishingIndicators.strongMovements >= 5) {
        console.log(`üêü D·ª∞ PH√íNG (10s): Strong movements: ${fishingIndicators.strongMovements}`)
        handleSmartFishCaught()
        return
      }

      // D·ª∞ PH√íNG 2: Sau 15 gi√¢y + c√≥ d·∫•u hi·ªáu + √¢m thanh
      if (fishingDuration > 15000 && totalIndicators >= 10 && bobberThrowCount >= 1) {
        console.log(`üêü D·ª∞ PH√íNG (15s): Total: ${totalIndicators}, Sounds: ${bobberThrowCount}`)
        handleSmartFishCaught()
        return
      }

      // Timeout sau 25 gi√¢y (gi·∫£m t·ª´ 30 gi√¢y)
      if (fishingDuration > 25000) {
        console.log('‚è∞ Timeout 25s - r√∫t c·∫ßn v√† th·∫£ l·∫°i')
        try {
          bot.activateItem()
          console.log('üé£ ƒê√£ r√∫t c·∫ßn timeout')
        } catch (error) {
          console.log('‚ùå L·ªói r√∫t c·∫ßn timeout:', error)
        }
        isFishing = false
        currentHook = null
        bobberThrowCount = 0
        setTimeout(() => {
          if (autoFishingActive && !isFishing) {
            console.log('üé£ Th·∫£ c·∫ßn m·ªõi sau timeout...')
          }
        }, 1000)
      }

    }, 100) // TƒÉng interval t·ª´ 30ms l√™n 100ms ƒë·ªÉ gi·∫£m load
  }

  // Setup fishing event listeners ƒë·ªÉ backup detection
  function setupFishingEventListeners() {
    console.log('üé£ Setting up fishing event listeners...')

    // Clear t·∫•t c·∫£ sound listeners c≈© tr∆∞·ªõc khi th√™m m·ªõi
    bot.removeAllListeners('soundEffectHeard')
    bot.removeAllListeners('particle')
    console.log('üßπ ƒê√£ x√≥a t·∫•t c·∫£ sound listeners c≈©')

    // Listen for sound effects
    const soundListener = (sound: any, position: any) => {
      if (!autoFishingActive || !isFishing || hasFishBitten) return

      const fishingDuration = Date.now() - fishingStartTime
      if (fishingDuration < 4000) return // Ch·ªâ listen sau 4 gi√¢y

      // Console ƒë·ªÉ debug √¢m thanh (nh∆∞ng kh√¥ng log fishing_bobber.throw ƒë·ªÉ gi·∫£m spam)
      if (!sound.includes('entity.fishing_bobber.throw') &&
          !sound.includes('.step') &&
          !sound.includes('.converted') &&
          !sound.includes('.aggro')) {
        console.log(`üîä Heard sound: ${sound}, position:`, position)
      }

      // ƒê·∫øm s·ªë l·∫ßn √¢m thanh fishing_bobber.throw xu·∫•t hi·ªán
      if (sound.includes('entity.fishing_bobber.throw')) {
        bobberThrowCount++
        console.log(`üé£ √Çm thanh fishing_bobber.throw l·∫ßn ${bobberThrowCount}`)

        // Ch·ªâ r√∫t c·∫ßn khi √¢m thanh n√†y xu·∫•t hi·ªán l·∫ßn th·ª© 2 (c√° c·∫Øn th·∫≠t)
        if (bobberThrowCount === 2) {
          console.log('üêü SOUND DETECTION - C√Å C·∫ÆN TH·∫¨T! (L·∫ßn 2)')
          handleSmartFishCaught()
        }
        return // Tho√°t kh·ªèi function sau khi x·ª≠ l√Ω
      }

      // B·ªè qua c√°c √¢m thanh kh√°c kh√¥ng li√™n quan
      if (sound.includes('entity.fishing_bobber.retrieve') ||
          sound.includes('.step') ||
          sound.includes('.aggro') ||
          sound.includes('.converted') ||
          sound.includes('.break')) {
        return
      }

      // Ph∆∞∆°ng ph√°p d·ª± ph√≤ng: Ch·ªâ ph√°t hi·ªán √¢m thanh water splash th·ª±c s·ª± t·ª´ c√° c·∫Øn
      if (sound && (sound.includes('entity.generic.splash') ||
                   sound.includes('block.water.ambient') ||
                   sound.includes('entity.bobber.splash'))) {
        console.log('üêü BACKUP SOUND DETECTION - C√Å C·∫ÆN!')
        handleSmartFishCaught()
      }
    }

    // Listen for particles near fishing hook - CH·ªà ƒê·ªÇ THEO D√ïI, KH√îNG R√öT C·∫¶N
    const particleListener = (particle: any) => {
      if (!autoFishingActive || !isFishing || hasFishBitten) return
      if (!currentHook) return

      const fishingDuration = Date.now() - fishingStartTime
      if (fishingDuration < 4000) return

      // Check if particle is near fishing hook
      if (particle.position && currentHook.position) {
        const distance = Math.sqrt(
          (particle.position.x - currentHook.position.x) ** 2 +
          (particle.position.y - currentHook.position.y) ** 2 +
          (particle.position.z - currentHook.position.z) ** 2
        )

        if (distance < 3) {
          // CH·ªà LOG ƒê·ªÇ THEO D√ïI - KH√îNG R√öT C·∫¶N
          if (particle.name && (particle.name.includes('splash') || particle.name.includes('fishing'))) {
            console.log(`üåä Particle ${particle.name} g·∫ßn phao (${distance.toFixed(2)}m) - ch·ªù √¢m thanh...`)
          }
        }
      }
    }

    // Th√™m listeners
    bot.on('soundEffectHeard', soundListener)
    bot.on('particle', particleListener)

    // L∆∞u references ƒë·ªÉ cleanup sau n√†y (s·∫Ω ƒë∆∞·ª£c cleanup trong stopSmartAutoFishing)
    // Listeners s·∫Ω ƒë∆∞·ª£c remove b·∫±ng removeAllListeners khi setup l·∫°i
  }

  function handleSmartFishCaught() {
    if (!isFishing) return
    if (hasFishBitten) return // Tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p

    hasFishBitten = true

    // D·ª´ng timer theo d√µi ngay l·∫≠p t·ª©c
    if (hookCheckInterval) {
      clearInterval(hookCheckInterval)
      hookCheckInterval = null
    }

    console.log('üé£ Ph√°t hi·ªán c√° c·∫Øn! ƒêang r√∫t c·∫ßn...')

    // R√∫t c·∫ßn NGAY L·∫¨P T·ª®C - kh√¥ng delay, kh√¥ng chat spam
    try {
      // ƒê·∫£m b·∫£o bot ƒëang c·∫ßm c·∫ßn c√¢u
      const fishingRod = bot.inventory.items().find(item => item.name.includes('fishing_rod'))
      if (fishingRod && (!bot.heldItem || !bot.heldItem.name.includes('fishing_rod'))) {
        bot.equip(fishingRod, 'hand').then(() => {
          // R√∫t c·∫ßn sau khi trang b·ªã
          bot.activateItem()
          console.log('üé£ ƒê√£ r√∫t c·∫ßn sau khi trang b·ªã!')
          // Chat ch·ªâ 1 l·∫ßn khi th√†nh c√¥ng
          bot.chat('üé£ C√¢u th√†nh c√¥ng! ‚ú®')
        }).catch(err => {
          console.log('L·ªói trang b·ªã c·∫ßn khi r√∫t:', err)
          bot.activateItem() // Th·ª≠ r√∫t d√π sao
          bot.chat('üé£ C√¢u th√†nh c√¥ng! ‚ú®')
        })
      } else {
        // ƒê√£ c·∫ßm c·∫ßn c√¢u r·ªìi, r√∫t ngay
        bot.activateItem()
        console.log('üé£ ƒê√£ r√∫t c·∫ßn!')
        // Chat ch·ªâ 1 l·∫ßn khi th√†nh c√¥ng
        bot.chat('üé£ C√¢u th√†nh c√¥ng! ‚ú®')
      }
    } catch (error) {
      console.log('‚ùå L·ªói khi r√∫t c·∫ßn:', error)
      // Th·ª≠ r√∫t l·∫ßn n·ªØa
      setTimeout(() => {
        try {
          bot.activateItem()
          console.log('üé£ Th·ª≠ r√∫t c·∫ßn l·∫ßn 2')
          bot.chat('üé£ C√¢u th√†nh c√¥ng! ‚ú®')
        } catch (e) {
          console.log('‚ùå Kh√¥ng th·ªÉ r√∫t c·∫ßn:', e)
        }
      }, 200)
    }

    // Reset tr·∫°ng th√°i
    isFishing = false
    currentHook = null
    lastHookPosition = null
    bobberThrowCount = 0 // Reset ƒë·∫øm √¢m thanh fishing_bobber.throw cho l·∫ßn c√¢u ti·∫øp theo

    // Reset ƒë·ªÉ c√¢u ti·∫øp - kh√¥ng c√≥ chat th√™m
    setTimeout(() => {
      hasFishBitten = false
      fishingStartTime = 0
      lastHookPosition = null
      console.log('üé£ S·∫µn s√†ng c√¢u ti·∫øp...')
    }, 1000)
  }

  // Alias ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
  function handleFishCaught() {
    return handleSmartFishCaught()
  }

  stopSmartAutoFishing = function() {
    autoFishingActive = false
    autoItemCollectionDisabled = false  // B·∫≠t l·∫°i nh·∫∑t ƒë·ªì
    autoEquipDisabled = false           // B·∫≠t l·∫°i t·ª± ƒë·ªông trang b·ªã

    isFishing = false
    hasFishBitten = false
    bobberThrowCount = 0 // Reset ƒë·∫øm √¢m thanh fishing_bobber.throw

    if (fishingInterval) {
      clearInterval(fishingInterval)
      fishingInterval = null
    }

    if (hookCheckInterval) {
      clearInterval(hookCheckInterval)
      hookCheckInterval = null
    }

    currentHook = null
    lastHookPosition = null

    // Ch·ªâ chat khi ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp, kh√¥ng chat khi d·ª´ng t·∫•t c·∫£
    if (!arguments[0]) { // Kh√¥ng c√≥ parameter silent
      bot.chat('üé£ D·ª´ng auto c√¢u! C√°c ch·ª©c nƒÉng kh√°c ho·∫°t ƒë·ªông l·∫°i~')
    }
    console.log('‚èπÔ∏è Smart Auto Fishing - Deactivated')
    console.log('‚úÖ Auto item collection: Enabled')
    console.log('‚úÖ Auto equipment: Enabled')
  }

  // Alias ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
  function stopAutoFishing() {
    return stopSmartAutoFishing()
  }

  // ------------------ AUTO MINING REMOVED ------------------
  // Ch·ª©c nƒÉng auto mining ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè ho√†n to√†n

  // ------------------ AUTO CHEST HUNTING REMOVED ------------------
  // Ch·ª©c nƒÉng auto t√¨m r∆∞∆°ng ƒë√£ ƒë∆∞·ª£c x√≥a b·ªè ho√†n to√†n

  // ------------------ SMART AUTO BUILD - PHI√äN B√äN M·ªöI ------------------
  let autoBuildActive = false
  let currentBuildProject: any = null
  let buildProgress = 0

  // Danh s√°ch thi·∫øt k·∫ø c√≥ s·∫µn t·ªëi ∆∞u
  const quickBuilds: { [key: string]: any } = {
    'nh√† nh·ªè': {
      name: 'Ng√¥i nh√† nh·ªè xinh',
      size: '7x7x4',
      blocks: [
        // Y=0: N·ªÅn
        [
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks']
        ],
        // Y=1: T∆∞·ªùng
        [
          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','oak_door','air','air','air','air','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs']
        ],
        // Y=2: T∆∞·ªùng + c·ª≠a s·ªï
        [
          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','glass','air','air','air','glass','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','air','air','air','air','air','oak_logs'],
          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs']
        ],
        // Y=3: M√°i
        [
          ['air','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','air'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],
          ['air','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','air']
        ]
      ],
      materials: { 'oak_planks': 40, 'oak_logs': 30, 'oak_door': 1, 'glass': 2 }
    },

    'th√°p nh·ªè': {
      name: 'Th√°p quan s√°t',
      size: '5x5x8',
      blocks: Array.from({length: 8}, (_, y) => {
        if (y === 0) {
          // N·ªÅn
          return Array.from({length: 5}, () => Array(5).fill('stone_bricks'))
        } else if (y < 7) {
          // T∆∞·ªùng th√°p
          const layer = Array.from({length: 5}, () => Array(5).fill('air'))
          for (let x = 0; x < 5; x++) {
            layer[0][x] = 'stone_bricks'
            layer[4][x] = 'stone_bricks'
            layer[x][0] = 'stone_bricks'
            layer[x][4] = 'stone_bricks'
          }
          // C·ª≠a ·ªü t·∫ßng 1
          if (y === 1) layer[2][0] = 'oak_door'
          // C·ª≠a s·ªï
          if (y === 3 || y === 5) {
            layer[0][2] = 'glass'
            layer[4][2] = 'glass'
            layer[2][0] = 'glass'
            layer[2][4] = 'glass'
          }
          return layer
        } else {
          // M√°i th√°p
          return Array.from({length: 5}, () => Array(5).fill('dark_oak_planks'))
        }
      }),
      materials: { 'stone_bricks': 60, 'dark_oak_planks': 25, 'oak_door': 1, 'glass': 8 }
    },

    'c·∫ßu': {
      name: 'C√¢y c·∫ßu g·ªó',
      size: '15x3x2',
      blocks: [
        // Y=0: N·ªÅn c·∫ßu
        Array.from({length: 3}, () => Array.from({length: 15}, () => 'oak_planks')),
        // Y=1: Lan can
        Array.from({length: 3}, (x) =>
          Array.from({length: 15}, (z) => {
            if (x === 0 || x === 2) return 'oak_fence'
            return 'air'
          })
        )
      ],
      materials: { 'oak_planks': 45, 'oak_fence': 30 }
    }
  }

  startSmartAutoBuild = async function(buildType: string) {
    if (autoBuildActive) {
      bot.chat('üèóÔ∏è ƒêang x√¢y c√¥ng tr√¨nh kh√°c r·ªìi!')
      return
    }

    // D·ª´ng c√°c ho·∫°t ƒë·ªông kh√°c
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopAutoFishing()
    autoFarmActive = false

    const lowerType = buildType.toLowerCase()
    let selectedBuild = null

    // KI·ªÇM TRA CH·∫æƒê·ªò S√ÅNG T·∫†O AI
    if (lowerType.includes('t·ª± do') || lowerType.includes('s√°ng t·∫°o') || lowerType.includes('ai')) {
      bot.chat('ü§ñ Ch·∫ø ƒë·ªô AI s√°ng t·∫°o! T·ªõ s·∫Ω thi·∫øt k·∫ø theo √Ω t∆∞·ªüng c·ªßa c·∫≠u!')

      // L·∫•y m√¥ t·∫£ t·ª´ l·ªánh
      const description = buildType.replace(/t·ª± do|s√°ng t·∫°o|ai/gi, '').trim()

      if (!description) {
        bot.chat('ü§î C·∫≠u mu·ªën t·ªõ thi·∫øt k·∫ø g√¨? VD: "auto x√¢y t·ª± do l√¢u ƒë√†i nh·ªè"')
        return
      }

      // T·∫°o thi·∫øt k·∫ø AI d·ª±a tr√™n m√¥ t·∫£
      selectedBuild = await generateAIBuildDesign(description)

      if (!selectedBuild) {
        bot.chat('üòµ T·ªõ kh√¥ng th·ªÉ thi·∫øt k·∫ø theo √Ω t∆∞·ªüng ƒë√≥, th·ª≠ m√¥ t·∫£ kh√°c nh√©!')
        return
      }
    } else {
      // T√¨m thi·∫øt k·∫ø c√≥ s·∫µn
      for (const [key, build] of Object.entries(quickBuilds)) {
        if (lowerType.includes(key) || key.includes(lowerType)) {
          selectedBuild = build
          break
        }
      }

      if (!selectedBuild) {
        bot.chat('ü§î T·ªõ ch∆∞a bi·∫øt x√¢y lo·∫°i ƒë√≥. Th·ª≠: nh√† nh·ªè, th√°p nh·ªè, c·∫ßu')
        bot.chat('üîß Ho·∫∑c d√πng "auto x√¢y t·ª± do [m√¥ t·∫£]" ƒë·ªÉ AI thi·∫øt k·∫ø!')
        return
      }
    }

    autoBuildActive = true
    currentBuildProject = selectedBuild
    buildProgress = 0

    bot.chat(`üèóÔ∏è B·∫Øt ƒë·∫ßu x√¢y ${selectedBuild.name}!`)
    bot.chat(`üìè K√≠ch th∆∞·ªõc: ${selectedBuild.size}`)

    try {
      // Chu·∫©n b·ªã materials
      await prepareSmartBuildMaterials(selectedBuild.materials)

      // B·∫Øt ƒë·∫ßu x√¢y
      const buildPos = {
        x: Math.floor(bot.entity.position.x + 3),
        y: Math.floor(bot.entity.position.y),
        z: Math.floor(bot.entity.position.z + 3)
      }

      await executeSmartBuild(selectedBuild.blocks, buildPos)

    } catch (error) {
      console.log('‚ùå L·ªói smart auto build:', error)
      bot.chat('üòµ C√≥ l·ªói khi x√¢y! Th·ª≠ l·∫°i nh√©!')
      autoBuildActive = false
    }
  }

  // H√ÄM AI S√ÅNG T·∫†O THI·∫æT K·∫æ X√ÇY D·ª∞NG
  async function generateAIBuildDesign(description: string): Promise<any | null> {
    try {
      bot.chat(`üß† AI ƒëang thi·∫øt k·∫ø "${description}"... Ch·ªù t√≠ nh√©!`)
      console.log(`ü§ñ AI Creative Build: Designing "${description}"`)

      // Ph√¢n t√≠ch m√¥ t·∫£ ƒë·ªÉ t·∫°o thi·∫øt k·∫ø th√¥ng minh
      let buildCategory = 'house'
      let sizeMultiplier = 1
      let height = 4
      let width = 7
      let length = 7

      if (description.toLowerCase().includes('l√¢u ƒë√†i') || description.toLowerCase().includes('castle')) {
        buildCategory = 'castle'
        sizeMultiplier = 2
        height = 8
        width = 12
        length = 12
      } else if (description.toLowerCase().includes('th√°p') || description.toLowerCase().includes('tower')) {
        buildCategory = 'tower'
        height = 10
        width = 5
        length = 5
      } else if (description.toLowerCase().includes('c·∫ßu') || description.toLowerCase().includes('bridge')) {
        buildCategory = 'bridge'
        height = 2
        width = 3
        length = 15
      } else if (description.toLowerCase().includes('nh√† th·ªù') || description.toLowerCase().includes('church')) {
        buildCategory = 'church'
        height = 6
        width = 9
        length = 12
      } else if (description.toLowerCase().includes('kho') || description.toLowerCase().includes('warehouse')) {
        buildCategory = 'warehouse'
        height = 4
        width = 10
        length = 15
      }

      //X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc
      if (description.toLowerCase().includes('nh·ªè') || description.toLowerCase().includes('mini')) {
        sizeMultiplier = 0.7
      } else if (description.toLowerCase().includes('l·ªõn') || description.toLowerCase().includes('big') || description.toLowerCase().includes('kh·ªïng l·ªì')) {
        sizeMultiplier = 1.5
      }

      width = Math.floor(width * sizeMultiplier)
      length = Math.floor(length * sizeMultiplier)
      height = Math.floor(height * sizeMultiplier)

      // Ch·ªçn v·∫≠t li·ªáu d·ª±a tr√™n m√¥ t·∫£
      let primaryMaterial = 'oak_planks'
      let secondaryMaterial = 'oak_logs'
      let roofMaterial = 'dark_oak_planks'

      if (description.toLowerCase().includes('ƒë√°') || description.toLowerCase().includes('stone')) {
        primaryMaterial = 'stone_bricks'
        secondaryMaterial = 'stone'
        roofMaterial = 'stone_brick_stairs'
      } else if (description.toLowerCase().includes('g·ªó') || description.toLowerCase().includes('wood')) {
        primaryMaterial = 'oak_planks'
        secondaryMaterial = 'oak_logs'
      } else if (description.toLowerCase().includes('g·∫°ch') || description.toLowerCase().includes('brick')) {
        primaryMaterial = 'bricks'
        secondaryMaterial = 'stone_bricks'
      }

      // T·∫†O THI·∫æT K·∫æ TH√îNG MINH
      const blocks = generateSmartStructure(buildCategory, width, length, height, primaryMaterial, secondaryMaterial, roofMaterial)

      // T√≠nh to√°n v·∫≠t li·ªáu c·∫ßn thi·∫øt
      const materials = calculateMaterials(blocks, primaryMaterial, secondaryMaterial, roofMaterial)

      const aiDesign = {
        name: `${description} (AI thi·∫øt k·∫ø)`,
        size: `${width}x${length}x${height}`,
        blocks: blocks,
        materials: materials,
        isAIGenerated: true
      }

      bot.chat(`‚ú® AI ƒë√£ thi·∫øt k·∫ø xong! K√≠ch th∆∞·ªõc: ${width}x${length}x${height}`)
      console.log(`ü§ñ AI Design complete: ${width}x${length}x${height}`)

      return aiDesign

    } catch (error) {
      console.log('‚ùå L·ªói AI creative build:', error)
      bot.chat('üòµ AI g·∫∑p l·ªói khi thi·∫øt k·∫ø, d√πng m·∫´u c√≥ s·∫µn nh√©!')
      return quickBuilds['nh√† nh·ªè'] // Fallback
    }
  }

  // H√ÄM T·∫†O C·∫§U TR√öC TH√îNG MINH
  function generateSmartStructure(category: string, width: number, length: number, height: number, primary: string, secondary: string, roof: string): any[] {
    const blocks: any[] = []

    for (let y = 0; y < height; y++) {
      const layer: any[][] = []

      for (let x = 0; x < width; x++) {
        const row: any[] = []

        for (let z = 0; z < length; z++) {
          let blockType = 'air'

          if (y === 0) {
            // N·ªÅn
            blockType = primary
          } else if (y === height - 1) {
            // M√°i
            if (category === 'castle') {
              blockType = x === 0 || x === width-1 || z === 0 || z === length-1 ? secondary : 'air'
            } else {
              blockType = roof
            }
          } else {
            // T∆∞·ªùng
            if (x === 0 || x === width-1 || z === 0 || z === length-1) {
              blockType = secondary

              // C·ª≠a ·ªü t·∫ßng 1
              if (y === 1 && x === Math.floor(width/2) && z === 0) {
                blockType = 'oak_door'
              }

              // C·ª≠a s·ªï ·ªü t·∫ßng 2+
              if (y >= 2 && ((x === 0 || x === width-1) && z % 3 === 1) ||
                           ((z === 0 || z === length-1) && x % 3 === 1)) {
                blockType = 'glass'
              }
            } else {
              blockType = 'air'
            }
          }

          row.push(blockType)
        }
        layer.push(row)
      }
      blocks.push(layer)
    }

    return blocks
  }

  // H√ÄM T√çNH TO√ÅN V·∫¨T LI·ªÜU
  function calculateMaterials(blocks: any[], primary: string, secondary: string, roof: string): {[key: string]: number} {
    const materials: {[key: string]: number} = {}

    for (const layer of blocks) {
      for (const row of layer) {
        for (const block of row) {
          if (block !== 'air') {
            materials[block] = (materials[block] || 0) + 1
          }
        }
      }
    }

    // L√†m tr√≤n l√™n v√† th√™m 20% buffer
    Object.keys(materials).forEach(material => {
      materials[material] = Math.ceil(materials[material] * 1.2)
    })

    return materials
  }

  async function prepareSmartBuildMaterials(materials: {[key: string]: number}) {
    bot.chat('üì¶ Chu·∫©n b·ªã v·∫≠t li·ªáu x√¢y d·ª±ng...')

    // Material mapping ƒë·ªÉ convert t√™n
    const materialMap: {[key: string]: string} = {
      'oak_logs': 'oak_log',
      'oak_planks': 'oak_planks',
      'stone_bricks': 'stone_bricks',
      'dark_oak_planks': 'dark_oak_planks',
      'oak_door': 'oak_door',
      'oak_fence': 'oak_fence',
      'glass': 'glass'
    }

    for (const [material, amount] of Object.entries(materials)) {
      const mcItem = materialMap[material] || material
      const stacks = Math.ceil(amount / 64)

      for (let i = 0; i < stacks; i++) {
        bot.chat(`/give ${bot.username} ${mcItem} 64`)
        await new Promise(resolve => setTimeout(resolve, 50))
      }
    }

    bot.chat('‚úÖ ƒê√£ chu·∫©n b·ªã xong v·∫≠t li·ªáu!')
  }

  async function executeSmartBuild(blocks: any[], buildPos: {x: number, y: number, z: number}) {
    let totalBlocks = 0
    let placedBlocks = 0

    // ƒê·∫øm t·ªïng s·ªë blocks
    for (const layer of blocks) {
      for (const row of layer) {
        for (const block of row) {
          if (block !== 'air') totalBlocks++
        }
      }
    }

    bot.chat(`üî® B·∫Øt ƒë·∫ßu x√¢y ${totalBlocks} blocks!`)

    for (let y = 0; y < blocks.length; y++) {
      const layer = blocks[y]

      for (let x = 0; x < layer.length; x++) {
        const row = layer[x]

        for (let z = 0; z < row.length; z++) {
          const blockType = row[z]

          if (blockType === 'air' || !autoBuildActive) continue

          const pos = {
            x: buildPos.x + x,
            y: buildPos.y + y,
            z: buildPos.z + z
          }

          try {
            // Ki·ªÉm tra v√† x·ª≠ l√Ω block c≈©
            const existingBlock = bot.blockAt(new Vec3(pos.x, pos.y, pos.z))
            if (existingBlock && existingBlock.name !== 'air') {
              console.log(`üî® ƒê√†o block c≈© ${existingBlock.name} t·∫°i ${pos.x},${pos.y},${pos.z}`)

              // ƒê√†o block c≈© tr∆∞·ªõc khi ƒë·∫∑t block m·ªõi
              try {
                await bot.dig(existingBlock)
                console.log(`‚úÖ ƒê√£ ƒë√†o xong ${existingBlock.name}`)
                await new Promise(resolve => setTimeout(resolve, 300))
              } catch (digError) {
                console.log(`‚ùå Kh√¥ng th·ªÉ ƒë√†o ${existingBlock.name}, b·ªè qua v·ªã tr√≠ n√†y`)
                continue
              }
            }

            // Di chuy·ªÉn ƒë·∫øn g·∫ßn v·ªã tr√≠ v·ªõi timeout ng·∫Øn h∆°n
            const distance = bot.entity.position.distanceTo(new Vec3(pos.x, pos.y, pos.z))
            if (distance > 4) {
              const goal = new goals.GoalNear(pos.x, pos.y, pos.z, 2)
              bot.pathfinder.setGoal(goal)
              await new Promise(resolve => setTimeout(resolve, 800))
            }

            // T√¨m v√† trang b·ªã block
            const itemMap: {[key: string]: string} = {
              'oak_logs': 'oak_log',
              'oak_planks': 'oak_planks',
              'stone_bricks': 'stone_bricks',
              'dark_oak_planks': 'dark_oak_planks',
              'oak_door': 'oak_door',
              'oak_fence': 'oak_fence',
              'glass': 'glass'
            }

            const itemName = itemMap[blockType] || blockType
            const item = bot.inventory.items().find(i => i.name === itemName)

            if (!item) {
              console.log(`‚ö†Ô∏è Kh√¥ng c√≥ ${itemName}`)
              continue
            }

            await bot.equip(item, 'hand')

            // T√¨m v·ªã tr√≠ ƒë·∫∑t block t·ªët nh·∫•t
            const possibleTargetBlocks = [
              bot.blockAt(new Vec3(pos.x, pos.y - 1, pos.z)),     // D∆∞·ªõi
              bot.blockAt(new Vec3(pos.x + 1, pos.y, pos.z)),     // B√™n ph·∫£i
              bot.blockAt(new Vec3(pos.x - 1, pos.y, pos.z)),     // B√™n tr√°i
              bot.blockAt(new Vec3(pos.x, pos.y, pos.z + 1)),     // Ph√≠a sau
              bot.blockAt(new Vec3(pos.x, pos.y, pos.z - 1))      // Ph√≠a tr∆∞·ªõc
            ].filter(block => block && block.name !== 'air')

            let placeSuccess = false

            // Th·ª≠ ƒë·∫∑t block v√†o c√°c h∆∞·ªõng kh√°c nhau
            for (let targetBlock of possibleTargetBlocks) {
              if (!targetBlock) continue

              // Th·ª≠ 3 l·∫ßn cho m·ªói h∆∞·ªõng
              for (let attempt = 0; attempt < 3; attempt++) {
                try {
                  // T√≠nh vector h∆∞·ªõng ƒë·∫∑t
                  const targetPos = targetBlock.position
                  const placeVector = new Vec3(
                    pos.x - targetPos.x,
                    pos.y - targetPos.y,
                    pos.z - targetPos.z
                  )

                  await Promise.race([
                    bot.placeBlock(targetBlock, placeVector),
                    new Promise((_, reject) =>
                      setTimeout(() => reject(new Error('Place timeout')), 2500)
                    )
                  ])

                  placeSuccess = true
                  console.log(`‚úÖ ƒê√£ ƒë·∫∑t ${blockType} t·∫°i ${pos.x},${pos.y},${pos.z}`)
                  break
                } catch (retryError) {
                  if (attempt === 0) {
                    console.log(`‚ö†Ô∏è Th·ª≠ l·∫°i ƒë·∫∑t ${blockType} (l·∫ßn ${attempt + 1})`)
                    await new Promise(resolve => setTimeout(resolve, 400))
                  }
                }
              }

              if (placeSuccess) break // Tho√°t kh·ªèi loop target blocks n·∫øu th√†nh c√¥ng
            }

            if (placeSuccess) {
              placedBlocks++
              // Report progress m·ªói 5 blocks ƒë·ªÉ gi·∫£m spam
              if (placedBlocks % 5 === 0) {
                const progress = Math.round((placedBlocks / totalBlocks) * 100)
                bot.chat(`üèóÔ∏è Ti·∫øn ƒë·ªô: ${progress}% (${placedBlocks}/${totalBlocks})`)
              }
            } else {
              console.log(`‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t ${blockType} t·∫°i ${pos.x},${pos.y},${pos.z} sau nhi·ªÅu l·∫ßn th·ª≠`)
            }

            // TƒÉng delay gi·ªØa c√°c block ƒë·ªÉ server x·ª≠ l√Ω
            await new Promise(resolve => setTimeout(resolve, 200))

          } catch (error) {
            console.log(`‚ö†Ô∏è L·ªói ƒë·∫∑t ${blockType} t·∫°i ${pos.x},${pos.y},${pos.z}:`, error.message || error)
          }
        }
      }
    }

    // Ki·ªÉm tra ho√†n th√†nh th·ª±c s·ª±
    const completionPercentage = Math.round((placedBlocks / totalBlocks) * 100)

    if(completionPercentage >= 80) {
      // Ho√†n th√†nh th√†nh c√¥ng (>=80%)
      autoBuildActive = false
      currentBuildProject = null
      bot.chat('üéâ X√¢y xong r·ªìi! ƒê·∫πp kh√¥ng n√®? ‚ú®')
      bot.chat(`üìä K·∫øt qu·∫£ tuy·ªát v·ªùi: ${placedBlocks}/${totalBlocks} blocks (${completionPercentage}%)`)
      console.log('‚úÖ Smart Auto Build completed successfully')
    } else if (completionPercentage >= 50) {
      // Ho√†n th√†nh m·ªôt ph·∫ßn (50-79%)
      autoBuildActive = false
      currentBuildProject = null
      bot.chat('üèóÔ∏è X√¢y ƒë∆∞·ª£c m·ªôt ph·∫ßn r·ªìi! C√≥ th·ªÉ c·∫ßn d·ªçn d·∫πp th√™m!')
      bot.chat(`üìä K·∫øt qu·∫£: ${placedBlocks}/${totalBlocks} blocks (${completionPercentage}%)`)
      bot.chat('üí° Tip: Ch·ªçn v√πng ph·∫≥ng h∆°n ƒë·ªÉ x√¢y d·ª±ng t·ªët h∆°n!')
      console.log('‚ö†Ô∏è Smart Auto Build partially completed')
    } else {
      // Ho√†n th√†nh k√©m (<50%)
      autoBuildActive = false
      currentBuildProject = null
      bot.chat('üòÖ X√¢y kh√¥ng ƒë∆∞·ª£c bao nhi√™u do ƒë·ªãa h√¨nh kh√≥!')
      bot.chat(`üìä Ch·ªâ x√¢y ƒë∆∞·ª£c: ${placedBlocks}/${totalBlocks} blocks (${completionPercentage}%)`)
      bot.chat('üí° Tip: T√¨m v√πng ph·∫≥ng, kh√¥ng c√≥ c√¢y c·ªè ƒë·ªÉ x√¢y nh√©!')
      console.log('‚ùå Smart Auto Build completion rate too low')
    }
  }

  async function startSmartAutoBuildWithClear(buildType: string) {
    if (autoBuildActive) {
      bot.chat('üèóÔ∏è ƒêang x√¢y c√¥ng tr√¨nh kh√°c r·ªìi!')
      return
    }

    // D·ª´ng c√°c ho·∫°t ƒë·ªông kh√°c
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopAutoFishing()
    autoFarmActive = false

    bot.chat('üå± S·∫Ω d·ªçn ph·∫≥ng khu v·ª±c tr∆∞·ªõc khi x√¢y!')
    console.log('üå± Starting auto build with terrain clearing')

    // T√¨m thi·∫øt k·∫ø
    const lowerType = buildType.toLowerCase()
    let selectedBuild = null

    for (const [key, build] of Object.entries(quickBuilds)) {
      if (lowerType.includes(key) || key.includes(lowerType)) {
        selectedBuild = build
        break
      }
    }

    if (!selectedBuild) {
      selectedBuild = quickBuilds['nh√† nh·ªè'] // Default
    }

    autoBuildActive = true
    currentBuildProject = selectedBuild

    //X√°c ƒë·ªãnh khu v·ª±c x√¢y d·ª±ng
    const buildPos = {
      x: Math.floor(bot.entity.position.x + 3),
      y: Math.floor(bot.entity.position.y),
      z: Math.floor(bot.entity.position.z + 3)
    }

    try {
      // B∆Ø·ªöC 1: Clear terrain tr∆∞·ªõc
      await clearBuildTerrain(selectedBuild.blocks, buildPos)

      // B∆Ø·ªöC 2: Chu·∫©n b·ªã materials
      await prepareSmartBuildMaterials(selectedBuild.materials)

      // B∆Ø·ªöC 3: B·∫Øt ƒë·∫ßu x√¢y tr√™n terrain ƒë√£ ƒë∆∞·ª£c clear
      await executeSmartBuild(selectedBuild.blocks, buildPos)

    } catch (error) {
      console.log('‚ùå L·ªói smart auto build with clear:', error)
      bot.chat('üòµ C√≥ l·ªói khi x√¢y! Th·ª≠ l·∫°i nh√©~')
      autoBuildActive = false
    }
  }

  async function clearBuildTerrain(blocks: any[], buildPos: {x: number, y: number, z: number}) {
    bot.chat('üåø B·∫Øt ƒë·∫ßu d·ªçn d·∫πp ƒë·ªãa h√¨nh...')

    // T√≠nh to√°n k√≠ch th∆∞·ªõc khu v·ª±c
    const sizeX = blocks[0]?.length || 7
    const sizeZ = blocks[0]?.[0]?.length || 7
    const sizeY = blocks.length

    let clearedBlocks = 0

    // Clear t·ª´ tr√™n xu·ªëng d∆∞·ªõi v√† m·ªü r·ªông 1 block xung quanh
    for (let y = buildPos.y + sizeY; y >= buildPos.y - 1; y--) {
      for (let x = buildPos.x - 1; x <= buildPos.x + sizeX; x++) {
        for (let z = buildPos.z - 1; z <= buildPos.z + sizeZ; z++) {
          if (!autoBuildActive) return // D·ª´ng n·∫øu b·ªã cancel

          try {
            const blockToClear = bot.blockAt(new Vec3(x, y, z))

            if (blockToClear && blockToClear.name !== 'air' &&
                blockToClear.name !== 'bedrock' && blockToClear.name !== 'barrier') {

              // Di chuy·ªÉn ƒë·∫øn g·∫ßn n·∫øu c·∫ßn
              const distance = bot.entity.position.distanceTo(new Vec3(x, y, z))
              if (distance > 4) {
                const goal = new goals.GoalNear(x, y, z, 3)
                bot.pathfinder.setGoal(goal)
                await new Promise(resolve => setTimeout(resolve, 600))
              }

              // ƒê√†o block
              await bot.dig(blockToClear)
              clearedBlocks++

              if (clearedBlocks % 10 === 0) {
                bot.chat(`üåø ƒê√£ d·ªçn ${clearedBlocks} blocks...`)
              }

              await new Promise(resolve => setTimeout(resolve, 150))
            }
          } catch (error) {
            // B·ªè qua l·ªói clear terrain
            console.log(`‚ö†Ô∏è B·ªè qua block t·∫°i ${x},${y},${z}:`, error.message)
          }
        }
      }
    }

    bot.chat(`‚úÖ ƒê√£ d·ªçn ph·∫≥ng ${clearedBlocks} blocks! B·∫Øt ƒë·∫ßu x√¢y d·ª±ng!`)
    console.log(`‚úÖ Terrain cleared: ${clearedBlocks} blocks`)
  }

  stopSmartAutoBuild = function() {
    autoBuildActive = false
    currentBuildProject = null
    buildProgress = 0
    bot.pathfinder.setGoal(null)

    // Ch·ªâ chat khi ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
    if (!arguments[0]) { // Kh√¥ng c√≥ parameter silent
      bot.chat('üõë D·ª´ng x√¢y!')
    }
    console.log('‚èπÔ∏è Smart Auto Build - Deactivated')
  }

  // ------------------ AUTO CHEST HUNTING - NEW IMPLEMENTATION (Per User Requirements) ------------------
  // Main function to start auto chest hunting
  startAutoChestHunting = async function() {
    // 1. Ki·ªÉm tra pickaxe tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
    const hasPickaxe = bot.inventory.items().some(item => item.name.includes('pickaxe'))

    if (!hasPickaxe) {
      bot.chat('ü•∫ Kh√¥ng c√≥ pickaxe! Kh√¥ng th·ªÉ t√¨m r∆∞∆°ng!')
      console.log('‚ùå No pickaxe found, stopping all actions')
      stopAll()
      return
    }

    // Stop other activities
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopSmartAutoFishing()
    autoFarmActive = false
    if (autoMiningActive) stopAutoMining(true)

    autoChestHuntingActive = true
    bot.chat('üì¶ B·∫Øt ƒë·∫ßu auto t√¨m r∆∞∆°ng! T·ªõ s·∫Ω qu√©t trong ph·∫°m vi 200 blocks...')
    console.log('üì¶ Auto Chest Hunting - Activated (200 block radius)')

    // Clear existing interval if any
    if (chestHuntingInterval) clearInterval(chestHuntingInterval)

    chestHuntingInterval = setInterval(async () => {
      if (!autoChestHuntingActive) {
        clearInterval(chestHuntingInterval!)
        chestHuntingInterval = null
        return
      }

      try {
        // Execute chest hunting cycle (similar to mining cycle)
        await executeChestHuntingCycle()
      } catch (error) {
        console.log('‚ùå L·ªói auto chest hunting:', error)
        bot.pathfinder.setGoal(null)
      }
    }, 2000) // Ki·ªÉm tra m·ªói 2 gi√¢y nh∆∞ y√™u c·∫ßu
  }

  // H√†m th·ª±c hi·ªán m·ªôt chu k·ª≥ t√¨m r∆∞∆°ng theo y√™u c·∫ßu user
  async function executeChestHuntingCycle() {
    // Check if chest hunting is still active
    if (!autoChestHuntingActive) {
      console.log('‚èπÔ∏è Chest hunting stopped, exiting cycle')
      return
    }

    // B·ªè qua n·∫øu ƒëang di chuy·ªÉn ƒë·∫øn r∆∞∆°ng
    if (isCurrentlyApproachingChest) {
      return
    }

    // T√¨m block r∆∞∆°ng - s·ª≠ d·ª•ng bot.findBlock() nh∆∞ auto mine
    const chestBlock = bot.findBlock({
      matching: (block: any) => {
        if (!block) return false
        // Ch·ªâ t√¨m r∆∞∆°ng ·ªü y < 40 theo y√™u c·∫ßu user
        if (block.position.y >= 40) return false
        // T√¨m c√°c lo·∫°i r∆∞∆°ng trong Minecraft
        return block.name.includes('chest') ||
               block.name.includes('barrel') ||
               block.name.includes('shulker_box')
      },
      maxDistance: 200, // Ph·∫°m vi 200 blocks theo y√™u c·∫ßu user
      useExtraInfo: true,
      count: 1
    })

    if (chestBlock) {
      console.log(`üì¶ T√¨m th·∫•y ${chestBlock.name} t·∫°i (${chestBlock.position.x}, ${chestBlock.position.y}, ${chestBlock.position.z})`)

      // Chat t·ªça ƒë·ªô r∆∞∆°ng
      bot.chat(`üì¶ T√¨m th·∫•y r∆∞∆°ng t·∫°i (${chestBlock.position.x}, ${chestBlock.position.y}, ${chestBlock.position.z})!`)

      // Di chuy·ªÉn ƒë·∫øn r∆∞∆°ng s·ª≠ d·ª•ng logic nh∆∞ auto mine
      await approachChestTarget(chestBlock)

    } else {
      console.log('üîç Kh√¥ng t√¨m th·∫•y r∆∞∆°ng trong ph·∫°m vi 200 blocks, kh√°m ph√° th√™m...')
      // Di chuy·ªÉn ng·∫´u nhi√™n ƒë·ªÉ t√¨m ki·∫øm
      if (Math.random() < 0.3) {
        const distance = 30 + Math.random() * 20
        const angle = Math.random() * Math.PI * 2
        const currentPos = bot.entity.position

        const targetX = currentPos.x + Math.cos(angle) * distance
        const targetZ = currentPos.z + Math.sin(angle) * distance

        const movements = new Movements(bot)
        movements.canDig = true
        bot.pathfinder.setMovements(movements)

        const goal = new goals.GoalXZ(targetX, targetZ)
        bot.pathfinder.setGoal(goal)

        await new Promise(resolve => setTimeout(resolve, 2000))
      }
    }
  }

  // Di chuy·ªÉn ƒë·∫øn r∆∞∆°ng s·ª≠ d·ª•ng logic nh∆∞ auto mine
  async function approachChestTarget(chestBlock: any) {
    if (!autoChestHuntingActive) return

    try {
      isCurrentlyApproachingChest = true
      currentChestTarget = chestBlock

      const distance = bot.entity.position.distanceTo(chestBlock.position)

      // Di chuy·ªÉn g·∫ßn target - s·ª≠ d·ª•ng logic nh∆∞ auto mine
      if (distance > 3) {
        console.log(`üö∂ Di chuy·ªÉn ƒë·∫øn r∆∞∆°ng (${Math.round(distance)} blocks away)`)

        // D·ª´ng pathfinding tr∆∞·ªõc v·ªõi error handling
        try {
          bot.pathfinder.setGoal(null)
        } catch (err) {
          // Ignore pathfinder stop errors
        }
        await new Promise(resolve => setTimeout(resolve, 200))

        // Thi·∫øt l·∫≠p pathfinder v·ªõi error handling
        try {
          const movements = new Movements(bot)
          movements.canDig = true
          movements.digCost = 1
          movements.allow1by1towers = true
          movements.allowParkour = true
          movements.allowSprinting = true
          movements.blocksCantBreak.clear()
          movements.blocksCantBreak.add(bot.registry.blocksByName.bedrock?.id || 0)
          movements.blocksCantBreak.add(bot.registry.blocksByName.barrier?.id || 0)
          bot.pathfinder.setMovements(movements)

          // Di chuy·ªÉn ƒë·∫øn g·∫ßn r∆∞∆°ng (3 blocks)
          const goal = new goals.GoalNear(chestBlock.position.x, chestBlock.position.y, chestBlock.position.z, 3)
          bot.pathfinder.setGoal(goal)
        } catch (pathErr) {
          console.log('‚ö†Ô∏è L·ªói thi·∫øt l·∫≠p pathfinder, b·ªè qua v√† ti·∫øp t·ª•c')
        }

        // Ki·ªÉm tra li√™n t·ª•c m·ªói 2 gi√¢y n·∫øu bot c√°ch r∆∞∆°ng 3 blocks
        let checkCount = 0
        const maxChecks = 30 // T·ªëi ƒëa 60 gi√¢y (30 * 2s)

        while (autoChestHuntingActive && checkCount < maxChecks) {
          await new Promise(resolve => setTimeout(resolve, 2000)) // Ki·ªÉm tra m·ªói 2 gi√¢y

          try {
            const currentDistance = bot.entity.position.distanceTo(chestBlock.position)
            console.log(`üìè Kho·∫£ng c√°ch ƒë·∫øn r∆∞∆°ng: ${currentDistance.toFixed(1)} blocks`)

            if (currentDistance <= 3) {
              console.log('‚úÖ ƒê√£ ƒë·∫øn g·∫ßn r∆∞∆°ng (‚â§3 blocks), d·ª´ng t·∫•t c·∫£ h√†nh ƒë·ªông')
              bot.chat('üì¶ ƒê√£ ƒë·∫øn r∆∞∆°ng r·ªìi!')

              // D·ª´ng t·∫•t c·∫£ h√†nh ƒë·ªông khi c√°ch r∆∞∆°ng 3 blocks
              stopAll()
              return
            }
          } catch (distErr) {
            console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh kho·∫£ng c√°ch, b·ªè qua')
          }

          checkCount++
        }

        // Timeout n·∫øu kh√¥ng ƒë·∫øn ƒë∆∞·ª£c
        if (checkCount >= maxChecks) {
          console.log('‚è∞ Timeout khi di chuy·ªÉn ƒë·∫øn r∆∞∆°ng')
          bot.chat('ü•∫ Kh√¥ng th·ªÉ ƒë·∫øn r∆∞∆°ng!')
          stopAll()
          return
        }

      } else {
        // ƒê√£ ·ªü g·∫ßn r∆∞∆°ng r·ªìi, d·ª´ng ngay
        console.log('‚úÖ ƒê√£ ·ªü g·∫ßn r∆∞∆°ng (‚â§3 blocks)')
        bot.chat('üì¶ ƒê√£ ƒë·∫øn r∆∞∆°ng r·ªìi!')
        stopAll()
      }

    } catch (error) {
      const errorMsg = error?.message || error?.toString() || 'Unknown error'
      console.log('‚ùå L·ªói approach chest:', errorMsg)
      stopAll()
    } finally {
      isCurrentlyApproachingChest = false
      currentChestTarget = null

      // ƒê·∫£m b·∫£o d·ª´ng pathfinder
      try {
        bot.pathfinder.setGoal(null)
      } catch (err) {
        // Ignore cleanup errors
      }
    }
  }

  // Function to stop auto chest hunting
  stopAutoChestHunting = function() {
    console.log('‚èπÔ∏è Stopping auto chest hunting...')
    autoChestHuntingActive = false
    isCurrentlyApproachingChest = false
    currentChestTarget = null

    if (chestHuntingInterval) {
      clearInterval(chestHuntingInterval)
      chestHuntingInterval = null
    }

    bot.pathfinder.setGoal(null)

    // Reset control states
    try {
      bot.setControlState('forward', false)
      bot.setControlState('back', false)
      bot.setControlState('left', false)
      bot.setControlState('right', false)
      bot.setControlState('sprint', false)
    } catch (error) {
      // Ignore control state errors
    }

    bot.chat('üõë D·ª´ng auto t√¨m r∆∞∆°ng.')
    console.log('‚èπÔ∏è Auto Chest Hunting - Deactivated')
  }

  // ------------------ PVP SYSTEM - NEW IMPLEMENTATION ------------------

  // Helper: Trang b·ªã sword t·ªët nh·∫•t
  async function equipBestSword(): Promise<boolean> {
    try {
      const swords = bot.inventory.items().filter(item =>
        item.name.includes('sword')
      )

      if (swords.length > 0) {
        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden', 'wood']
        let bestSword = null

        for (const material of priority) {
          const sword = swords.find(s => s.name.includes(material))
          if (sword) {
            bestSword = sword
            break
          }
        }

        if (!bestSword) bestSword = swords[0]

        if (!bot.heldItem || bot.heldItem.name !== bestSword.name) {
          await bot.equip(bestSword, 'hand')
          console.log(`‚öîÔ∏è Trang b·ªã ${bestSword.name}`)
        }
        return true
      }
      return false
    } catch (error) {
      console.log('‚ùå L·ªói trang b·ªã sword:', error?.message || error)
      return false
    }
  }

  // Helper: Check v√† ƒÉn golden apple n·∫øu c√≥
  async function eatGoldenAppleIfAvailable(): Promise<boolean> {
    try {
      const goldenApple = bot.inventory.items().find(item =>
        item.name.includes('golden_apple')
      )

      if (goldenApple) {
        console.log('üçé ƒÇn t√°o v√†ng ngay!')
        await bot.equip(goldenApple, 'hand')
        await bot.consume()
        // Trang b·ªã l·∫°i sword
        await equipBestSword()
        return true
      }
      return false
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói ƒÉn t√°o v√†ng:', error?.message || error)
      return false
    }
  }

  // Helper: ƒÇn th·ª©c ƒÉn ƒë·ªÉ h·ªìi m√°u - v·ªõi cooldown log
  async function eatFoodToHeal(): Promise<boolean> {
    try {
      const safeFood = bot.inventory.items().find(item => {
        const name = item.name.toLowerCase()
        const safeItems = [
          'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',
          'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',
          'cooked_mutton', 'cookie', 'melon_slice', 'sweet_berries'
        ]
        return safeItems.some(safe => name.includes(safe))
      })

      if (safeFood) {
        // Ch·ªâ log m·ªói 5 gi√¢y ƒë·ªÉ gi·∫£m spam
        const now = Date.now()
        if (!lastEatTime || now - lastEatTime > 5000) {
          console.log(`üçñ ƒÇn ${safeFood.name} ƒë·ªÉ h·ªìi m√°u`)
          lastEatTime = now
        }

        await bot.equip(safeFood, 'hand')
        await bot.consume()
        // Trang b·ªã l·∫°i sword
        await equipBestSword()
        return true
      }
      return false
    } catch (error) {
      // Ch·ªâ log l·ªói quan tr·ªçng, b·ªè qua "Food is full"
      const errorMsg = error?.message || error?.toString() || ''
      if (!errorMsg.includes('Food is full') && !errorMsg.includes('Consuming cancelled')) {
        console.log('‚ö†Ô∏è L·ªói ƒÉn th·ª©c ƒÉn:', errorMsg)
      }
      return false
    }
  }

  // Main PVP function - Standard
  startPvP = async function(targetName: string) {
    // D·ª´ng c√°c ho·∫°t ƒë·ªông kh√°c
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopSmartAutoFishing()
    if (autoFarmActive) stopAutoFarm()
    if (autoMiningActive) stopAutoMining(true)
    if (autoChestHuntingActive) stopAutoChestHunting()

    // Validate player name tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu PVP
    const allPlayers = Object.keys(bot.players)
    console.log(`üìã Ki·ªÉm tra player "${targetName}" trong danh s√°ch: [${allPlayers.join(', ')}]`)

    // T√¨m player v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
    let validatedName = targetName

    // Ph∆∞∆°ng ph√°p 1: T√¨m ch√≠nh x√°c
    if (!bot.players[targetName]) {
      // Ph∆∞∆°ng ph√°p 2: T√¨m kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
      const foundName = allPlayers.find(name =>
        name.toLowerCase() === targetName.toLowerCase()
      )

      if (foundName) {
        validatedName = foundName
        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y player: "${foundName}" (kh·ªõp v·ªõi "${targetName}")`)
      } else {
        // Ph∆∞∆°ng ph√°p 3: T√¨m g·∫ßn ƒë√∫ng
        const nearName = allPlayers.find(name =>
          name.toLowerCase().includes(targetName.toLowerCase()) ||
          targetName.toLowerCase().includes(name.toLowerCase())
        )

        if (nearName) {
          validatedName = nearName
          console.log(`‚úÖ ƒê√£ t√¨m th·∫•y player g·∫ßn ƒë√∫ng: "${nearName}" (t·ª´ "${targetName}")`)
        } else {
          bot.chat(`ü•∫ Kh√¥ng t√¨m th·∫•y player "${targetName}" trong server!`)
          console.log(`‚ùå Player "${targetName}" kh√¥ng t·ªìn t·∫°i. Danh s√°ch players: [${allPlayers.join(', ')}]`)
          return
        }
      }
    }

    pvpActive = true
    pvpTargetName = validatedName
    hasWarnedWeakPlayer = false

    bot.chat(`‚öîÔ∏è B·∫Øt ƒë·∫ßu PVP v·ªõi ${validatedName}!`)
    console.log(`‚öîÔ∏è PVP Mode - Target: ${validatedName}`)

    // Trang b·ªã sword ngay
    await equipBestSword()

    // Clear existing interval
    if (pvpInterval) clearInterval(pvpInterval)

    pvpInterval = setInterval(async () => {
      if (!pvpActive) {
        clearInterval(pvpInterval!)
        pvpInterval = null
        return
      }

      try {
        await executePvPCycle()
      } catch (error) {
        console.log('‚ùå L·ªói PVP cycle:', error?.message || error)
      }
    }, 500) // Check every 0.5 seconds for fast reaction
  }

  // Bi·∫øn l∆∞u t√™n player ƒë√£ t√¨m th·∫•y ƒë·ªÉ tr√°nh spam logs
  let lastFoundPlayerName = ''
  let lastPlayerSearchLog = 0

  async function executePvPCycle() {
    if (!pvpActive) return

    const now = Date.now()
    const allPlayers = Object.keys(bot.players)

    // Debug: Log danh s√°ch players m·ªói 30 gi√¢y (tƒÉng t·ª´ 10 gi√¢y)
    if (allPlayers.length > 0 && (!lastPvpTpAttempt || now - lastPvpTpAttempt > 30000)) {
      console.log(`üìã Danh s√°ch players trong server: [${allPlayers.join(', ')}]`)
      lastPvpTpAttempt = now
    }

    // T√¨m target player v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
    let targetPlayer = bot.players[pvpTargetName]?.entity
    let foundPlayerName = ''

    // Ph∆∞∆°ng ph√°p 1: T√¨m theo t√™n ch√≠nh x√°c
    if (!targetPlayer) {
      // Ph∆∞∆°ng ph√°p 2: T√¨m kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
      const playerNames = Object.keys(bot.players)
      const foundName = playerNames.find(name =>
        name.toLowerCase() === pvpTargetName.toLowerCase()
      )

      if (foundName) {
        foundPlayerName = foundName
        targetPlayer = bot.players[foundName]?.entity
        pvpTargetName = foundName // C·∫≠p nh·∫≠t t√™n ch√≠nh x√°c

        // Ch·ªâ log khi t√¨m th·∫•y l·∫ßn ƒë·∫ßu ho·∫∑c sau 10 gi√¢y
        if (lastFoundPlayerName !== foundName || now - lastPlayerSearchLog > 10000) {
          console.log(`‚úÖ T√¨m th·∫•y player: "${foundName}"`)
          lastFoundPlayerName = foundName
          lastPlayerSearchLog = now
        }
      }
    } else {
      foundPlayerName = pvpTargetName
    }

    // Ph∆∞∆°ng ph√°p 3: T√¨m theo t√™n g·∫ßn ƒë√∫ng (contains)
    if (!targetPlayer) {
      const playerNames = Object.keys(bot.players)
      const foundName = playerNames.find(name =>
        name.toLowerCase().includes(pvpTargetName.toLowerCase()) ||
        pvpTargetName.toLowerCase().includes(name.toLowerCase())
      )

      if (foundName) {
        foundPlayerName = foundName
        targetPlayer = bot.players[foundName]?.entity
        pvpTargetName = foundName // C·∫≠p nh·∫≠t t√™n ch√≠nh x√°c

        // Ch·ªâ log khi t√¨m th·∫•y l·∫ßn ƒë·∫ßu ho·∫∑c sau 10 gi√¢y
        if (lastFoundPlayerName !== foundName || now - lastPlayerSearchLog > 10000) {
          console.log(`‚úÖ T√¨m th·∫•y player g·∫ßn ƒë√∫ng: "${foundName}"`)
          lastFoundPlayerName = foundName
          lastPlayerSearchLog = now
        }
      }
    }

    if (!targetPlayer || !targetPlayer.position) {
      // Ch·ªâ log l·ªói m·ªói 10 gi√¢y (tƒÉng t·ª´ 5 gi√¢y) v√† reset found name
      if (lastFoundPlayerName !== '' || now - lastPlayerSearchLog > 10000) {
        console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y player "${pvpTargetName}" trong server`)
        lastFoundPlayerName = ''
        lastPlayerSearchLog = now
      }
      return
    }

    // Check if target is dead ho·∫∑c ƒëang respawn - IMPROVED
    const isDead = targetPlayer.metadata?.[8] === 0 || targetPlayer.metadata?.[6] === 0
    const isRespawning = targetPlayer.position.y < 0 || !targetPlayer.isValid
    const healthLow = targetPlayer.metadata?.[9] <= 0 // Check health metadata

    if (isDead || isRespawning || healthLow) {
      // Stop pathfinder immediately to prevent chasing
      bot.pathfinder.setGoal(null)
      bot.pvp.stop()

      bot.chat(`üí™ ${pvpTargetName} ƒë√£ b·ªã t·ªõ ƒë√°nh b·∫°i r·ªìi! T·ªõ gi·ªèi l·∫Øm nh·ªâ üòé`)
      console.log(`‚úÖ ${pvpTargetName} ƒë√£ die/respawn, d·ª´ng PVP`)
      stopPvP()
      return
    }

    const distance = bot.entity.position.distanceTo(targetPlayer.position)

    // Check m√°u bot
    const health = bot.health

    // N·∫øu c√≥ t√°o v√†ng, ƒÉn ngay kh√¥ng c·∫ßn b·ªè ch·∫°y
    if (health < 10) {
      const hasGoldenApple = await eatGoldenAppleIfAvailable()
      if (hasGoldenApple) {
        // Silent - kh√¥ng log ƒë·ªÉ gi·∫£m spam
        // Ti·∫øp t·ª•c t·∫•n c√¥ng
      } else if (health < 8) {
        // Kh√¥ng c√≥ t√°o v√†ng v√† m√°u r·∫•t y·∫øu, b·ªè ch·∫°y - ch·ªâ log 1 l·∫ßn
        if (!lastEatTime || Date.now() - lastEatTime > 5000) {
          console.log('üèÉ M√°u y·∫øu, b·ªè ch·∫°y ƒë·ªÉ ƒÉn!')
          lastEatTime = Date.now()
        }

        // Di chuy·ªÉn ra xa 5 blocks
        const escapeAngle = Math.atan2(
          bot.entity.position.z - targetPlayer.position.z,
          bot.entity.position.x - targetPlayer.position.x
        )
        const escapeX = bot.entity.position.x + Math.cos(escapeAngle) * 5
        const escapeZ = bot.entity.position.z + Math.sin(escapeAngle) * 5

        const movements = new Movements(bot)
        movements.allowSprinting = true
        bot.pathfinder.setMovements(movements)

        const escapeGoal = new goals.GoalNear(escapeX, bot.entity.position.y, escapeZ, 1)
        bot.pathfinder.setGoal(escapeGoal)

        // Nh·∫£y khi b·ªè ch·∫°y ƒë·ªÉ nhanh h∆°n
        bot.setControlState('jump', true)
        bot.setControlState('sprint', true)

        await new Promise(resolve => setTimeout(resolve, 1000))

        bot.setControlState('jump', false)

        // ƒÇn th·ª©c ƒÉn
        await eatFoodToHeal()

        return
      }
    }

    // Check kho·∫£ng c√°ch
    if (distance > 20) {
      // Player ch·∫°y xa qu√°, check quy·ªÅn OP v√† /tp
      if (!hasWarnedWeakPlayer || Date.now() - lastPvpTpAttempt > 10000) {
        lastPvpTpAttempt = Date.now()

        // Th·ª≠ /tp
        try {
          bot.chat(`/tp ${pvpTargetName}`)
          await new Promise(resolve => setTimeout(resolve, 500))

          // Check xem c√≥ /tp th√†nh c√¥ng kh√¥ng
          const newDistance = bot.entity.position.distanceTo(targetPlayer.position)
          if (newDistance < distance) {
            bot.chat('C·∫≠u kh√¥ng tho√°t ƒë∆∞·ª£c ƒë√¢u‚ù§')
            console.log('‚úÖ ƒê√£ /tp ƒë·∫øn target')
          } else {
            console.log('‚ùå Kh√¥ng c√≥ quy·ªÅn /tp')
          }
        } catch (tpError) {
          console.log('‚ö†Ô∏è L·ªói khi th·ª≠ /tp')
        }
      }
    } else if (distance > 12 && !hasWarnedWeakPlayer) {
      // Player b·ªè ch·∫°y xa 12 blocks
      bot.chat('Sao c·∫≠u y·∫øu th·∫øüòÜ')
      hasWarnedWeakPlayer = true
      console.log('üòÜ ƒê√£ chat "Sao c·∫≠u y·∫øu th·∫ø"')
    }

    // Trang b·ªã sword n·∫øu ch∆∞a c√≥
    if (!bot.heldItem || !bot.heldItem.name.includes('sword')) {
      await equipBestSword()
    }

    // Check shield m·ªói 2 gi√¢y
    if (now - lastShieldCheck > 2000) {
      lastShieldCheck = now

      // Ki·ªÉm tra xem player c√≥ ƒëang ch·∫∑n khi√™n kh√¥ng (metadata 8 bit 0 = ƒëang blocking)
      const isBlocking = targetPlayer.metadata?.[8] === 1 // Active hand = blocking

      if (isBlocking) {
        console.log('üõ°Ô∏è Player ƒëang ch·∫∑n khi√™n! V√≤ng ra sau l∆∞ng...')
        isCirclingBehind = true

        // T√≠nh g√≥c ƒë·ªÉ v√≤ng ra sau l∆∞ng player
        const angleToPlayer = Math.atan2(
          targetPlayer.position.z - bot.entity.position.z,
          targetPlayer.position.x - bot.entity.position.x
        )
        // Th√™m 180 ƒë·ªô ƒë·ªÉ ra sau l∆∞ng
        const behindAngle = angleToPlayer + Math.PI
        const behindX = targetPlayer.position.x + Math.cos(behindAngle) * 2
        const behindZ = targetPlayer.position.z + Math.sin(behindAngle) * 2

        const movements = new Movements(bot)
        movements.allowSprinting = true
        movements.allowParkour = true
        bot.pathfinder.setMovements(movements)

        const behindGoal = new goals.GoalNear(behindX, targetPlayer.position.y, behindZ, 1)
        bot.pathfinder.setGoal(behindGoal, true)

        // Nh·∫£y khi v√≤ng ra sau
        bot.setControlState('jump', true)
        bot.setControlState('sprint', true)

        await new Promise(resolve => setTimeout(resolve, 800))
        bot.setControlState('jump', false)

        isCirclingBehind = false
      }
    }

    // Di chuy·ªÉn v·ªÅ ph√≠a target
    if (distance > 3) {
      const movements = new Movements(bot)
      movements.allowSprinting = true
      movements.allowParkour = true
      bot.pathfinder.setMovements(movements)

      const goal = new goals.GoalFollow(targetPlayer, 2)
      bot.pathfinder.setGoal(goal, true)

      // Nh·∫£y khi di chuy·ªÉn ƒë·∫øn m·ª•c ti√™u ƒë·ªÉ nhanh h∆°n
      bot.setControlState('jump', true)
      bot.setControlState('sprint', true)

      await new Promise(resolve => setTimeout(resolve, 300))
      bot.setControlState('jump', false)
    }

    // T·∫•n c√¥ng v·ªõi mineflayer-pvp
    try {
      bot.pvp.attack(targetPlayer)
    } catch (attackError) {
      console.log('‚ö†Ô∏è L·ªói t·∫•n c√¥ng:', attackError?.message || attackError)
    }
  }

  // Main PVP Pro function - With wind charge and mace - IMPROVED
  startPvPPro = async function(targetName: string) {
    // Check c√≥ wind charge v√† mace kh√¥ng - B·∫ÆT BU·ªòC
    // Debug: Log t·∫•t c·∫£ items trong inventory
    console.log('üîç Checking inventory for wind charge and mace...')
    const allItems = bot.inventory.items().map(item => item.name)
    console.log('üì¶ Current inventory:', allItems.join(', '))

    // T√¨m wind charge - h·ªó tr·ª£ nhi·ªÅu t√™n kh√°c nhau (bao g·ªìm custom items)
    const windChargeItem = bot.inventory.items().find(item => {
      const itemName = item.name.toLowerCase()
      const displayName = item.displayName?.toLowerCase() || ''
      // Ki·ªÉm tra nhi·ªÅu bi·∫øn th·ªÉ t√™n c·ªßa wind charge
      return itemName.includes('wind') ||
             itemName.includes('breeze') ||
             itemName === 'wind_charge' ||
             itemName === 'breeze_rod' ||
             displayName.includes('wind') ||
             displayName.includes('c·∫ßu gi√≥')
    })

    // T√¨m mace - h·ªó tr·ª£ nhi·ªÅu t√™n kh√°c nhau (bao g·ªìm custom items)
    const maceItem = bot.inventory.items().find(item => {
      const itemName = item.name.toLowerCase()
      const displayName = item.displayName?.toLowerCase() || ''
      // Ki·ªÉm tra nhi·ªÅu bi·∫øn th·ªÉ t√™n c·ªßa mace
      return itemName.includes('mace') ||
             itemName === 'mace' ||
             displayName.includes('mace') ||
             displayName.includes('b√∫a')
    })

    const hasWindCharge = !!windChargeItem
    const hasMace = !!maceItem

    console.log(`‚úÖ Wind charge found: ${hasWindCharge}${windChargeItem ? ` (${windChargeItem.name})` : ''}`)
    console.log(`‚úÖ Mace found: ${hasMace}${maceItem ? ` (${maceItem.name})` : ''}`)

    if (!hasWindCharge || !hasMace) {
      bot.chat('ü•∫ Kh√¥ng c√≥ c·∫ßu gi√≥ ho·∫∑c b√∫a! Kh√¥ng th·ªÉ PVP Pro!')
      console.log('‚ùå Missing wind_charge or mace, stopping all actions')

      // Th√¥ng b√°o chi ti·∫øt v·ªÅ item n√†o thi·∫øu
      if (!hasWindCharge) {
        bot.chat('‚ö†Ô∏è Thi·∫øu: Wind Charge (C·∫ßu gi√≥)')
        console.log('‚ùå Wind charge not found in inventory')
        console.log('üí° L∆∞u √Ω: Wind Charge ch·ªâ c√≥ trong Minecraft 1.21+. Server ƒëang ch·∫°y 1.19.4')
        bot.chat('üí° Wind Charge ch·ªâ c√≥ trong MC 1.21+. C·∫ßn plugin/custom item!')
      }
      if (!hasMace) {
        bot.chat('‚ö†Ô∏è Thi·∫øu: Mace (B√∫a)')
        console.log('‚ùå Mace not found in inventory')
        console.log('üí° L∆∞u √Ω: Mace ch·ªâ c√≥ trong Minecraft 1.21+. Server ƒëang ch·∫°y 1.19.4')
        bot.chat('üí° Mace ch·ªâ c√≥ trong MC 1.21+. C·∫ßn plugin/custom item!')
      }

      stopAll() // D·ª´ng t·∫•t c·∫£ thay v√¨ chuy·ªÉn sang PVP th∆∞·ªùng
      return
    }

    // D·ª´ng c√°c ho·∫°t ƒë·ªông kh√°c tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopSmartAutoFishing()
    if (autoFarmActive) stopAutoFarm()
    if (autoMiningActive) stopAutoMining(true)
    if (autoChestHuntingActive) stopAutoChestHunting()
    if (pvpActive) stopPvP(true) // D·ª´ng PVP th∆∞·ªùng n·∫øu ƒëang ch·∫°y

    pvpProActive = true
    pvpActive = false // ƒê·∫£m b·∫£o PVP th∆∞·ªùng b·ªã t·∫Øt
    pvpTargetName = targetName

    bot.chat(`‚öîÔ∏è B·∫Øt ƒë·∫ßu PVP PRO v·ªõi ${targetName}! CH·ªà d√πng Wind Charge + Mace combo! üî•`)
    console.log(`‚öîÔ∏è PVP PRO Mode - Target: ${targetName}`)
    console.log(`‚úÖ Wind Charge: c√≥, Mace: c√≥ - Ch·ªâ d√πng combo`)

    // Clear existing interval
    if (pvpInterval) clearInterval(pvpInterval)

    pvpInterval = setInterval(async () => {
      if (!pvpProActive) {
        clearInterval(pvpInterval!)
        pvpInterval = null
        return
      }

      // Ki·ªÉm tra l·∫°i c√≥ ƒë·ªß items kh√¥ng m·ªói cycle
      const stillHasWindCharge = bot.inventory.items().some(item => {
        const itemName = item.name.toLowerCase()
        return itemName.includes('wind') ||
               itemName.includes('breeze') ||
               itemName === 'wind_charge' ||
               itemName === 'breeze_rod'
      })

      const stillHasMace = bot.inventory.items().some(item => {
        const itemName = item.name.toLowerCase()
        return itemName.includes('mace') || itemName === 'mace'
      })

      if (!stillHasWindCharge || !stillHasMace) {
        bot.chat('ü•∫ H·∫øt c·∫ßu gi√≥ ho·∫∑c b√∫a! D·ª´ng PVP Pro!')
        console.log('‚ùå Lost wind_charge or mace, stopping PVP Pro')
        stopPvP(true)
        return
      }

      try {
        await executePvPProCycle()
      } catch (error) {
        console.log('‚ùå L·ªói PVP Pro cycle:', error?.message || error)
      }
    }, 800) // TƒÉng t·ªëc ƒë·ªô check t·ª´ 1s xu·ªëng 800ms
  }

  async function executePvPProCycle() {
    if (!pvpProActive) return

    // T√¨m target player v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
    let targetPlayer = bot.players[pvpTargetName]?.entity

    // T√¨m player g·∫ßn ƒë√∫ng n·∫øu kh√¥ng t√¨m th·∫•y ch√≠nh x√°c
    if (!targetPlayer) {
      const allPlayers = Object.keys(bot.players)
      const foundName = allPlayers.find(name =>
        name.toLowerCase().includes(pvpTargetName.toLowerCase()) ||
        pvpTargetName.toLowerCase().includes(name.toLowerCase())
      )

      if (foundName) {
        targetPlayer = bot.players[foundName]?.entity
        pvpTargetName = foundName
      }
    }

    if (!targetPlayer || !targetPlayer.position) {
      console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ${pvpTargetName}`)
      return
    }

    // Check if target is dead - IMPROVED
    const isDead = targetPlayer.metadata?.[8] === 0 || targetPlayer.metadata?.[6] === 0
    const isRespawning = targetPlayer.position.y < 0 || !targetPlayer.isValid
    const healthLow = targetPlayer.metadata?.[9] <= 0

    if (isDead || isRespawning || healthLow) {
      // Stop pathfinder immediately to prevent chasing
      bot.pathfinder.setGoal(null)
      bot.pvp.stop()

      bot.chat(`üí™ ${pvpTargetName} ƒë√£ b·ªã t·ªõ cho bay m√†u v·ªõi combo Wind Charge + Mace! Qu√° ƒë·ªânh! üî•`)
      console.log(`‚úÖ ${pvpTargetName} ƒë√£ die, d·ª´ng PVP Pro`)
      stopPvP()
      return
    }

    const distance = bot.entity.position.distanceTo(targetPlayer.position)

    // PVP PRO: CH·ªà DI CHUY·ªÇN, KH√îNG ƒê√ÅNH TH∆Ø·ªúNG
    if (distance > 4) {
      // Di chuy·ªÉn v·ªÅ ph√≠a target - KH√îNG t·∫•n c√¥ng
      const movements = new Movements(bot)
      movements.allowSprinting = true
      movements.allowParkour = true
      movements.allowFreeMotion = true
      bot.pathfinder.setMovements(movements)

      const goal = new goals.GoalFollow(targetPlayer, 2)
      bot.pathfinder.setGoal(goal, true)

      // KH√îNG t·∫•n c√¥ng khi ƒëang di chuy·ªÉn - ch·ªâ log
      if (distance <= 8) {
        console.log(`üèÉ ƒêang di chuy·ªÉn ƒë·∫øn ${pvpTargetName} (${distance.toFixed(1)}m) - Ch·ªù combo`)
      }
    } else {
      // G·∫ßn target (‚â§4 blocks), th·ª±c hi·ªán CH·ªà COMBO Wind Charge + Mace
      try {
        // D·ª´ng di chuy·ªÉn ƒë·ªÉ th·ª±c hi·ªán combo ch√≠nh x√°c
        bot.pathfinder.setGoal(null)

        // 1. Ki·ªÉm tra c√≥ wind charge v√† mace v·ªõi nhi·ªÅu bi·∫øn th·ªÉ t√™n
        const windCharge = bot.inventory.items().find(item => {
          const itemName = item.name.toLowerCase()
          return itemName.includes('wind') ||
                 itemName.includes('breeze') ||
                 itemName === 'wind_charge' ||
                 itemName === 'breeze_rod'
        })

        const mace = bot.inventory.items().find(item => {
          const itemName = item.name.toLowerCase()
          return itemName.includes('mace') || itemName === 'mace'
        })

        if (!windCharge || !mace) {
          bot.chat('ü•∫ H·∫øt c·∫ßu gi√≥ ho·∫∑c b√∫a! D·ª´ng PVP Pro!')
          console.log('‚ùå Missing items mid-combo, stopping')
          stopPvP(true)
          return
        }

        console.log('üéØ B·∫Øt ƒë·∫ßu COMBO Wind Charge + Mace!')

        // 2. Trang b·ªã wind charge
        await bot.equip(windCharge, 'hand')
        console.log('üí® Trang b·ªã wind charge')
        await new Promise(resolve => setTimeout(resolve, 200))

        // 3. N√©m wind charge xu·ªëng ƒë·∫•t ƒë·ªÉ bay cao
        const groundPos = bot.entity.position.offset(0, -1, 0)
        await bot.lookAt(groundPos, true)
        await new Promise(resolve => setTimeout(resolve, 150))

        bot.activateItem() // N√©m wind charge
        console.log('üí® N√©m wind charge - BAY L√äN!')

        // 4. ƒê·ª£i bay l√™n cao
        await new Promise(resolve => setTimeout(resolve, 600))

        // 5. Trang b·ªã mace trong khi bay
        await bot.equip(mace, 'hand')
        console.log('üî® Trang b·ªã MACE trong kh√¥ng trung!')
        await new Promise(resolve => setTimeout(resolve, 100))

        // 6. Nh√¨m ch√≠nh x√°c v√†o ƒë·∫ßu target
        const targetHead = targetPlayer.position.offset(0, 1.6, 0)
        await bot.lookAt(targetHead, true)

        // 7. ƒê·ª£i r∆°i xu·ªëng m·ªôt ch√∫t
        await new Promise(resolve => setTimeout(resolve, 200))

        // 8. SPAM MACE ATTACK khi r∆°i xu·ªëng
        console.log('üí• B·∫ÆT ƒê·∫¶U MACE SMASH COMBO!')
        for (let i = 0; i < 5; i++) {
          try {
            bot.attack(targetPlayer)
            console.log(`üí• MACE SMASH ${i + 1}/5!`)
          } catch (attackErr) {
            // Ignore individual attack errors
          }
          await new Promise(resolve => setTimeout(resolve, 50))
        }

        bot.chat('üí•üí•üí• ULTRA MACE COMBO HO√ÄN TH√ÄNH!')
        console.log('‚úÖ Combo Wind Charge + Mace ƒë√£ th·ª±c hi·ªán xong')

        // 9. Cooldown tr∆∞·ªõc combo ti·∫øp theo
        await new Promise(resolve => setTimeout(resolve, 2000))

      } catch (comboError) {
        console.log('‚ùå L·ªói combo Wind Charge + Mace:', comboError?.message || comboError)
      }
    }
  }

  // Stop PVP function
  stopPvP = function(silent: boolean = false) {
    console.log('‚èπÔ∏è Stopping PVP...')
    pvpActive = false
    pvpProActive = false
    pvpTargetName = ''
    hasWarnedWeakPlayer = false

    if (pvpInterval) {
      clearInterval(pvpInterval)
      pvpInterval = null
    }

    try {
      bot.pvp.stop()
      bot.pathfinder.setGoal(null)

      bot.setControlState('forward', false)
      bot.setControlState('back', false)
      bot.setControlState('left', false)
      bot.setControlState('right', false)
      bot.setControlState('sprint', false)
    } catch (error) {
      // Ignore cleanup errors
    }

    if (!silent) {
      bot.chat('‚öîÔ∏è D·ª´ng PVP r·ªìi!')
    }
    console.log('‚èπÔ∏è PVP - Deactivated')
  }

  // ------------------ AI Agent Handler ------------------
  async function handleAIAgentCommand(username: string, actionRequest: string) {
    if (!geminiApiKey) {
      bot.chat('ü•∫ T·ªõ ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh Gemini API ƒë·ªÉ th·ª±c hi·ªán AI actions!')
      return
    }

    try {
      bot.chat(`ü§ñ AI ƒëang ph√¢n t√≠ch: "${actionRequest}"...`)
      console.log(`ü§ñ AI Agent: Processing request from ${username}: ${actionRequest}`)

      // G·ªçi Gemini API ƒë·ªÉ ph√¢n t√≠ch h√†nh ƒë·ªông
      const systemPrompt = `B·∫°n l√† AI agent ƒëi·ªÅu khi·ªÉn bot Minecraft. Ph√¢n t√≠ch y√™u c·∫ßu v√† tr·∫£ v·ªÅ JSON v·ªõi c√°c h√†nh ƒë·ªông c·ª• th·ªÉ.

Y√™u c·∫ßu: "${actionRequest}"

Tr·∫£ v·ªÅ JSON v·ªõi format:
{
  "actions": [
    {"type": "move", "target": "tree", "distance": 10},
    {"type": "collect", "item": "oak_log", "count": 5},
    {"type": "craft", "item": "planks", "count": 20}
  ],
  "summary": "T√≥m t·∫Øt ng·∫Øn g·ªçn nh·ªØng g√¨ bot s·∫Ω l√†m"
}

C√°c lo·∫°i action h·ª£p l·ªá:
- move: Di chuy·ªÉn ƒë·∫øn (target: player_name, tree, water, cave, chest)
- collect: Thu th·∫≠p item (item: oak_log, stone, dirt, wheat, etc.)
- dig: ƒê√†o block (block: stone, dirt, coal_ore, iron_ore, etc.)
- craft: Ch·∫ø t·∫°o (item: planks, stick, crafting_table, etc.)
- smelt: Nung (input: oak_log, iron_ore, output: charcoal, iron_ingot)
- attack: T·∫•n c√¥ng (target: zombie, skeleton, creeper, etc.)
- follow: Theo player (player: username)
- chat: N√≥i (message: "Hello world")

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.`

      const payload = {
        contents: [{
          parts: [{
            text: systemPrompt
          }]
        }],
        generationConfig: {
          maxOutputTokens: 300,
          temperature: 0.7
        }
      }

      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      })

      const result = await response.json()

      if (!response.ok) {
        console.log('‚ùå Gemini API Error:', result)
        bot.chat('üòµ L·ªói AI API! Kh√¥ng th·ªÉ ph√¢n t√≠ch h√†nh ƒë·ªông!')
        return
      }

      const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text

      if (!generatedText) {
        bot.chat('ü§î AI kh√¥ng th·ªÉ hi·ªÉu y√™u c·∫ßu n√†y!')
        return
      }

      // Parse JSON response
      let aiPlan
      try {
        // L√†m s·∫°ch response (lo·∫°i b·ªè markdown code blocks n·∫øu c√≥)
        const cleanJson = generatedText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim()
        aiPlan = JSON.parse(cleanJson)
      } catch (parseError) {
        console.log('‚ùå JSON parse error:', parseError)
        bot.chat('üòµ AI tr·∫£ v·ªÅ format kh√¥ng h·ª£p l·ªá!')
        return
      }

      // Th√¥ng b√°o k·∫ø ho·∫°ch
      bot.chat(`‚ú® ${aiPlan.summary || 'B·∫Øt ƒë·∫ßu th·ª±c hi·ªán!'}`)
      console.log('üìã AI Plan:', aiPlan)

      // Th·ª±c thi t·ª´ng action
      for (let i = 0; i < aiPlan.actions.length; i++) {
        const action = aiPlan.actions[i]
        console.log(`üéØ Executing action ${i + 1}/${aiPlan.actions.length}:`, action)

        try {
          await executeAIAction(action, username)
          await new Promise(resolve => setTimeout(resolve, 1000)) // Delay gi·ªØa c√°c action
        } catch (actionError) {
          console.log('‚ùå Action execution error:', actionError)
          bot.chat(`üòµ L·ªói khi th·ª±c hi·ªán: ${action.type}`)
          break
        }
      }

      bot.chat('‚úÖ Ho√†n th√†nh t·∫•t c·∫£ AI actions!')
      console.log('‚úÖ AI Agent: All actions completed')

    } catch (error) {
      console.log('‚ùå AI Agent error:', error)
      bot.chat('üòµ C√≥ l·ªói khi x·ª≠ l√Ω AI command!')
    }
  }

  // Th·ª±c thi m·ªôt action c·ª• th·ªÉ t·ª´ AI plan
  async function executeAIAction(action: any, requestUsername: string) {
    const actionType = action.type?.toLowerCase()

    switch (actionType) {
      case 'move':
        await executeAIMove(action)
        break
      case 'collect':
        await executeAICollect(action)
        break
      case 'dig':
        await executeAIDig(action)
        break
      case 'craft':
        await executeAICraft(action)
        break
      case 'smelt':
        await executeAISmelt(action)
        break
      case 'attack':
        await executeAIAttack(action)
        break
      case 'follow':
        await executeAIFollow(action, requestUsername)
        break
      case 'chat':
        bot.chat(action.message || 'Hello!')
        break
      default:
        console.log(`‚ö†Ô∏è Unknown action type: ${actionType}`)
    }
  }

  // AI Move action
  async function executeAIMove(action: any) {
    const target = action.target?.toLowerCase()
    const distance = action.distance || 20

    bot.chat(`üö∂ ƒêang di chuy·ªÉn ƒë·∫øn ${target}...`)

    if (target === 'tree') {
      const tree = bot.findBlock({
        matching: (block: any) => block && (block.name.includes('log') || block.name.includes('oak')),
        maxDistance: distance
      })
      if (tree) {
        await bot.pathfinder.goto(new goals.GoalNear(tree.position.x, tree.position.y, tree.position.z, 2))
        bot.chat(`‚úÖ ƒê√£ ƒë·∫øn c√¢y!`)
      } else {
        bot.chat(`ü•∫ Kh√¥ng t√¨m th·∫•y c√¢y g·∫ßn ƒë√¢y!`)
      }
    } else if (target === 'water') {
      const water = bot.findBlock({
        matching: (block: any) => block && block.name === 'water',
        maxDistance: distance
      })
      if (water) {
        await bot.pathfinder.goto(new goals.GoalNear(water.position.x, water.position.y, water.position.z, 2))
        bot.chat(`‚úÖ ƒê√£ ƒë·∫øn n∆∞·ªõc!`)
      } else {
        bot.chat(`ü•∫ Kh√¥ng t√¨m th·∫•y n∆∞·ªõc!`)
      }
    } else {
      // Di chuy·ªÉn ng·∫´u nhi√™n
      const currentPos = bot.entity.position
      const randomX = currentPos.x + (Math.random() - 0.5) * distance
      const randomZ = currentPos.z + (Math.random() - 0.5) * distance
      await bot.pathfinder.goto(new goals.GoalXZ(randomX, randomZ))
      bot.chat(`‚úÖ ƒê√£ di chuy·ªÉn!`)
    }
  }

  // AI Collect action
  async function executeAICollect(action: any) {
    const itemName = action.item?.toLowerCase()
    const count = action.count || 5

    bot.chat(`üå≥ ƒêang thu th·∫≠p ${count} ${itemName}...`)

    for (let i = 0; i < count; i++) {
      const block = bot.findBlock({
        matching: (block: any) => block && block.name.toLowerCase().includes(itemName),
        maxDistance: 32
      })

      if (block) {
        await bot.pathfinder.goto(new goals.GoalNear(block.position.x, block.position.y, block.position.z, 2))
        await bot.dig(block)
        await new Promise(resolve => setTimeout(resolve, 500))
      } else {
        bot.chat(`ü•∫ Ch·ªâ thu th·∫≠p ƒë∆∞·ª£c ${i}/${count} ${itemName}`)
        break
      }
    }

    bot.chat(`‚úÖ ƒê√£ thu th·∫≠p ${itemName}!`)
  }

  // AI Dig action
  async function executeAIDig(action: any) {
    const blockName = action.block?.toLowerCase()
    const count = action.count || 10

    bot.chat(`‚õèÔ∏è ƒêang ƒë√†o ${count} ${blockName}...`)

    // Trang b·ªã pickaxe n·∫øu c·∫ßn
    if (blockName.includes('ore') || blockName.includes('stone')) {
      await equipBestPickaxe()
    }

    for (let i = 0; i < count; i++) {
      const block = bot.findBlock({
        matching: (block: any) => block && block.name.toLowerCase().includes(blockName),
        maxDistance: 32
      })

      if (block) {
        await bot.pathfinder.goto(new goals.GoalNear(block.position.x, block.position.y, block.position.z, 3))
        await bot.dig(block)
        await new Promise(resolve => setTimeout(resolve, 800))
      } else {
        bot.chat(`ü•∫ Ch·ªâ ƒë√†o ƒë∆∞·ª£c ${i}/${count} ${blockName}`)
        break
      }
    }

    bot.chat(`‚úÖ ƒê√£ ƒë√†o xong ${blockName}!`)
  }

  // AI Craft action
  async function executeAICraft(action: any) {
    const itemName = action.item?.toLowerCase()
    const count = action.count || 1

    bot.chat(`üî® ƒêang ch·∫ø t·∫°o ${count} ${itemName}...`)

    // Placeholder - c·∫ßn implement craft logic ph·ª©c t·∫°p h∆°n
    bot.chat(`‚ö†Ô∏è Craft ch∆∞a ƒë∆∞·ª£c implement ƒë·∫ßy ƒë·ªß!`)
  }

  // AI Smelt action
  async function executeAISmelt(action: any) {
    bot.chat(`üî• ƒêang nung ${action.input} th√†nh ${action.output}...`)
    bot.chat(`‚ö†Ô∏è Smelt ch∆∞a ƒë∆∞·ª£c implement ƒë·∫ßy ƒë·ªß!`)
  }

  // AI Attack action
  async function executeAIAttack(action: any) {
    const targetMob = action.target?.toLowerCase()

    bot.chat(`‚öîÔ∏è ƒêang t√¨m v√† t·∫•n c√¥ng ${targetMob}...`)

    const mob = bot.nearestEntity((entity: any) => {
      if (!entity || !entity.position) return false
      const mobName = entity.name?.toLowerCase() || ''
      return mobName.includes(targetMob) && bot.entity.position.distanceTo(entity.position) < 20
    })

    if (mob) {
      await equipBestSwordForCombat()
      await bot.pathfinder.goto(new goals.GoalFollow(mob, 2))

      for (let i = 0; i < 10; i++) {
        if (mob.isValid) {
          bot.attack(mob)
          await new Promise(resolve => setTimeout(resolve, 500))
        } else {
          break
        }
      }

      bot.chat(`‚úÖ ƒê√£ t·∫•n c√¥ng ${targetMob}!`)
    } else {
      bot.chat(`ü•∫ Kh√¥ng t√¨m th·∫•y ${targetMob} g·∫ßn ƒë√¢y!`)
    }
  }

  // AI Follow action
  async function executeAIFollow(action: any, requestUsername: string) {
    const playerName = action.player || requestUsername
    bot.chat(`üë£ ƒêang theo ${playerName}...`)
    startFollowingPlayer(playerName)
  }

  // ------------------ Chat Commands ------------------
  bot.on('chat', async (username: string, message: string) => {
    // FAST LOG - kh√¥ng ch·ªù
    console.log(`üí¨ [${username}]: ${message}`)

    // B·ªè qua chat t·ª´ bot, server, console v√† c√°c plugin - NHANH H√öN
    if (username === bot.username ||
        username === 'server' ||
        username === 'console' ||
        username === 'Shop' ||
        username.startsWith('[') ||
        username.includes('Plugin') ||
        username.includes('System') ||
        username.includes('Admin') ||
        message.includes('plugin') ||
        message.includes('update available') ||
        message.includes('download at:') ||
        message.includes('spigotmc.org')) {
      return // NHANH - kh√¥ng log
    }

    // Update last command time - NHANH
    lastPlayerCommand = Date.now()
    const cleanMessage = message.toLowerCase().trim()

    // FAST COMMAND PROCESSING - x·ª≠ l√Ω ngay l·∫≠p t·ª©c kh√¥ng ch·ªù
    setImmediate(async () => {
      console.log(`üîç Processing: "${cleanMessage}" t·ª´ ${username}`)

      // KI·ªÇM TRA AI AGENT COMMAND TR∆Ø·ªöC TI√äN - ∆ØU TI√äN CAO
      if (message.startsWith('AI ') || message.startsWith('ai ')) {
        const actionRequest = message.substring(3).trim()
        if (actionRequest) {
          await handleAIAgentCommand(username, actionRequest)
          return
        }
      }

      // X·ª≠ l√Ω c√°c l·ªánh chat - T·ªêI ∆ØU H√ìA TH·ª® T·ª∞ C√ÅC L·ªÜNH HAY D√ôNG NH·∫§T
      if (cleanMessage.includes('d·ª´ng') || cleanMessage.includes('stop')) {
        // L·ªÜNH D·ª™NG - ∆ØU TI√äN CAO NH·∫§T
        stopAll()
        return
      } else if (cleanMessage.startsWith('auto x√¢y ')) {
        // L·ªÜNH AUTO X√ÇY - TH·ª® T·ª∞ CAO
        // L·∫•y lo·∫°i c√¥ng tr√¨nh t·ª´ l·ªánh
        const buildType = message.substring(9).trim() // L·∫•y ph·∫ßn sau "auto x√¢y "
        if (buildType) {
          // Ki·ªÉm tra c√≥ l·ªánh "ph·∫≥ng" ƒë·ªÉ clear terrain tr∆∞·ªõc
          if (buildType.includes('ph·∫≥ng') || buildType.includes('clear')) {
            const realBuildType = buildType.replace(/ph·∫≥ng|clear/g, '').trim()
            autoBuildManager.startSmartAutoBuild(realBuildType || 'nh√† nh·ªè')
          } else {
            autoBuildManager.startSmartAutoBuild(buildType)
          }
        } else {
          bot.chat('üè† C√°c lo·∫°i c√¥ng tr√¨nh c√≥ s·∫µn:')
          bot.chat('üèòÔ∏è Nh√† nh·ªè: auto x√¢y nh√† nh·ªè')
          bot.chat('üóº Th√°p: auto x√¢y th√°p nh·ªè')
          bot.chat('üåâ C·∫ßu: auto x√¢y c·∫ßu')
          bot.chat('üå± D·ªçn ph·∫≥ng: auto x√¢y ph·∫≥ng [lo·∫°i]')
          bot.chat('‚ú® Nhanh, ƒë·∫πp v√† ti·∫øt ki·ªám v·∫≠t li·ªáu!')
        }
      } else if (cleanMessage.includes('d·ª´ng x√¢y') || cleanMessage.includes('stop build')) {
        autoBuildManager.stopSmartAutoBuild()
      } else if (cleanMessage.includes('theo')) {
        if (autoFishingActive) stopAutoFishing() // D·ª´ng c√¢u khi c√≥ l·ªánh kh√°c

        // Ki·ªÉm tra xem c√≥ ch·ªâ ƒë·ªãnh player c·ª• th·ªÉ kh√¥ng
        const followMatch = cleanMessage.match(/theo\s+(.+)/)
        if (followMatch && followMatch[1].trim() !== '' && !cleanMessage.startsWith('theo t·ªõ')) {
          const targetName = followMatch[1].trim()
          followingManager.startFollowingPlayer(targetName)
        } else {
          followingManager.startFollowingPlayer(username)
        }
      } else if (cleanMessage.includes('b·∫£o v·ªá')) {
        if (autoFishingActive) stopAutoFishing() // D·ª´ng c√¢u khi c√≥ l·ªánh kh√°c

        // Ki·ªÉm tra xem c√≥ ch·ªâ ƒë·ªãnh player c·ª• th·ªÉ kh√¥ng
        const protectMatch = cleanMessage.match(/b·∫£o v·ªá\s+(.+)/)
        if (protectMatch && protectMatch[1].trim() !== '' && !cleanMessage.startsWith('b·∫£o v·ªá t·ªõ')) {
          const targetName = protectMatch[1].trim()
          protectingManager.startProtectingPlayer(targetName)
        } else {
          protectingManager.startProtectingPlayer(username)
        }
      // Bow commands removed
      } else if (cleanMessage.includes('ng·ªß')) {
        if (autoFishingActive) stopAutoFishing() // D·ª´ng c√¢u khi c√≥ l·ªánh kh√°c
        goSleep()
      } else if (cleanMessage.includes('c·∫ßn')) {
        giveItemToPlayer(username, message)
      } else if (cleanMessage.includes('c·∫•t ƒë·ªì')) {
        if (autoFishingActive) stopAutoFishing() // D·ª´ng c√¢u khi c√≥ l·ªánh kh√°c
        storeItemsInChest()
      } else if (cleanMessage.includes('auto farmer') || cleanMessage.includes('crop farm')) {
        if (autoFishingActive) stopAutoFishing() // D·ª´ng c√¢u khi c√≥ l·ªánh kh√°c
        startAutoCropFarmer()
      } else if (cleanMessage.includes('d·ª´ng farmer') || cleanMessage.includes('stop farmer')) {
        stopAutoCropFarmer()
      } else if (cleanMessage.includes('auto farm all') || cleanMessage.includes('farm')) {
        if (autoFishingActive) stopAutoFishing() // D·ª´ng c√¢u khi c√≥ l·ªánh kh√°c
        autoFarmManager.startAutoFarmAll()
      } else if (cleanMessage.startsWith('t·ªõ h·ªèi n√®')) {
        handleQuestionWithAI(username, message)
      } else if (cleanMessage.includes('auto c√¢u') || cleanMessage.includes('fishing')) {
        startSmartAutoFishing()
      } else if (cleanMessage.includes('d·ª´ng c√¢u') || cleanMessage.includes('stop fishing')) {
        stopSmartAutoFishing()
      } else if (cleanMessage.includes('auto mine') || cleanMessage.includes('auto ƒë√†o')) {
        // Parse ore type from command
        const oreMatch = cleanMessage.match(/(?:auto mine|auto ƒë√†o)\s+(\w+)/)
        if (oreMatch) {
          const oreType = oreMatch[1].toLowerCase()
          startAutoMining(oreType)
        } else {
          bot.chat('ü§î C·∫≠u mu·ªën ƒë√†o qu·∫∑ng g√¨? VD: "auto mine diamond" ho·∫∑c "auto ƒë√†o iron"')
          bot.chat('üìù C√°c lo·∫°i qu·∫∑ng: diamond, iron, gold, coal, copper, emerald, redstone, lapis')
        }
      } else if (cleanMessage.includes('d·ª´ng ƒë√†o') || cleanMessage.includes('stop mining')) {
        if (autoMiningActive) {
          stopAutoMining()
        } else {
          bot.chat('ü§î T·ªõ kh√¥ng ƒëang ƒë√†o m√†!')
        }
      // Auto chest hunting commands
      } else if (cleanMessage.includes('auto t√¨m r∆∞∆°ng') || cleanMessage.includes('auto chest')) {
        startAutoChestHunting()
      } else if (cleanMessage.includes('d·ª´ng t√¨m r∆∞∆°ng') || cleanMessage.includes('d·ª´ng chest') || cleanMessage.includes('stop chest')) {
        stopAutoChestHunting()
      // End auto chest hunting commands
      // Auto Explore commands
      } else if (cleanMessage.includes('auto explore') || cleanMessage.includes('t·ª± kh√°m ph√°')) {
        startAutoExplore()
      } else if (cleanMessage.includes('d·ª´ng explore') || cleanMessage.includes('stop explore')) {
        stopAutoExplore()
      // End Auto Explore commands
      // PVP commands
      } else if (cleanMessage.startsWith('pvp ')) {
        // Standard PVP command: pvp <playername>
        const targetName = message.substring(4).trim()
        if (targetName) {
          startPvP(targetName)
        } else {
          bot.chat('ü§î C·∫≠u mu·ªën PVP v·ªõi ai? VD: "pvp Steve"')
        }
      } else if (cleanMessage.startsWith('pvppro ') || cleanMessage.startsWith('/pvppro ')) {
        // PVP Pro command: pvppro <playername> ho·∫∑c /pvppro <playername>
        const startIndex = cleanMessage.startsWith('/pvppro ') ? 8 : 7
        const targetName = message.substring(startIndex).trim()
        if (targetName) {
          startPvPPro(targetName)
        } else {
          bot.chat('ü§î C·∫≠u mu·ªën PVP Pro v·ªõi ai? VD: "pvppro Steve"')
        }
      } else if (cleanMessage === 'list players' || cleanMessage === 'danh s√°ch players') {
        // Debug command: hi·ªÉn th·ªã danh s√°ch players
        const allPlayers = Object.keys(bot.players)
        if (allPlayers.length > 0) {
          bot.chat(`üìã Players trong server: [${allPlayers.join(', ')}]`)
          console.log(`üìã DEBUG - Danh s√°ch players:`, allPlayers)
        } else {
          bot.chat('üìã Kh√¥ng c√≥ player n√†o trong server (ngo√†i t·ªõ)')
          console.log('üìã DEBUG - Player list empty')
        }
      // End PVP commands
      } else if (cleanMessage.startsWith('h√£y n√≥i ')) {
        // Ch·ª©c nƒÉng l·∫∑p l·∫°i c√¢u n√≥i
        const textToRepeat = message.substring(8).trim() // L·∫•y ph·∫ßn sau "h√£y n√≥i "
        if (textToRepeat) {
          bot.chat(textToRepeat)
          console.log(`üîä Bot l·∫∑p l·∫°i: "${textToRepeat}"`)
        } else {
          bot.chat('ü§î C·∫≠u mu·ªën t·ªõ n√≥i g√¨?')
        }
      } else if (cleanMessage.includes('spam attack') || cleanMessage.includes('t·∫•n c√¥ng spam')) {
        // K√≠ch ho·∫°t ch·∫ø ƒë·ªô spam attack ƒë·∫∑c bi·ªát
        bot.chat('üî• SPAM ATTACK MODE ON! T·ªõ s·∫Ω ƒë√°nh c·ª±c nhanh kh√¥ng delay!')
        console.log('üî• Spam Attack Mode: ACTIVATED')

        // T√¨m v√† spam attack mob g·∫ßn nh·∫•t
        const nearestMob = bot.nearestEntity((entity: any) => {
          if (!entity || !entity.position) return false
          const distance = bot.entity.position.distanceTo(entity.position)
          if (distance > 10) return false

          const hostileMobs = [
            'zombie', 'skeleton', 'creeper', 'spider', 'witch', 'pillager', 'vindicator',
            'evoker', 'husk', 'stray', 'phantom', 'drowned', 'enderman', 'breeze', 'bogged',
            'slime', 'silverfish', 'cave_spider'
          ]
          const mobName = entity.name ? entity.name.toLowerCase() : ''
          const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''

          const isHostile = hostileMobs.some(mobType =>
            mobName.includes(mobType) || displayName.includes(mobType)
          )

          const isMobType = entity.type === 'mob' &&
                           !mobName.includes('villager') &&
                           !mobName.includes('iron_golem')

          return isHostile || isMobType
        })

        if (nearestMob) {
          equipBestWeapon()
          bot.setControlState('sprint', true)

          // ULTRA MEGA SPAM - 20 l·∫ßn t·∫•n c√¥ng li√™n ti·∫øp
          for (let megaSpam = 0; megaSpam < 20; megaSpam++) {
            meleeAttack(nearestMob, bot.entity.position.distanceTo(nearestMob.position))
          }
          bot.chat('‚öîÔ∏è MEGA SPAM COMPLETE! 20x attacks delivered!')
        } else {
          bot.chat('ü§î Kh√¥ng th·∫•y mob n√†o ƒë·ªÉ spam attack!')
        }
      } else if (cleanMessage.startsWith('en ')) {
        // Ch·ª©c nƒÉng enchant c√¥ng c·ª•
        const toolName = message.substring(3).trim()
        await handleEnchantTool(username, toolName)
      } else if (!isCommand(cleanMessage)) {
        // Chat th∆∞·ªùng kh√¥ng ph·∫£i l·ªánh - s·ª≠ d·ª•ng AI ƒë·ªÉ tr·∫£ l·ªùi
        console.log(`üß† ƒêang suy nghƒ© ƒë·ªÉ tr·∫£ l·ªùi chat: "${message}"`)
        await handleChatWithAI(username, message)
      }
    })
  })

  // Theo d√µi player join game
  bot.on('playerJoined', (player: any) => {
    if (player.username !== bot.username) {
      console.log(`üéâ Player ${player.username} joined game`)
      welcomePlayer(player.username)
    }
  })

  // Theo d√µi player left game
  bot.on('playerLeft', (player: any) => {
    if (player.username !== bot.username) {
      console.log(`üëã Player ${player.username} left game`)
    }
  })

  // ------------------ Enchant Tool Function ------------------
  async function handleEnchantTool(username: string, toolName: string) {
    if (!toolName) {
      bot.chat('ü§î C·∫≠u mu·ªën t·ªõ enchant c√¥ng c·ª• g√¨? VD: en diamond_sword')
      return
    }

    try {
      // B∆∞·ªõc 1: Ki·ªÉm tra quy·ªÅn OP b·∫±ng c√°ch th·ª≠ enchant ƒë∆°n gi·∫£n
      bot.chat('üîç Ki·ªÉm tra quy·ªÅn OP...')

      // Th·ª≠ l·ªánh gamemode ƒë·ªÉ test OP permission
      try {
        bot.chat('/gamemode survival')
        await new Promise(resolve => setTimeout(resolve, 1000))

        // N·∫øu kh√¥ng c√≥ l·ªói chat v·ªÅ permission th√¨ c√≥ OP
        if (bot.chat) { // Check if chat function is still available
          console.log('‚úÖ Bot c√≥ quy·ªÅn OP - c√≥ th·ªÉ enchant')
        } else {
           throw new Error("Chat function unavailable");
        }
      } catch (error) {
        bot.chat('ü•∫ T·ªõ kh√¥ng c√≥ quy·ªÅn OP ƒë·ªÉ enchant!')
        return
      }

      // B∆∞·ªõc 2: T√¨m c√¥ng c·ª• trong t√∫i ƒë·ªì
      const toolItem = bot.inventory.items().find(item => {
        const itemName = item.name.toLowerCase()
        const searchName = toolName.toLowerCase()
        return itemName.includes(searchName) ||
               itemName === searchName ||
               itemName.replace('_', '').includes(searchName.replace('_', ''))
      })

      if (!toolItem) {
        bot.chat(`ü•∫ Kh√¥ng c√≥ ${toolName} trong t√∫i ƒë·ªÉ enchant!`)
        bot.chat('C√≥ l·ªói r·ªìi')
        return
      }

      // B∆∞·ªõc 3: Trang b·ªã c√¥ng c·ª•
      await bot.equip(toolItem, 'hand')
      bot.chat(`‚öîÔ∏è ƒê√£ c·∫ßm ${toolItem.name}, b·∫Øt ƒë·∫ßu enchant!`)

      await new Promise(resolve => setTimeout(resolve, 1000))

      // B∆∞·ªõc 4: Enchant theo lo·∫°i c√¥ng c·ª• v·ªõi l·ªánh ƒë√∫ng ƒë·ªãnh d·∫°ng
      const itemName = toolItem.name.toLowerCase()
      let enchantSuccess = true

      if (itemName.includes('sword')) {
        // Enchant cho ki·∫øm v·ªõi delay d√†i h∆°n v√† format ƒë√∫ng
        bot.chat(`‚öîÔ∏è Enchant ki·∫øm kh√≥ ra d√≤ng x·ªãn l·∫Øm`)
        bot.chat(`/enchant sharpness 5`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant sweeping 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant looting 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant fire_aspect 2`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant knockback 2`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('helmet')) {
        // Enchant cho m≈© v·ªõi delay d√†i h∆°n
        bot.chat(`Enchant t·ªën th·ªùi gian gh√™!!`)
        bot.chat(`/enchant protection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant fireprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant blastprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant projectileprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant respiration 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant aquaaffinity 1`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('chestplate')) {
        // Enchant cho √°o gi√°p v·ªõi delay d√†i h∆°n
        bot.chat(`üõ°Ô∏è Enchant √°o gi√°p`)
        bot.chat(`/enchant protection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant fireprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant blastprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant projectileprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('leggings')) {
        // Enchant cho qu·∫ßn v·ªõi delay d√†i h∆°n
        bot.chat(`üëñ Enchant qu·∫ßn`)
        bot.chat(`/enchant protection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant fireprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant blastprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant projectileprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('boots')) {
        // Enchant cho gi√†y v·ªõi delay d√†i h∆°n
        bot.chat(`üë¢ Enchant gi√†y`)
        bot.chat(`/enchant protection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant fireprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant blastprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant projectileprotection 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant featherfalling 4`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant depthstrider 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('bow')) {
        // Enchant cho cung v·ªõi delay d√†i h∆°n
        bot.chat(`üèπ Enchant cung v·ªõi power t·ªëi ƒëa!`)
        bot.chat(`/enchant power 5`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant punch 2`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant flame 1`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant infinity 1`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('trident')) {
        // Enchant cho ƒëinh ba v·ªõi delay d√†i h∆°n
        bot.chat(`üî± Enchant ƒëinh ba v·ªõi impaling t·ªëi ƒëa!`)
        bot.chat(`/enchant impaling 5`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant loyalty 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant channeling 1`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('pickaxe')) {
        // Enchant cho cu·ªëc v·ªõi delay d√†i h∆°n
        bot.chat(`‚õèÔ∏è Enchant pickaxe`)
        bot.chat(`/enchant efficiency 5`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant fortune 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('axe')) {
        // Enchant cho r√¨u v·ªõi delay d√†i h∆°n
        bot.chat(`ü™ì Enchant r√¨u `)
        bot.chat(`/enchant efficiency 5`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant sharpness 5`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('shovel')) {
        // Enchant cho x·∫ªng v·ªõi delay d√†i h∆°n
        bot.chat(`ü•Ñ Enchant x·∫ªng`)
        bot.chat(`/enchant efficiency 5`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else if (itemName.includes('elytra')) {
        // Enchant cho c√°nh v·ªõi delay d√†i h∆°n
        bot.chat(`ü™∂ Enchant elytra!`)
        bot.chat(`/enchant unbreaking 3`)
        await new Promise(resolve => setTimeout(resolve, 1200))
        bot.chat(`/enchant mending 1`)

      } else {
        bot.chat(`ü§î Kh√¥ng bi·∫øt c√°ch enchant ${toolItem.name}`)
        enchantSuccess = false
      }

      // B∆∞·ªõc 5: Ho√†n th√†nh v·ªõi ki·ªÉm tra k·∫øt qu·∫£
      await new Promise(resolve => setTimeout(resolve, 2000))

      if (enchantSuccess) {
        bot.chat(`‚ú® Ho√†n t·∫•t enchant ${toolItem.name}! N√®`)
      } else {
        bot.chat(`ü§î Kh√¥ng th·ªÉ enchant ${toolItem.name} - kh√¥ng h·ªó tr·ª£ lo·∫°i n√†y!`)
      }
      bot.chat('C√≥ l·ªói r·ªìi')

    } catch (error) {
      console.log('‚ùå L·ªói enchant tool:', error)
      bot.chat('ü•∫ C√≥ l·ªói khi enchant!')
      bot.chat('C√≥ l·ªói r·ªìi')
    }
  }

  // ------------------ Function ki·ªÉm tra c√≥ ph·∫£i command kh√¥ng ------------------
  function isCommand(message: string): boolean {
    const commands = [
      'auto x√¢y', 'd·ª´ng x√¢y', 'stop build',
      'theo', 'b·∫£o v·ªá', 'd·ª´ng', 'stop',
      'ng·ªß', 'c·∫ßn', 'c·∫•t ƒë·ªì',
      'farm', 'auto farm all', 'spam attack',
      'auto farmer', 'crop farm', 'd·ª´ng farmer', 'stop farmer',
      't·ªõ h·ªèi n√®', 'auto c√¢u', 'fishing',
      'd·ª´ng c√¢u', 'stop fishing',

      'auto t√¨m r∆∞∆°ng', 'auto chest', 'd·ª´ng t√¨m r∆∞∆°ng', 'd·ª´ng chest', 'stop chest',
      'auto explore', 't·ª± kh√°m ph√°', 'd·ª´ng explore', 'stop explore',
      'h√£y n√≥i', 'en '
    ]

    return commands.some(cmd => message.includes(cmd))
  }

  // ------------------ Player Join Welcome ------------------
  function welcomePlayer(username: string) {
    const welcomeMessages = [
      `üéâ Ch√†o m·ª´ng ${username} ƒë·∫øn server! T·ªõ l√† bot helper ƒë√¢y~`,
      `‚ú® Xin ch√†o ${username}! C·∫ßn gi√∫p g√¨ c·ª© g·ªçi t·ªõ nh√©!`,
      `üåü Hi ${username}! T·ªõ c√≥ th·ªÉ gi√∫p c·∫≠u v·ªõi nhi·ªÅu th·ª© ƒë·∫•y!`,
      `üí´ Ch√†o ${username}! T·ªõ ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ c·∫≠u!`,
      `üéà Welcome ${username}! T·ªõ l√† bot th√¥ng minh n√®~`
    ]

    const randomMessage = welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)]

    // Delay ng·∫´u nhi√™n 1-3 gi√¢y ƒë·ªÉ t·ª± nhi√™n h∆°n
    const delay = 1000 + Math.random() * 2000
    setTimeout(() => {
      bot.chat(randomMessage)
    }, delay)
  }

  // ------------------ AI Chat Handler cho chat th∆∞·ªùng ------------------
  async function handleChatWithAI(username: string, message: string) {
    if (!geminiApiKey) {
      // Kh√¥ng chat g√¨ khi kh√¥ng c√≥ AI - im l·∫∑ng
      return
    }

    try {
      // Kh√¥ng hi·ªÉn th·ªã "ƒëang suy nghƒ©" trong game - ch·ªâ console log
      console.log(`ü§ñ AI ƒëang ph√¢n t√≠ch chat t·ª´ ${username}: "${message}"`)

      const systemPrompt = `B·∫°n l√† bot Minecraft t√™n Loli, r·∫•t ƒë√°ng y√™u v√† kawaii! ${username} n√≥i: "${message}".

H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n v·ªõi phong c√°ch:
- D√πng emoji cute: üíï üå∏ ‚ú® (‚óï‚Äø‚óï) >.<  uwu (¬¥‚àÄÔΩÄ) ‚ô° üíñ üéÄ
- X∆∞ng t·ªõ, g·ªçi c·∫≠u
- Phong c√°ch loli kawaii, ng·ªçt ng√†o
- D∆∞·ªõi 80 k√Ω t·ª± ƒë·ªÉ chat game kh√¥ng b·ªã c·∫Øt
- Th√™m t·ª´ cute nh∆∞ "n√®", "m√†", "uwu", "kyaa"
- Tr·∫£ l·ªùi ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh`

      const payload = {
        contents: [{
          parts: [{
            text: `${systemPrompt}\n\nChat: ${message}`
          }]
        }],
        generationConfig: {
          maxOutputTokens: 100,
          temperature: 0.8
        }
      }

      // FIX: Gemini API endpoint changed to v1beta and gemini-2.0-flash
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      })

      const result = await response.json()

      if (!response.ok) {
        console.log('‚ùå AI API Error:', result)
        return // Im l·∫∑ng khi c√≥ l·ªói
      }

      const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text

      if (generatedText && generatedText.trim() !== '') {
        // Tr·∫£ l·ªùi AI trong game - ch·ªâ khi c√≥ n·ªôi dung h·ª£p l·ªá
        const aiResponse = generatedText.substring(0, 80) // C·∫Øt ng·∫Øn cho chat game
        bot.chat(aiResponse)
        console.log(`üí¨ AI ƒë√£ tr·∫£ l·ªùi: "${aiResponse}"`)
      } else {
        console.log(`ü§ñ AI kh√¥ng c√≥ ph·∫£n h·ªìi ph√π h·ª£p cho: "${message}"`)
      }
    } catch (error) {
      // Im l·∫∑ng khi c√≥ l·ªói AI - kh√¥ng spam chat
      console.error(`‚ùå L·ªói AI chat v·ªõi ${username}:`, error.message || error)
    }
  }

  // ------------------ Question AI Response ------------------
  async function handleQuestionWithAI(username: string, message: string) {
    if (!geminiApiKey) {
      bot.chat('ü•∫ T·ªõ ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh Gemini AI, c·∫≠u li√™n h·ªá admin nh√©!')
      return
    }

    try {
      // Hi·ªÉn th·ªã tin nh·∫Øn ƒëang suy nghƒ©
      bot.chat('üí≠ ƒê·ªÉ t·ªõ suy nghƒ© cute cute n√®~ (‚óï‚Äø‚óï)‚ú®')

      const question = message.replace(/t·ªõ h·ªèi n√®/i, '').trim()
      const systemPrompt = `B·∫°n l√† bot Minecraft t√™n Loli, r·∫•t ƒë√°ng y√™u v√† kawaii! ${username} h·ªèi: "${question}".

H√£y tr·∫£ l·ªùi c√¢u h·ªèi n√†y v·ªõi phong c√°ch:
- D√πng nhi·ªÅu emoji cute: üíï üå∏ ‚ú® (‚óï‚Äø‚óï) >.<  uwu (¬¥‚àÄÔΩÄ) ‚ô° üíñ üéÄ
- X∆∞ng t·ªõ, g·ªçi c·∫≠u
- Phong c√°ch loli kawaii, ng·ªçt ng√†o
- D∆∞·ªõi 100 k√Ω t·ª±
- Th√™m t·ª´ cute nh∆∞ "n√®", "m√†", "uwu", "kyaa"
- H·ªØu √≠ch nh∆∞ng r·∫•t ƒë√°ng y√™u`

      const payload = {
        contents: [{
          parts: [{
            text: `${systemPrompt}\n\nC√¢u h·ªèi: ${question}`
          }]
        }],
        generationConfig: {
          maxOutputTokens: 120,
          temperature: 0.9
        }
      }

      // FIX: Gemini API endpoint changed to v1beta and gemini-2.0-flash
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      })

      const result = await response.json()

      if (!response.ok) {
        console.log('‚ùå AI API Error:', result)
        throw new Error(`API Error: ${result.error?.message || 'Unknown error'}`)
      }

      const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text

      if (generatedText && generatedText.trim() !== '') {
        // Tr·∫£ l·ªùi AI trong game - ch·ªâ khi c√≥ n·ªôi dung th·∫≠t t·ª´ AI
        const aiResponse = generatedText.substring(0, 100)
        bot.chat(aiResponse)
      } else {
        // Tr·∫£ l·ªùi ƒë∆°n gi·∫£n khi AI kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi
        bot.chat('ü•∫ T·ªõ kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi n√†y, c·∫≠u h·ªèi c√¢u kh√°c nh√©! (‚óï‚Äø‚óï)üíï')
      }
    } catch (error) {
      // Tr·∫£ l·ªùi ƒë∆°n gi·∫£n khi c√≥ l·ªói AI
      bot.chat('ü•∫ T·ªõ b·ªã l·ªói r·ªìi, c·∫≠u h·ªèi l·∫°i sau nh√©!')
      console.error('L·ªói chat AI:', error)
    }
  }

  // ------------------ Follow / Protect ------------------
  startFollowingPlayer = function(username: string) {
    // T√¨m player entity v·ªõi nhi·ªÅu c√°ch kh√°c nhau
    let playerEntity = bot.players[username]?.entity

    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo t√™n kh√¥ng c√≥ d·∫•u ch·∫•m
    if (!playerEntity && username.startsWith('.')) {
      const nameWithoutDot = username.substring(1)
      playerEntity = bot.players[nameWithoutDot]?.entity
    }

    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo t√™n c√≥ d·∫•u ch·∫•m
    if (!playerEntity && !username.startsWith('.')) {
      const nameWithDot = '.' + username
      playerEntity = bot.players[nameWithDot]?.entity
    }

    // T√¨m trong t·∫•t c·∫£ players n·∫øu v·∫´n kh√¥ng th·∫•y
    if (!playerEntity) {
      const allPlayers = Object.keys(bot.players)
      console.log(`üîç T√¨m ki·∫øm player: ${username} trong danh s√°ch:`, allPlayers)

      // T√¨m player g·∫ßn ƒë√∫ng
      for (const playerName of allPlayers) {
        if (playerName.toLowerCase().includes(username.toLowerCase()) ||
            username.toLowerCase().includes(playerName.toLowerCase())) {
          playerEntity = bot.players[playerName]?.entity
          console.log(`‚úÖ T√¨m th·∫•y player t∆∞∆°ng ·ª©ng: ${playerName}`)
          break
        }
      }
    }

    if (!playerEntity) {
      bot.chat(`ü•∫ C·∫≠u ph·∫£i ·ªü trong t·∫ßm nh√¨n c·ªßa t·ªõ th√¨ t·ªõ m·ªõi ƒëi theo ƒë∆∞·ª£c!!?`)
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y player: ${username}`)
      return
    }

    targetPlayer = playerEntity
    bot.chat(`‚ù§Ô∏è T·ªõ s·∫Ω theo c·∫≠u ƒë·∫øn c√πng tr·ªùi cu·ªëi ƒë·∫•t!`)
    stopProtecting()
    itemCollectionDisabled = false // B·∫≠t l·∫°i nh·∫∑t ƒë·ªì khi d√πng ch·ª©c nƒÉng
    startFollowing()
    console.log(`‚úÖ B·∫Øt ƒë·∫ßu theo ${username}`)
  }

  function startFollowing() {
    isFollowing = true
    if (followInterval) clearInterval(followInterval)

    let tpFailCount = 0 // ƒê·∫øm s·ªë l·∫ßn /tp th·∫•t b·∫°i
    let lastBoatCheck = 0 // Track l·∫ßn cu·ªëi ki·ªÉm tra thuy·ªÅn
    let isInBoat = false // Track tr·∫°ng th√°i ƒëang ng·ªìi thuy·ªÅn
    let lastMovementTime = 0 // Track ƒë·ªÉ gi·∫£m spam movement

    followInterval = setInterval(async () => {
      if (!targetPlayer || !targetPlayer.isValid) {
        stopFollowing()
        return
      }

      const targetPos = targetPlayer.position
      const distance = bot.entity.position.distanceTo(targetPos)
      const currentTime = Date.now()

      // TRANG B·ªä C√îNG C·ª§ PH√ôH·ª¢P KHI ƒêI THEO (kh√¥ng ph·∫£i combat) - gi·∫£m frequency
      if (currentTime % 15000 < 2000) { // M·ªói 15 gi√¢y ki·ªÉm tra 1 l·∫ßn thay v√¨ 10 gi√¢y
        equipBestToolForFollowing()
      }

      // KI·ªÇM TRA THUY·ªÄN M·ªñI 3 GI√ÇY thay v√¨ 2 gi√¢y
      if (currentTime - lastBoatCheck > 3000) {
        lastBoatCheck = currentTime

        // Ki·ªÉm tra xem player c√≥ ƒëang ng·ªìi thuy·ªÅn kh√¥ng
        const isPlayerOnBoat = targetPlayer.vehicle && targetPlayer.vehicle.name && targetPlayer.vehicle.name.includes('boat')

        // T√¨m thuy·ªÅn g·∫ßn trong b√°n k√≠nh 4 blocks
        const nearbyBoat = bot.nearestEntity((entity: any) => {
          if (!entity || !entity.position) return false
          const boatDistance = bot.entity.position.distanceTo(entity.position)
          return boatDistance <= 4 && entity.name && entity.name.includes('boat')
        })

        if (nearbyBoat && !isInBoat && isPlayerOnBoat) {
          try {
            // Di chuy·ªÉn ƒë·∫øn thuy·ªÅn v√† ng·ªìi l√™n
            const movements = new Movements(bot)
            movements.allowSprinting = true
            bot.pathfinder.setMovements(movements)
            bot.pathfinder.setGoal(new goals.GoalNear(nearbyBoat.position.x, nearbyBoat.position.y, nearbyBoat.position.z, 1))

            setTimeout(async () => {
              try {
                await bot.mount(nearbyBoat)
                isInBoat = true
                bot.chat('üõ•Ô∏è L√™n thuy·ªÅn theo c·∫≠u!')
              } catch (mountError) {
                // Silent fail
              }
            }, 1000)
          } catch (error) {
            // Silent fail ƒë·ªÉ gi·∫£m spam log
          }
        } else if (isInBoat && (!isPlayerOnBoat || distance > 4)) {
          try {
            bot.dismount()
            isInBoat = false
            bot.chat('üõ•Ô∏è Xu·ªëng thuy·ªÅn!')
          } catch (error) {
            isInBoat = false // Reset tr·∫°ng th√°i
          }
        }
      }

      // N·∫øu ƒëang ng·ªìi thuy·ªÅn v√† g·∫ßn player th√¨ kh√¥ng c·∫ßn l√†m g√¨ th√™m
      if (isInBoat && distance <= 4) {
        return
      }

      // N·∫øu qu√° xa th√¨ teleport
      if (distance > 14) {
        try {
          // Ki·ªÉm tra n·∫øu ƒë√£ th·∫•t b·∫°i qu√° nhi·ªÅu l·∫ßn
          if (tpFailCount >= 3) {
            bot.chat('ü•∫ T·ªõ kh√¥ng c√≥ quy·ªÅn /tp ƒë·ªÉ theo c·∫≠u. D·ª´ng theo d√µi!')
            stopFollowing()
            return
          }

          bot.chat(`/tp ${bot.username} ${targetPlayer.username}`)

          // Ki·ªÉm tra th√†nh c√¥ng sau 2 gi√¢y
          setTimeout(() => {
            if (!targetPlayer || !targetPlayer.isValid) return

            const newDistance = bot.entity.position.distanceTo(targetPlayer.position)
            if (newDistance > 15) { // N·∫øu v·∫´n xa th√¨ /tp th·∫•t b·∫°i
              tpFailCount++

              if (tpFailCount >= 3) {
                bot.chat('ü•∫ T·ªõ kh√¥ng c√≥ quy·ªÅn /tp. D·ª´ng theo d√µi!')
                stopFollowing()
              }
            } else {
              tpFailCount = 0 // Reset n·∫øu th√†nh c√¥ng
            }
          }, 2500)

        } catch (e) {
          tpFailCount++
          if (tpFailCount >= 3) {
            bot.chat('ü•∫ T·ªõ kh√¥ng th·ªÉ ƒë·∫øn g·∫ßn c·∫≠u! D·ª´ng theo d√µi!')
            stopFollowing()
            return
          }
        }
        return
      }

      // Reset count khi ·ªü g·∫ßn
      if (distance <= 12) {
        tpFailCount = 0
      }

      // Di chuy·ªÉn theo logic c·∫£i ti·∫øn - gi·∫£m spam movement
      if (!isInBoat && distance > 3 && currentTime - lastMovementTime > 1000) {
        lastMovementTime = currentTime

        try {
          // Setup movement m·ªõi m·ªói l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o setting ƒë√∫ng
          const movements = new Movements(bot)
          movements.canDig = distance > 10 // Ch·ªâ ƒë√†o khi c√°ch xa
          movements.allow1by1towers = true
          movements.allowParkour = true
          movements.allowSprinting = true
          movements.allowEntityDetection = true
          movements.allowFreeMotion = true
          movements.canOpenDoors = true
          movements.infiniteLiquidDropCost = 5
          movements.scafoldingBlocks = [bot.registry.itemsByName.cobblestone?.id, bot.registry.itemsByName.dirt?.id].filter(Boolean)
          bot.pathfinder.setMovements(movements)

          // S·ª≠ d·ª•ng GoalNear thay v√¨ GoalFollow ƒë·ªÉ ·ªïn ƒë·ªãnh h∆°n
          const followDistance = distance > 8 ? 3 : 2
          bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, followDistance))

        } catch (error) {
          // Silent fail ƒë·ªÉ gi·∫£m spam log
        }
      }
    }, 1500) // Gi·∫£m frequency t·ª´ 2000ms xu·ªëng 1500ms cho responsive h∆°n
  }

  stopFollowing = function() {
    isFollowing = false
    if (followInterval) clearInterval(followInterval)
    followInterval = null
    bot.pathfinder.setGoal(null)
  }

  startProtectingPlayer = function(username: string) {
    // T√¨m player entity v·ªõi nhi·ªÅu c√°ch kh√°c nhau
    let playerEntity = bot.players[username]?.entity

    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo t√™n kh√¥ng c√≥ d·∫•u ch·∫•m
    if (!playerEntity && username.startsWith('.')) {
      const nameWithoutDot = username.substring(1)
      playerEntity = bot.players[nameWithoutDot]?.entity
    }

    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo t√™n c√≥ d·∫•u ch·∫•m
    if (!playerEntity && !username.startsWith('.')) {
      const nameWithDot = '.' + username
      playerEntity = bot.players[nameWithDot]?.entity
    }

    // T√¨m trong t·∫•t c·∫£ players n·∫øu v·∫´n kh√¥ng th·∫•y
    if (!playerEntity) {
      const allPlayers = Object.keys(bot.players)
      console.log(`üîç T√¨m ki·∫øm player: ${username} trong danh s√°ch:`, allPlayers)

      // T√¨m player g·∫ßn ƒë√∫ng
      for (const playerName of allPlayers) {
        if (playerName.toLowerCase().includes(username.toLowerCase()) ||
            username.toLowerCase().includes(playerName.toLowerCase())) {
          playerEntity = bot.players[playerName]?.entity
          console.log(`‚úÖ T√¨m th·∫•y player t∆∞∆°ng ·ª©ng: ${playerName}`)
          break
        }
      }
    }

    if (!playerEntity) {
      bot.chat(`ü•∫ C·∫≠u ph·∫£i ·ªü g·∫ßn t·ªõ th√¨ t·ªõ m·ªõi b·∫£o v·ªá ƒë∆∞·ª£c!?üíû`)
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y player: ${username}`)
      return
    }

    targetPlayer = playerEntity
    bot.chat(`üõ°Ô∏è T·ªõ s·∫Ω b·∫£o v·ªá c·∫≠u kh·ªèi t·∫•t c·∫£ nguy hi·ªÉm!`)
    stopFollowing()
    itemCollectionDisabled = false // B·∫≠t l·∫°i nh·∫∑t ƒë·ªì khi d√πng ch·ª©c nƒÉng
    startProtecting()
    console.log(`‚úÖ B·∫Øt ƒë·∫ßu b·∫£o v·ªá ${username}`)
  }

  // Bi·∫øn ki·ªÉm tra quy·ªÅn OP
  let hasOpPermission: boolean | null = null
  let hasTriedOpCommand = false
  let lastOpCheckTime = 0

  function startProtecting() {
    isProtecting = true
    if (protectInterval) clearInterval(protectInterval)

    // T·∫Øt nh·∫∑t ƒë·ªì khi b·∫£o v·ªá ƒë·ªÉ t·∫≠p trung chi·∫øn ƒë·∫•u
    itemCollectionDisabled = true

    // Reset OP check khi b·∫Øt ƒë·∫ßu b·∫£o v·ªá m·ªõi
    hasOpPermission = null
    hasTriedOpCommand = false
    lastOpCheckTime = 0
    let lastMovementTime = 0 // Track ƒë·ªÉ gi·∫£m spam movement logs

    protectInterval = setInterval(async () => {
      if (!targetPlayer || !targetPlayer.isValid) {
        stopProtecting()
        return
      }

      const targetPos = targetPlayer.position
      const distanceToPlayer = bot.entity.position.distanceTo(targetPos)
      const health = bot.health
      const protectTime = Date.now()

      // Auto buff khi m√°u y·∫øu - gi·∫£m frequency check
      if (health < 8 && (protectTime - lastOpCheckTime) > 15000) { // TƒÉng l√™n 15 gi√¢y
        lastOpCheckTime = protectTime

        if (hasOpPermission === null && !hasTriedOpCommand) {
          hasTriedOpCommand = true
          bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)
          setTimeout(() => bot.chat('ƒê√≤i ƒÉn ai'), 100)

          setTimeout(() => {
            if (bot.health > health) {
              hasOpPermission = true
            } else {
              hasOpPermission = false
              bot.chat('ü•∫ T·ªõ kh√¥ng c√≥ quy·ªÅn OP ƒë·ªÉ t·ª± buff, nh∆∞ng v·∫´n b·∫£o v·ªá c·∫≠u!')
            }
          }, 3000)

        } else if (hasOpPermission === true) {
          bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)
          setTimeout(() => bot.chat(`/effect give ${bot.username} strength 5 2 true`), 100)
          setTimeout(() => bot.chat('ƒê√≤i ƒÉn ai'), 200)
        }
      }

      // T√¨m qu√°i g·∫ßn nh·∫•t - gi·∫£m ph·∫°m vi ƒë·ªÉ focused h∆°n
      let mob = bot.nearestEntity((entity: any) => {
        if (!entity || !entity.position) return false

        const distanceToMob = bot.entity.position.distanceTo(entity.position)
        if (distanceToMob > 15) return false // Gi·∫£m t·ª´ 20 xu·ªëng 15 blocks

        const hostileMobs = [
          'zombie', 'skeleton', 'creeper', 'spider', 'witch', 'pillager', 'vindicator', 'evoker',
          'husk', 'stray', 'phantom', 'drowned', 'enderman', 'breeze', 'bogged',
          'slime', 'silverfish', 'cave_spider'
        ]
        const mobName = entity.name ? entity.name.toLowerCase() : ''
        const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''

        const isHostile = hostileMobs.some(mobType =>
          mobName.includes(mobType) || displayName.includes(mobType)
        )

        const isMobType = entity.type === 'mob' &&
                         !mobName.includes('villager') &&
                         !mobName.includes('iron_golem')

        return isHostile || isMobType
      })

      // LOGIC B·∫¢O V·ªÜ C·∫¢I THI·ªÜN v·ªõi √≠t spam log h∆°n
      if (distanceToPlayer > 14) { // Gi·∫£m ng∆∞·ª°ng teleport xu·ªëng 14 blocks
        try {
          bot.chat(`/tp ${bot.username} ${targetPlayer.username}`)
          bot.pvp.stop()

          setTimeout(() => {
            if (!targetPlayer || !targetPlayer.isValid) return

            const newDistance = bot.entity.position.distanceTo(targetPlayer.position)
            if (newDistance > 15) {
              // Setup safe movement
              const movements = new Movements(bot)
              movements.canDig = true
              movements.allowSprinting = true
              bot.pathfinder.setMovements(movements)
              bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))
            }
          }, 2500)
        } catch (e) {
          // Fallback movement
          const movements = new Movements(bot)
          movements.canDig = true
          movements.allowSprinting = true
          bot.pathfinder.setMovements(movements)
          bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))
        }
      } else if (mob && health > 6 && !isEating) {
        // C√ì QU√ÅI V√Ä ƒê·ª¶ M√ÅU: T·∫§N C√îNG
        const mobDistance = bot.entity.position.distanceTo(mob.position)

        // Trang b·ªã v≈© kh√≠ ch·ªâ khi c·∫ßn thi·∫øt
        const currentWeapon = bot.heldItem
        if (!currentWeapon || !currentWeapon.name.includes('sword')) {
          equipBestSwordForCombat()
          await new Promise(resolve => setTimeout(resolve, 200))
        }

        if (distanceToPlayer > 8) {
          // Qu√° xa player, quay v·ªÅ
          bot.pvp.stop()
          const movements = new Movements(bot)
          movements.allowSprinting = true
          bot.pathfinder.setMovements(movements)
          bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))
        } else if (mobDistance > 4) {
          // Ti·∫øn ƒë·∫øn mob n·∫øu an to√†n
          const mobPos = mob.position
          const futureDistanceToPlayer = targetPlayer.position.distanceTo(mobPos)

          if (futureDistanceToPlayer <= 6) {
            const movements = new Movements(bot)
            movements.allowSprinting = true
            bot.pathfinder.setMovements(movements)
            bot.pathfinder.setGoal(new goals.GoalNear(mobPos.x, mobPos.y, mobPos.z, 2))
          } else {
            // Mob qu√° xa, ∆∞u ti√™n player
            const movements = new Movements(bot)
            movements.allowSprinting = true
            bot.pathfinder.setMovements(movements)
            bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))
          }
        } else {
          // T·∫•n c√¥ng tr·ª±c ti·∫øp
          bot.pathfinder.setGoal(null)
          bot.setControlState('sprint', true)

          if (mob && mob.isValid) {
            // Gi·∫£m spam attack t·ª´ 8 xu·ªëng 5
            for (let attack = 0; attack < 5; attack++) {
              meleeAttack(mob, mobDistance)
            }
          }
        }
      } else if (health <= 6) {
        // M√ÅU Y·∫æU: V·ªÅ g·∫ßn player
        bot.pvp.stop()
        const movements = new Movements(bot)
        movements.allowSprinting = true
        bot.pathfinder.setMovements(movements)
        bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 2))
      } else if (distanceToPlayer > 4 && protectTime - lastMovementTime > 2000) {
        // KH√îNG C√ì QU√ÅI V√Ä XA PLAYER: Di chuy·ªÉn v·ªÅ g·∫ßn - gi·∫£m spam logs
        lastMovementTime = protectTime
        bot.pvp.stop()
        const movements = new Movements(bot)
        movements.allowSprinting = true
        bot.pathfinder.setMovements(movements)
        bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 2))
      }

    }, 800) // TƒÉng interval t·ª´ 600ms l√™n 800ms ƒë·ªÉ gi·∫£m lag
  }

  stopProtecting = function() {
    isProtecting = false
    if (protectInterval) {
      clearInterval(protectInterval)
      protectInterval = null
    }

    // B·∫≠t l·∫°i nh·∫∑t ƒë·ªì khi d·ª´ng b·∫£o v·ªá
    itemCollectionDisabled = false

    bot.pvp.stop()
    bot.pathfinder.setGoal(null)
  }

  function stopAll() {
    // D·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông SILENT - kh√¥ng chat
    if (followInterval) {
      clearInterval(followInterval)
      followInterval = null
    }
    if (protectInterval) {
      clearInterval(protectInterval)
      protectInterval = null
    }

    // D·ª´ng fishing silent
    autoFishingActive = false
    autoItemCollectionDisabled = false
    autoEquipDisabled = false
    isFishing = false
    hasFishBitten = false
    if (fishingInterval) {
      clearInterval(fishingInterval)
      fishingInterval = null
    }
    if (hookCheckInterval) {
      clearInterval(hookCheckInterval)
      hookCheckInterval = null
    }

    // D·ª´ng build silent
    autoBuildActive = false
    currentBuildProject = null
    buildProgress = 0

    // D·ª´ng mining silent
    if (autoMiningActive) {
      autoMiningActive = false
      if (miningInterval) {
        clearInterval(miningInterval)
        miningInterval = null
      }
      isCurrentlyDigging = false
    }

    // D·ª´ng farm silent
    autoFarmActive = false
    if (farmInterval) clearInterval(farmInterval)

    // D·ª´ng chest hunting silent
    if (autoChestHuntingActive) {
      autoChestHuntingActive = false
      isCurrentlyApproachingChest = false
      currentChestTarget = null
      if (chestHuntingInterval) {
        clearInterval(chestHuntingInterval)
        chestHuntingInterval = null
      }
    }

    // D·ª´ng crop farmer silent
    if (autoCropFarmerActive) {
      autoCropFarmerActive = false
      currentHoeTool = null
      harvestedCrops.clear()
      if (cropFarmerInterval) {
        clearInterval(cropFarmerInterval)
        cropFarmerInterval = null
      }
    }

    // D·ª´ng PVP (g·ªçi stopPvP silent ƒë·ªÉ tr√°nh spam chat)
    if (pvpActive || pvpProActive) {
      stopPvP(true) // true = silent mode, kh√¥ng chat
    }

    // D·ª´ng auto explore silent
    if (autoExploreActive) {
      autoExploreActive = false
      exploreDirection = null
      discoveredStructures.clear()
      if (exploreInterval) {
        clearInterval(exploreInterval)
        exploreInterval = null
      }
    }

    // Reset states
    isFollowing = false
    isProtecting = false

    // D·ª´ng PVP v√† pathfinder
    try {
      bot.pvp.stop()
    } catch (e) {
      // Ignore PVP stop errors
    }

    try {
      bot.pathfinder.setGoal(null)
    } catch (e) {
      // Ignore pathfinder errors
    }

    // CH·ªà CHAT 1 L·∫¶N DUY NH·∫§T
    if (bot && bot._client && bot._client.state === 'play') {
      bot.chat(`üõë D·ª´ng t·∫•t c·∫£ r·ªìi nha c·∫≠u! üíï`)
    }
    console.log('‚èπÔ∏è D·ª´ng t·∫•t c·∫£ ho·∫°t ƒë·ªông')
  }

  // ------------------ Sleep ------------------
  async function goSleep() {
    console.log('üò¥ Y√™u c·∫ßu bot ƒëi ng·ªß')

    if (bot.time.isDay) {
      bot.chat(`‚òÄÔ∏è Tr·ªùi ƒëang s√°ng m√† c·∫≠u, ch∆∞a ƒëi ng·ªß ƒë∆∞·ª£c ƒë√¢u!`)
      return
    }

    const bedBlock = bot.findBlock({
      matching: (block: any) => {
        return block.name.includes('bed')
      },
      maxDistance: 16
    })

    if (bedBlock) {
      bot.chat(`üò¥ T·ªõ bu·ªìn ng·ªß qu√°, ƒëi ng·ªß th√¥i n√†o!`)
      try {
        await bot.sleep(bedBlock)
        bot.chat(`Zzz... üò¥`)
      } catch (err) {
        bot.chat(`üò¢ T·ªõ kh√¥ng ng·ªß ƒë∆∞·ª£c ·ªü ƒë√¢y. C·∫≠u t√¨m ch·ªó kh√°c nh√©.`)
        console.log('L·ªói ng·ªß:', err)
      }
    } else {
      bot.chat(`üõå T·ªõ kh√¥ng t√¨m th·∫•y gi∆∞·ªùng n√†o g·∫ßn ƒë√¢y c·∫£.`)
    }
  }

  // ------------------ Give Item ------------------
  function giveItemToPlayer(username: string, msg: string) {
    const match = msg.match(/c·∫ßn (\d+) (\w+)/)
    if (!match) return

    const qty = parseInt(match[1])
    const name = match[2]

    // T√¨m player entity v·ªõi nhi·ªÅu c√°ch kh√°c nhau
    let playerEntity = bot.players[username]?.entity

    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo t√™n kh√¥ng c√≥ d·∫•u ch·∫•m
    if (!playerEntity && username.startsWith('.')) {
      const nameWithoutDot = username.substring(1)
      playerEntity = bot.players[nameWithoutDot]?.entity
    }

    // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo t√™n c√≥ d·∫•u ch·∫•m
    if (!playerEntity && !username.startsWith('.')) {
      const nameWithDot = '.' + username
      playerEntity = bot.players[nameWithDot]?.entity
    }

    // T√¨m trong t·∫•t c·∫£ players n·∫øu v·∫´n kh√¥ng th·∫•y
    if (!playerEntity) {
      const allPlayers = Object.keys(bot.players)
      for (const playerName of allPlayers) {
        if (playerName.toLowerCase().includes(username.toLowerCase()) ||
            username.toLowerCase().includes(playerName.toLowerCase())) {
          playerEntity = bot.players[playerName]?.entity
          break
        }
      }
    }

    if (!playerEntity) {
      bot.chat(`ü•∫ Kh√¥ng th·∫•y c·∫≠u ƒë·ªÉ ƒë∆∞a ${name}`)
      return
    }

    const item = bot.inventory.items().find(i => i.name.includes(name))
    if (!item) {
      bot.chat(`ü•∫ Kh√¥ng c√≥ ${name}`)
      return
    }

    const throwItem = async () => {
      try {
        const distance = bot.entity.position.distanceTo(playerEntity.position)
        if (distance > 3) {
          bot.pathfinder.setGoal(new goals.GoalFollow(playerEntity, 2))
        } else {
          await bot.toss(item.type, null, qty)
          bot.chat(`üéÅ ƒê√£ n√©m ${item.name} cho ${username}`)
        }
      } catch (error) {
        console.log('L·ªói n√©m item:', error)
      }
    }

    throwItem()
  }

  // ------------------ C·∫•t ƒë·ªì v√†o r∆∞∆°ng ------------------
  async function storeItemsInChest() {
    try {
      bot.chat('üì¶ T·ªõ s·∫Ω c·∫•t T·∫§T C·∫¢ ƒë·ªì v√†o r∆∞∆°ng v√† s·∫Øp x·∫øp theo ∆∞u ti√™n!')

      // T√¨m r∆∞∆°ng g·∫ßn nh·∫•t
      const chestBlock = bot.findBlock({
        matching: (block: any) => {
          return block.name.includes('chest') ||
                 block.name.includes('barrel') ||
                 block.name.includes('shulker')
        },
        maxDistance: 32
      })

      if (!chestBlock) {
        bot.chat('ü•∫ T·ªõ kh√¥ng t√¨m th·∫•y r∆∞∆°ng n√†o g·∫ßn ƒë·ªÉ c·∫•t ƒë·ªì...')
        return
      }

      // Di chuy·ªÉn ƒë·∫øn r∆∞∆°ng
      const goal = new goals.GoalNear(chestBlock.position.x, chestBlock.position.y, chestBlock.position.z, 1)
      await bot.pathfinder.goto(goal)

      // M·ªü r∆∞∆°ng v√† c·∫•t ƒë·ªì
      await bot.lookAt(chestBlock.position, true)
      const chest = await bot.openChest(chestBlock)

      // Ph√¢n lo·∫°i ƒë·ªì theo ∆∞u ti√™n: kho√°ng s·∫£n > th·ª©c ƒÉn > block > linh tinh
      const categorizedItems = {
        minerals: [] as any[],
        food: [] as any[],
        blocks: [] as any[],
        misc: [] as any[]
      }

      // Danh s√°ch kho√°ng s·∫£n
      const minerals = ['diamond', 'emerald', 'gold', 'iron', 'coal', 'redstone', 'lapis', 'quartz', 'netherite', 'copper', 'amethyst']
      // Danh s√°ch th·ª©c ƒÉn
      const foods = ['bread', 'apple', 'meat', 'fish', 'potato', 'carrot', 'beef', 'pork', 'chicken', 'mutton', 'salmon', 'cod', 'golden_apple', 'enchanted_golden_apple', 'cookie', 'cake', 'pie', 'soup', 'stew']
      // Danh s√°ch block
      const blocks = ['stone', 'dirt', 'grass', 'wood', 'log', 'plank', 'cobblestone', 'sand', 'gravel', 'glass', 'wool', 'brick', 'concrete', 'terracotta']

      // Ph√¢n lo·∫°i items
      for (const item of bot.inventory.items()) {
        const itemName = item.name.toLowerCase()

        if (minerals.some(mineral => itemName.includes(mineral))) {
          categorizedItems.minerals.push(item)
        } else if (foods.some(food => itemName.includes(food))) {
          categorizedItems.food.push(item)
        } else if (blocks.some(block => itemName.includes(block))) {
          categorizedItems.blocks.push(item)
        } else {
          categorizedItems.misc.push(item)
        }
      }

      let storedCount = 0

      const storeCategory = async (items: any[], categoryName: string) => {
        for (const item of items) {
          try {
            await chest.deposit(item.type, null, item.count)
            storedCount++
            console.log(`üì¶ C·∫•t ${categoryName}: ${item.name} x${item.count}`)
            await new Promise(resolve => setTimeout(resolve, 100))
          } catch (error) {
            console.log('L·ªói c·∫•t', categoryName, ':', error)
          }
        }
      }

      // C·∫•t theo th·ª© t·ª± ∆∞u ti√™n
      await storeCategory(categorizedItems.minerals, 'kho√°ng s·∫£n')
      await storeCategory(categorizedItems.food, 'th·ª©c ƒÉn')
      await storeCategory(categorizedItems.blocks, 'block')
      await storeCategory(categorizedItems.misc, 'linh tinh')

      chest.close()

      bot.chat(`‚úÖ ƒê√£ c·∫•t T·∫§T C·∫¢ ${storedCount} items theo ∆∞u ti√™n:`)
      bot.chat(`üíé Kho√°ng s·∫£n: ${categorizedItems.minerals.length}`)
      bot.chat(`üçû Th·ª©c ƒÉn: ${categorizedItems.food.length}`)
      bot.chat(`üß± Block: ${categorizedItems.blocks.length}`)
      bot.chat(`üì¶ Linh tinh: ${categorizedItems.misc.length}`)

    } catch (error) {
      bot.chat('ü•∫ C√≥ l·ªói khi c·∫•t ƒë·ªì...')
      console.log('L·ªói store items:', error)
    }
  }

  // ------------------ Auto Farm All ------------------
  startAutoFarmAll = function() {
    autoFarmActive = true
    itemCollectionDisabled = false // B·∫≠t l·∫°i nh·∫∑t ƒë·ªì khi farm

    // Reset OP check cho farm mode
    hasOpPermission = null
    hasTriedOpCommand = false
    lastOpCheckTime = 0

    bot.chat('üó°Ô∏è B·∫Øt ƒë·∫ßu farm t·∫•t c·∫£ mob')

    const farmInterval = setInterval(async () => {
      if (!autoFarmActive) {
        clearInterval(farmInterval)
        return
      }

      try {
        // Trang b·ªã v≈© kh√≠ t·ªët nh·∫•t
        equipBestWeapon()

        // T√åM MOB G·∫¶N NH·∫§T TR∆Ø·ªöC TI√äN - ∆∞u ti√™n g·∫ßn nh·∫•t
        let mob = bot.nearestEntity((entity: any) => {
          if (!entity || !entity.position) return false

          const distance = bot.entity.position.distanceTo(entity.position)
          if (distance > 25) return false // Ph·∫°m vi t√¨m ki·∫øm t·ªëi ƒëa 25 blocks

          // C√°c lo·∫°i mob c·∫ßn farm - UPDATED LIST (lo·∫°i b·ªè 'horse')
          const farmableMobs = [
            'zombie', 'skeleton', 'creeper', 'spider', 'witch', 'slime',
            'cow', 'pig', 'chicken', 'sheep', 'rabbit', // Lo·∫°i b·ªè 'horse'
            'zombie_villager', 'husk', 'stray', 'phantom', 'drowned',
            'pillager', 'vindicator', 'evoker', 'ravager', 'enderman', 'xtray', 'sulked',
            'breeze', 'bogged', 'silverfish', 'cave_spider'
          ]

          const mobName = entity.name ? entity.name.toLowerCase() : ''
          const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''

          // Lo·∫°i tr·ª´ c√°c mob kh√¥ng n√™n farm
          if (mobName.includes('villager') ||
              mobName.includes('iron_golem') ||
              mobName.includes('wolf') ||
              mobName.includes('horse') ||
              entity.username) {
            return false
          }

          // Ki·ªÉm tra theo t√™n
          const isFarmable = farmableMobs.some(mobType =>
            mobName.includes(mobType) || displayName.includes(mobType)
          )

          // Ho·∫∑c ki·ªÉm tra theo type
          const isMobType = entity.type === 'mob'

          return isFarmable || isMobType
        })

        // Ki·ªÉm tra m√°u v√†s·ª≠ d·ª•ng effect n·∫øu c·∫ßn (t∆∞∆°ng t·ª± nh∆∞ protect mode)
        const health = bot.health
        const autoFarmTime = Date.now()
        if (health < 8 && (autoFarmTime - lastOpCheckTime) > 10000) { // TƒÉng l√™n 10 gi√¢y
          lastOpCheckTime = autoFarmTime

          if (hasOpPermission === null && !hasTriedOpCommand) {
            hasTriedOpCommand = true
            bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)
            setTimeout(() => bot.chat('ƒê√≤i ƒÉn ai'), 100)

            setTimeout(() => {
              if (bot.health > health) {
                hasOpPermission = true
                console.log('‚úÖ Farm mode: Bot c√≥ quy·ªÅn OP')
              } else {
                hasOpPermission = false
                console.log('‚ùå Farm mode: Bot kh√¥ng c√≥ quy·ªÅn OP')
              }
            }, 3000)

          } else if (hasOpPermission === true) {
            // AUTO FARM: LO·∫†I B·ªé speed v√† resistance - ch·ªâ d√πng regeneration v√† strength
            bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)
            setTimeout(() => bot.chat(`/effect give ${bot.username} strength 5 2 true`), 100)
            setTimeout(() => bot.chat('ƒê√≤i ƒÉn ai'), 200)
            console.log('üí™ Auto farm: Bot ƒë√£ t·ª± buff!')
          }
        }

        if (mob) {
          // Ch·ªâ log m·ªói 10 gi√¢y ƒë·ªÉ gi·∫£m spam
          const currentTime = Date.now()
          if (!lastAttackTime || currentTime - lastAttackTime > 10000) {
            console.log(`üó°Ô∏è Farming ${mob.name || mob.displayName} (${Math.round(bot.entity.position.distanceTo(mob.position))}m)`)
            lastAttackTime = currentTime
          }

          // Di chuy·ªÉn ƒë·∫øn g·∫ßn mob n·∫øu c·∫ßn
          const distance = bot.entity.position.distanceTo(mob.position)
          if (distance > 6) {
            const movements = new Movements(bot)
            movements.canDig = false // Kh√¥ng ƒë√†o khi farm
            movements.allowSprinting = true
            movements.allowParkour = true
            bot.pathfinder.setMovements(movements)

            bot.pathfinder.setGoal(new goals.GoalFollow(mob, 2))

            // ƒê·ª£i di chuy·ªÉn m·ªôt ch√∫t
            await new Promise(resolve => setTimeout(resolve, 500))
          }

          // T·∫•n c√¥ng mob g·∫ßn nh·∫•t v·ªõi ki·ªÉm tra autoBowMode
          const mobDistance = bot.entity.position.distanceTo(mob.position)

          // Bow code removed - only melee attack
          {
            // T·∫•n c√¥ng c·∫≠n chi·∫øn - gi·∫£m spam t·ª´ 15 xu·ªëng 5 l·∫ßn
            equipBestWeapon()
            bot.setControlState('sprint', true)

            if (mob && mob.isValid && mobDistance <= 7) {
              // Gi·∫£m spam attack t·ª´ 15 xu·ªëng 5 l·∫ßn ƒë·ªÉ gi·∫£m lag
              for (let attack = 0; attack < 5; attack++) {
                meleeAttack(mob, mobDistance)
              }

              // Ch·ªâ log m·ªói 5 gi√¢y
              if (!lastAttackTime || currentTime - lastAttackTime > 5000) {
                console.log(`‚öîÔ∏è Attacking ${mob.name} x5`)
              }
            }
          }

          // Thu th·∫≠p item sau khi gi·∫øt
          setTimeout(() => {
            const entities = Object.values(bot.entities)
            for (const entity of entities) {
              if (entity.name === 'item' && entity.position &&
                  bot.entity.position.distanceTo(entity.position) < 8) {
                bot.collectBlock.collect(entity).catch(() => {})
              }
            }
          }, 1000)

        } else {
          // Kh√¥ng c√≥ mob g·∫ßn, di chuy·ªÉn ng·∫´u nhi√™n ƒë·ªÉ t√¨m
          if (Math.random() < 0.3) { // 30% c∆° h·ªôi di chuy·ªÉn
            const randomX = Math.floor(Math.random() * 21) - 10
            const randomZ = Math.floor(Math.random() * 21) - 10
            const currentPos = bot.entity.position
            const goal = new goals.GoalXZ(currentPos.x + randomX, currentPos.z + randomZ)
            bot.pathfinder.setGoal(goal)
          }
        }
      } catch (error) {
        console.log('L·ªói auto farm:', error)
        bot.pathfinder.setGoal(null)
        bot.pvp.stop()
      }
    }, 1500) // Gi·∫£m t·∫ßn su·∫•t farm t·ª´ 500ms l√™n 1500ms ƒë·ªÉ gi·∫£m spam
  }

  stopAutoFarm = function() {
    autoFarmActive = false
    if (farmInterval) clearInterval(farmInterval)
    bot.pathfinder.setGoal(null)
    bot.pvp.stop()
    bot.setControlState('sprint', false)
    console.log('‚èπÔ∏è Auto Farm All - Deactivated')
  }

  // ------------------ AUTO MINING SYSTEM - IMPLEMENTED PER USER REQUIREMENTS ------------------
  startAutoMining = function(oreType: string) {
    // 1. D·ª´ng c√°c ho·∫°t ƒë·ªông kh√°c tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu mine
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopSmartAutoFishing()
    autoFarmActive = false

    autoMiningActive = true
    targetOreType = oreType.toLowerCase()
    currentMiningTarget = null
    lastMinedPosition = null

    bot.chat(`‚õèÔ∏è B·∫Øt ƒë·∫ßu auto mine ${oreType}! T·ªõ s·∫Ω t√¨m ki·∫øm trong ph·∫°m vi 128 blocks!`)
    console.log(`üî• Auto Mining ${oreType} - Activated`)

    // Clear previous interval if any
    if (miningInterval) {
      clearInterval(miningInterval)
    }

    miningInterval = setInterval(async () => {
      // Ki·ªÉm tra ngay ƒë·ªÉ ph·∫£n ·ª©ng nhanh v·ªõi l·ªánh d·ª´ng
      if (!autoMiningActive) {
        clearInterval(miningInterval!)
        miningInterval = null
        return
      }

      try {
        await executeMiningCycle()
      } catch (error) {
        console.log('‚ùå L·ªói auto mining:', error)
        bot.pathfinder.setGoal(null)
      }
    }, 3000) // 3 gi√¢y m·ªói cycle
  }

  // H√†m th·ª±c hi·ªán m·ªôt chu k·ª≥ mining theo y√™u c·∫ßu user
  async function executeMiningCycle() {
    // Check if mining is still active first
    if (!autoMiningActive) {
      console.log('‚èπÔ∏è Mining stopped, exiting cycle')
      return
    }

    // 2. Qu√©t v√† t√¨m m·ª•c ti√™u v·ªõi bot.findBlock() - ph·∫°m vi 128 blocks
    if (isCurrentlyDigging) {
      return // B·ªè qua n·∫øu ƒëang ƒë√†o
    }

    // Ki·ªÉm tra t√∫i ƒë·ªì ƒë·∫ßy - edge case handling
    const inventoryFull = bot.inventory.emptySlotCount() <= 2
    if (inventoryFull) {
      bot.chat('üéí T√∫i ƒë·ªì ƒë·∫ßy r·ªìi! D·ª´ng auto mine!')
      stopAutoMining()
      return
    }

    // Ki·ªÉm tra ƒë√≥i - CH·ªà ƒê·ªîI SANG TH·ª®C ƒÇN KHI TH·ª∞C S·ª∞ ƒê√ìI
    const food = bot.food
    if (food < 6) { // Ch·ªâ khi ƒë√≥i d∆∞·ªõi 6 (3 ƒë√πi)
      const safeFood = bot.inventory.items().find(item => {
        const name = item.name.toLowerCase()
        const safeItems = [
          'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',
          'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',
          'golden_apple', 'enchanted_golden_apple', 'cooked_mutton',
          'cookie', 'melon_slice', 'sweet_berries'
        ]
        return safeItems.some(safe => name.includes(safe))
      })

      if (safeFood && !isEating) {
        console.log(`üçû Mining: ƒê√≥i (${food}/20), ƒÉn ${safeFood.name} tr∆∞·ªõc khi ti·∫øp t·ª•c`)
        isEating = true

        try {
          await bot.equip(safeFood, 'hand')
          await bot.consume()
          console.log(`‚úÖ ƒê√£ ƒÉn ${safeFood.name}, ti·∫øp t·ª•c mining`)
          isEating = false

          // Trang b·ªã l·∫°i pickaxe sau khi ƒÉn
          await equipBestPickaxe()
        } catch (eatError) {
          console.log('‚ö†Ô∏è L·ªói ƒÉn:', eatError.message)
          isEating = false
        }
        return // B·ªè qua cycle n√†y ƒë·ªÉ ƒÉn
      }
    }

    // Trang b·ªã pickaxe t·ªët nh·∫•t (ch·ªâ khi kh√¥ng ƒëang ƒÉn)
    if (!isEating) {
      if (!await equipBestPickaxe()) {
        bot.chat('ü•∫ Kh√¥ng c√≥ pickaxe ƒë·ªÉ ƒë√†o!')
        stopAutoMining()
        return
      }
    }

    // T√¨m block qu·∫∑ng - s·ª≠ d·ª•ng bot.findBlock() nh∆∞ y√™u c·∫ßu
    const oreBlock = bot.findBlock({
      matching: (block: any) => {
        if (!block) return false
        return isTargetOreType(block, targetOreType)
      },
      maxDistance: 128, // ƒê√∫ng nh∆∞ y√™u c·∫ßu user - ph·∫°m vi 128 blocks
      useExtraInfo: true,
      count: 1 // T√¨m 1 block m·ªôt l·∫ßn nh∆∞ y√™u c·∫ßu user
    })

    if (oreBlock) {
      // Reset search khi t√¨m th·∫•y
      console.log(`‚õèÔ∏è T√¨m th·∫•y ${oreBlock.name} t·∫°i (${oreBlock.position.x}, ${oreBlock.position.y}, ${oreBlock.position.z})`)

      // 3. T√≠nh to√°n v√† di chuy·ªÉn ƒë·∫øn m·ª•c ti√™u - ƒë√†o t·ª´ng block m·ªôt
      await approachAndDigTarget(oreBlock)

    } else {
      // 4. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát - kh√¥ng t√¨m th·∫•y qu·∫∑ng
      console.log(`üîç Kh√¥ng t√¨m th·∫•y ${targetOreType} trong ph·∫°m vi 128 blocks`)

      // Di chuy·ªÉn ng·∫´u nhi√™n ƒë·ªÉ kh√°m ph√° v√πng m·ªõi
      await exploreRandomDirection()
    }
  }

  // Ki·ªÉm tra xem block c√≥ ph·∫£i l√† lo·∫°i qu·∫∑ng ƒë√≠ch kh√¥ng
  function isTargetOreType(block: any, oreType: string): boolean {
    const blockName = block.name.toLowerCase()

    // Mapping c√°c t√™n qu·∫∑ng Minecraft
    const oreMapping: { [key: string]: string[] } = {
      'diamond': ['diamond_ore', 'deepslate_diamond_ore'],
      'iron': ['iron_ore', 'deepslate_iron_ore'],
      'gold': ['gold_ore', 'deepslate_gold_ore', 'nether_gold_ore'],
      'coal': ['coal_ore', 'deepslate_coal_ore'],
      'copper': ['copper_ore', 'deepslate_copper_ore'],
      'emerald': ['emerald_ore', 'deepslate_emerald_ore'],
      'redstone': ['redstone_ore', 'deepslate_redstone_ore'],
      'lapis': ['lapis_ore', 'deepslate_lapis_ore'],
      'netherite': ['ancient_debris'],
      'ancient_debris': ['ancient_debris']
    }

    const targetOres = oreMapping[oreType] || [oreType + '_ore', 'deepslate_' + oreType + '_ore']
    return targetOres.some(ore => blockName.includes(ore))
  }

  // Trang b·ªã pickaxe t·ªët nh·∫•t v·ªõi ∆∞u ti√™n t·ª´ x·ªãn ƒë·∫øn c√πi
  async function equipBestPickaxe(): Promise<boolean> {
    try {
      // T√¨m t·∫•t c·∫£ pickaxe trong inventory
      const pickaxes = bot.inventory.items().filter(item => item.name.includes('pickaxe'))

      if (pickaxes.length > 0) {
        // ∆Øu ti√™n t·ª´ x·ªãn ƒë·∫øn c√πi: netherite > diamond > iron > stone > wooden
        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden', 'wood']
        let bestPickaxe = null

        // T√¨m pickaxe t·ªët nh·∫•t theo th·ª© t·ª± ∆∞u ti√™n
        for (const material of priority) {
          const pickaxe = pickaxes.find(p => p.name.includes(material))
          if (pickaxe) {
            bestPickaxe = pickaxe
            break
          }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y theo priority, l·∫•y c√°i ƒë·∫ßu ti√™n
        if (!bestPickaxe) {
          bestPickaxe = pickaxes[0]
        }

        // Ch·ªâ trang b·ªã n·∫øu ch∆∞a c·∫ßm pickaxe n√†y
        if (!bot.heldItem || bot.heldItem.name !== bestPickaxe.name) {
          await bot.equip(bestPickaxe, 'hand')
          console.log(`‚õèÔ∏è Trang b·ªã ${bestPickaxe.name} ƒë·ªÉ ƒë√†o`)
        }
        return true
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ pickaxe n√†o trong inventory!')
        return false
      }
    } catch (error) {
      console.log('‚ùå L·ªói trang b·ªã pickaxe:', error.message || error)
      return false
    }
  }

  // 3. Di chuy·ªÉn ƒë·∫øn m·ª•c ti√™u v√† ƒë√†o - c·∫£i thi·ªán ƒë·ªÉ tr√°nh l·ªói "Digging aborted"
  async function approachAndDigTarget(oreBlock: any) {
    // Check if mining is still active
    if (!autoMiningActive) {
      console.log('‚èπÔ∏è Mining stopped during approach, aborting')
      return
    }

    try {
      isCurrentlyDigging = true
      currentMiningTarget = oreBlock

      // ƒê·∫£m b·∫£o ƒëang c·∫ßm pickaxe tr∆∞·ªõc khi ƒë√†o
      if (!bot.heldItem || !bot.heldItem.name.includes('pickaxe')) {
        console.log('‚õèÔ∏è Trang b·ªã pickaxe tr∆∞·ªõc khi ƒë√†o...')
        if (!await equipBestPickaxe()) {
          console.log('‚ùå Kh√¥ng c√≥ pickaxe, b·ªè qua block n√†y')
          return
        }
      }

      const distance = bot.entity.position.distanceTo(oreBlock.position)

      // Di chuy·ªÉn g·∫ßn target n·∫øu c·∫ßn - t·ªëi ∆∞u h√≥a pathfinding
      if (distance > 3.5) {
        console.log(`üö∂ Di chuy·ªÉn ƒë·∫øn qu·∫∑ng (${Math.round(distance)} blocks away)`)

        // D·ª´ng t·∫•t c·∫£ pathfinding tr∆∞·ªõc khi thi·∫øt l·∫≠p m·ªõi
        bot.pathfinder.setGoal(null)
        await new Promise(resolve => setTimeout(resolve, 200))

        // Thi·∫øt l·∫≠p pathfinder c·∫£i thi·ªán
        const movements = new Movements(bot)
        movements.canDig = true
        movements.digCost = 1   // Gi·∫£m cost ƒë·ªÉ ƒë√†o nhanh h∆°n
        movements.allow1by1towers = true
        movements.allowParkour = true
        movements.allowSprinting = false  // T·∫Øt sprint khi ƒë√†o ƒë·ªÉ ch√≠nh x√°c h∆°n
        movements.blocksCantBreak.clear()
        movements.blocksCantBreak.add(bot.registry.blocksByName.bedrock?.id || 0)
        movements.blocksCantBreak.add(bot.registry.blocksByName.barrier?.id || 0)
        movements.scafoldingBlocks = [bot.registry.itemsByName.cobblestone?.id, bot.registry.itemsByName.dirt?.id].filter(Boolean)
        bot.pathfinder.setMovements(movements)

        // Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ t·ªëi ∆∞u (g·∫ßn h∆°n)
        const goal = new goals.GoalNear(oreBlock.position.x, oreBlock.position.y, oreBlock.position.z, 1.5)
        bot.pathfinder.setGoal(goal)

        // ƒê·ª£i di chuy·ªÉn v·ªõi timeout ng·∫Øn h∆°n
        await new Promise(resolve => setTimeout(resolve, 2000))

        // D·ª´ng pathfinder tr∆∞·ªõc khi ƒë√†o
        bot.pathfinder.setGoal(null)
        await new Promise(resolve => setTimeout(resolve, 300))
      }

      // Ki·ªÉm tra block v·∫´n t·ªìn t·∫°i v√† c√≥ th·ªÉ ƒë√†o ƒë∆∞·ª£c
      const currentBlock = bot.blockAt(oreBlock.position)
      if (!currentBlock || currentBlock.name === 'air' || currentBlock.name !== oreBlock.name) {
        console.log(`‚ö†Ô∏è Block ${oreBlock.name} ƒë√£ b·ªã ƒë√†o ho·∫∑c kh√¥ng t·ªìn t·∫°i`)
        lastMinedPosition = { ...oreBlock.position, timestamp: Date.now() }
        return
      }

      // Ki·ªÉm tra kho·∫£ng c√°ch cu·ªëi c√πng
      const finalDistance = bot.entity.position.distanceTo(oreBlock.position)
      if (finalDistance > 5) {
        console.log(`‚ö†Ô∏è Qu√° xa ƒë·ªÉ ƒë√†o (${finalDistance.toFixed(1)} blocks), b·ªè qua`)
        return
      }

      // Chu·∫©n b·ªã ƒë√†o: nh√¨n v·ªÅ ph√≠a block v√† ƒë·ª©ng y√™n
      console.log(`‚õèÔ∏è B·∫Øt ƒë·∫ßu ƒë√†o ${oreBlock.name}...`)
      bot.setControlState('forward', false)
      bot.setControlState('back', false)
      bot.setControlState('left', false)
      bot.setControlState('right', false)
      bot.setControlState('sprint', false)

      await bot.lookAt(oreBlock.position.offset(0.5, 0.5, 0.5), true)
      await new Promise(resolve => setTimeout(resolve, 500))

      // Ki·ªÉm tra l·∫°i pickaxe tr∆∞·ªõc khi ƒë√†o
      if (!bot.heldItem || !bot.heldItem.name.includes('pickaxe')) {
        await equipBestPickaxe()
        await new Promise(resolve => setTimeout(resolve, 300))
      }

      // ƒê√†o v·ªõi improved error handling
      let digSuccess = false
      for (let attempt = 0; attempt < 3; attempt++) {
        // Check if mining is still active before each attempt
        if (!autoMiningActive) {
          console.log('‚èπÔ∏è Mining stopped during dig attempts, aborting')
          break
        }

        try {
          const digBlock = bot.blockAt(oreBlock.position)
          if (!digBlock || digBlock.name === 'air') {
            console.log(`‚ö†Ô∏è Block ƒë√£ bi·∫øn m·∫•t trong l√∫c ƒë√†o`)
            break
          }

          console.log(`‚õèÔ∏è Th·ª≠ ƒë√†o l·∫ßn ${attempt + 1}...`)

          // ƒê√†o v·ªõi timeout ng·∫Øn h∆°n cho m·ªói attempt
          const digPromise = bot.dig(digBlock)
          const timeoutPromise = new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Dig timeout')), 8000)
          )

          await Promise.race([digPromise, timeoutPromise])
          console.log(`‚úÖ ƒê√£ ƒë√†o xong ${oreBlock.name}!`)
          digSuccess = true
          break

        } catch (digError) {
          const errorMsg = digError.message || digError.toString()

          if (errorMsg.includes('Digging aborted') || errorMsg.includes('aborted')) {
            console.log(`‚ö†Ô∏è ƒê√†o b·ªã h·ªßy l·∫ßn ${attempt + 1}, th·ª≠ l·∫°i...`)

            // Reset tr·∫°ng th√°i v√† th·ª≠ l·∫°i
            try {
              bot.stopDigging()
            } catch (e) {}

            await new Promise(resolve => setTimeout(resolve, 500))

            // Trang b·ªã l·∫°i pickaxe v√† ƒëi·ªÅu ch·ªânh v·ªã tr√≠
            await equipBestPickaxe()
            await bot.lookAt(oreBlock.position.offset(0.5, 0.5, 0.5), true)
            await new Promise(resolve => setTimeout(resolve, 300))

          } else if (errorMsg.includes('Dig timeout')) {
            console.log(`‚è∞ Timeout l·∫ßn ${attempt + 1}`)
            try {
              bot.stopDigging()
            } catch (e) {}
            await new Promise(resolve => setTimeout(resolve, 200))
          } else {
            console.log(`‚ùå L·ªói ƒë√†o l·∫ßn ${attempt + 1}: ${errorMsg}`)
            break
          }
        }
      }

      if (!digSuccess) {
        console.log(`‚ùå Kh√¥ng th·ªÉ ƒë√†o ${oreBlock.name} sau 3 l·∫ßn th·ª≠`)
        bot.chat('üòµ Block n√†y kh√≥ ƒë√†o qu√°, t·ªõ b·ªè qua nh√©!')
      }

      // L∆∞u v·ªã tr√≠ ƒë√£ ƒë√†o ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
      lastMinedPosition = { ...oreBlock.position, timestamp: Date.now() }

      // Thu th·∫≠p items r∆°i
      await collectDroppedItems(oreBlock.position)

    } catch (error) {
      console.log('‚ùå L·ªói approach and dig:', error.message || error)
      try {
        bot.stopDigging()
      } catch (e) {}

      // L∆∞u v·ªã tr√≠ l·ªói ƒë·ªÉ kh√¥ng th·ª≠ l·∫°i
      lastMinedPosition = { ...oreBlock.position, timestamp: Date.now() }
    } finally {
      isCurrentlyDigging = false
      currentMiningTarget = null

      // Reset control states
      bot.setControlState('forward', false)
      bot.setControlState('back', false)
      bot.setControlState('left', false)
      bot.setControlState('right', false)
      bot.setControlState('sprint', false)
    }
  }

  // Thu th·∫≠p items r∆°i sau khi ƒë√†o
  async function collectDroppedItems(digPosition: any) {
    console.log('üéÅ Thu th·∫≠p items...')
    await new Promise(resolve => setTimeout(resolve, 1000))

    try {
      const entities = Object.values(bot.entities)
      const nearbyItems = entities
        .filter(entity => entity.name === 'item' && entity.position)
        .filter(entity => {
          const distance = digPosition.distanceTo(entity.position!)
          return distance < 8
        })
        .sort((a, b) => {
          const distA = digPosition.distanceTo(a.position!)
          const distB = digPosition.distanceTo(b.position!)
          return distA - distB
        })

      let itemsCollected = 0
      for (const entity of nearbyItems.slice(0, 3)) {
        try {
          await bot.collectBlock.collect(entity)
          itemsCollected++
          await new Promise(resolve => setTimeout(resolve, 300))
        } catch (collectError) {
          // B·ªè qua l·ªói thu th·∫≠p
        }
      }

      if (itemsCollected > 0) {
        console.log(`‚úÖ Thu th·∫≠p ${itemsCollected} items`)
      }
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói thu th·∫≠p items:', error)
    }
  }

  // Kh√°m ph√° ng·∫´u nhi√™n khi kh√¥ng t√¨m th·∫•y qu·∫∑ng
  async function exploreRandomDirection() {
    if (Math.random() < 0.4) { // 40% c∆° h·ªôi di chuy·ªÉn
      const distance = 20 + Math.random() * 15 // 20-35 blocks
      const angle = Math.random() * Math.PI * 2
      const currentPos = bot.entity.position

      const targetX = currentPos.x + Math.cos(angle) * distance
      const targetZ = currentPos.z + Math.sin(angle) * distance

      console.log(`üîç Kh√°m ph√° v√πng m·ªõi ƒë·ªÉ t√¨m ${targetOreType}...`)

      const movements = new Movements(bot)
      movements.canDig = true
      movements.digCost = 3
      bot.pathfinder.setMovements(movements)

      const goal = new goals.GoalXZ(targetX, targetZ)
      bot.pathfinder.setGoal(goal)

      await new Promise(resolve => setTimeout(resolve, 2000))
    }
  }

  // 5. L·ªánh d·ª´ng auto mining
  stopAutoMining = function() {
    console.log('üõë Stopping auto mining...')

    // Set flags first to stop all activities immediately
    autoMiningActive = false
    targetOreType = ''
    currentMiningTarget = null
    isCurrentlyDigging = false
    lastMinedPosition = null

    // Clear interval immediately
    if (miningInterval) {
      clearInterval(miningInterval)
      miningInterval = null
      console.log('‚úÖ Mining interval cleared')
    }

    // Stop digging immediately
    try {
      if (bot.targetDigBlock) {
        bot.stopDigging()
        console.log('‚úÖ Stopped current digging')
      }
    } catch (error) {
      // Ignore stop digging error
    }

    // Stop pathfinding
    try {
      bot.pathfinder.setGoal(null)
      console.log('‚úÖ Pathfinder cleared')
    } catch (error) {
      // Ignore pathfinder error
    }

    // Reset control states
    try {
      bot.setControlState('forward', false)
      bot.setControlState('back', false)
      bot.setControlState('left', false)
      bot.setControlState('right', false)
      bot.setControlState('sprint', false)
    } catch (error) {
      // Ignore control state errors
    }

    // Ch·ªâ chat khi ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
    if (!arguments[0] && bot && bot._client && bot._client.state === 'play') {
      bot.chat('‚õèÔ∏è D·ª´ng auto mine r·ªìi nha!')
    }
    console.log('‚èπÔ∏è Auto Mining - Deactivated completely')
  }

  // ------------------ AUTO CROP FARMING SYSTEM ------------------

  // Function to find and equip best hoe
  async function equipBestHoe(): Promise<boolean> {
    try {
      const hoes = bot.inventory.items().filter(item => item.name.includes('hoe'))

      if (hoes.length > 0) {
        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden', 'wood']
        let bestHoe = hoes[0]

        for (const material of priority) {
          const hoe = hoes.find(h => h.name.includes(material))
          if (hoe) {
            bestHoe = hoe
            break
          }
        }

        if (!bot.heldItem || bot.heldItem.name !== bestHoe.name) {
          await bot.equip(bestHoe, 'hand')
          console.log(`üåæ ƒê√£ trang b·ªã ${bestHoe.name}`)
        }
        currentHoeTool = bestHoe
        return true
      } else {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y cu·ªëc (hoe) trong t√∫i ƒë·ªì')
        return false
      }
    } catch (error) {
      console.log('‚ùå L·ªói trang b·ªã cu·ªëc:', error)
      return false
    }
  }

  // Check if crop is mature
  function isCropMature(block: any): boolean {
    if (!block || !block.name) return false

    const blockName = block.name.toLowerCase()

    // Get age from block metadata - use different methods
    let cropAge = -1
    try {
      // Method 1: Try getProperties() if available
      if (block.getProperties && typeof block.getProperties === 'function') {
        const props = block.getProperties()
        if (props && props.age !== undefined) {
          cropAge = props.age
        }
      }

      // Method 2: Try direct metadata access
      if (cropAge === -1 && block.metadata !== undefined) {
        cropAge = block.metadata
      }

      // Method 3: Check block state
      if (cropAge === -1 && block.stateId !== undefined) {
        // For wheat/carrots/potatoes: stateId represents age directly in many cases
        // This is a simplified check - stateId contains encoded block data
        cropAge = block.stateId % 8 // Age is typically stored in lower 3 bits
      }
    } catch (error) {
      console.log('‚ö†Ô∏è L·ªói l·∫•y crop age:', error)
      return false
    }

    console.log(`üåæ Checking crop: ${blockName}, age: ${cropAge}`)

    // Wheat, carrots, potatoes need age 7
    if (blockName.includes('wheat') || blockName.includes('carrots') || blockName.includes('potatoes')) {
      return cropAge === 7
    }

    // Beetroot needs age 3
    if (blockName.includes('beetroots')) {
      return cropAge === 3
    }

    // Nether wart needs age 3
    if (blockName.includes('nether_wart')) {
      return cropAge === 3
    }

    return false
  }

  // Find seeds in inventory
  function findSeeds(): any {
    const seeds = bot.inventory.items().find(item => {
      const name = item.name.toLowerCase()
      return name.includes('wheat_seeds') ||
             name.includes('carrot') ||
             name.includes('potato') ||
             name.includes('beetroot_seeds') ||
             name.includes('nether_wart')
    })
    return seeds
  }

  // Find bone meal in inventory
  function findBoneMeal(): any {
    return bot.inventory.items().find(item =>
      item.name.toLowerCase().includes('bone_meal')
    )
  }

  // Start auto crop farming
  startAutoCropFarmer = function() {
    // Stop other activities
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopSmartAutoFishing()
    if (autoFarmActive) stopAutoFarm()
    if (autoMiningActive) stopAutoMining()
    if (autoChestHuntingActive) stopAutoChestHunting()

    autoCropFarmerActive = true
    harvestedCrops.clear()

    bot.chat('üåæ B·∫Øt ƒë·∫ßu auto farmer! T·ªõ s·∫Ω thu ho·∫°ch v√† tr·ªìng c√¢y!')
    console.log('üåæ Auto Crop Farmer - Activated')

    // Clear previous interval if exists
    if (cropFarmerInterval) {
      clearInterval(cropFarmerInterval)
    }

    cropFarmerInterval = setInterval(async () => {
      if (!autoCropFarmerActive) {
        clearInterval(cropFarmerInterval!)
        cropFarmerInterval = null
        return
      }

      try {
        await executeCropFarmingCycle()
      } catch (error) {
        console.log('‚ùå L·ªói auto crop farming:', error)
        bot.pathfinder.setGoal(null)
      }
    }, 2000) // Every 2 seconds
  }

  // Execute one crop farming cycle
  async function executeCropFarmingCycle() {
    if (!autoCropFarmerActive) return

    // Step 1: Check and equip hoe
    if (!await equipBestHoe()) {
      bot.chat('ü•∫ Kh√¥ng t√¨m th·∫•y cu·ªëc (hoe). D·ª´ng auto farmer!')
      stopAutoCropFarmer()
      return
    }

    // Step 2: Find and harvest mature crops
    console.log('üîç ƒêang t√¨m c√¢y tr·ªìng ch√≠n trong v√≤ng 32 blocks...')

    // First, scan for ANY crops to debug
    const anyCrop = bot.findBlock({
      matching: (block: any) => {
        if (!block) return false
        const blockName = block.name.toLowerCase()
        return blockName.includes('wheat') ||
               blockName.includes('carrots') ||
               blockName.includes('potatoes') ||
               blockName.includes('beetroots')
      },
      maxDistance: 32,
      count: 1
    })

    if (anyCrop) {
      console.log(`‚úÖ T√¨m th·∫•y c√¢y tr·ªìng: ${anyCrop.name} t·∫°i (${anyCrop.position.x}, ${anyCrop.position.y}, ${anyCrop.position.z})`)
    } else {
      console.log('‚ùå KH√îNG t√¨m th·∫•y b·∫•t k·ª≥ c√¢y tr·ªìng n√†o trong 32 blocks!')
    }

    // Now find mature crops - skip immature ones silently
    const matureCrop = bot.findBlock({
      matching: (block: any) => {
        if (!block || !block.position) return false
        const blockName = block.name.toLowerCase()
        const isCrop = blockName.includes('wheat') ||
                      blockName.includes('carrots') ||
                      blockName.includes('potatoes') ||
                      blockName.includes('beetroots')
        if (!isCrop) return false

        // Check if mature, skip silently if not
        const mature = isCropMature(block)
        return mature
      },
      maxDistance: 32,
      count: 1
    })

    if (matureCrop) {
      const posKey = `${matureCrop.position.x},${matureCrop.position.y},${matureCrop.position.z}`
      if (!harvestedCrops.has(posKey)) {
        console.log(`üåæ T√¨m th·∫•y c√¢y ch√≠n t·∫°i (${matureCrop.position.x}, ${matureCrop.position.y}, ${matureCrop.position.z})`)

        // Move to crop
        const movements = new Movements(bot)
        movements.canDig = false
        bot.pathfinder.setMovements(movements)

        try {
          await bot.pathfinder.goto(new goals.GoalNear(matureCrop.position.x, matureCrop.position.y, matureCrop.position.z, 1))

          // Harvest the crop
          await bot.dig(matureCrop)
          console.log(`‚úÖ ƒê√£ thu ho·∫°ch ${matureCrop.name}`)
          harvestedCrops.add(posKey)

          // Collect dropped items
          await new Promise(resolve => setTimeout(resolve, 500))
          const entities = Object.values(bot.entities)
          for (const entity of entities) {
            if (entity.name === 'item' && entity.position &&
                bot.entity.position.distanceTo(entity.position) < 5) {
              bot.collectBlock.collect(entity).catch(() => {})
            }
          }

          return // Process one crop per cycle
        } catch (error) {
          console.log('‚ùå L·ªói thu ho·∫°ch:', error)
        }
      } else {
        console.log('‚è≠Ô∏è C√¢y n√†y ƒë√£ thu ho·∫°ch r·ªìi, t√¨m c√¢y kh√°c...')
      }
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c√¢y ch√≠n n√†o, t√¨m ƒë·∫•t tr·ªëng ƒë·ªÉ tr·ªìng...')
    }

    // Step 3: Find empty farmland and plant seeds
    console.log('üîç ƒêang t√¨m ƒë·∫•t tr·ªëng ƒë·ªÉ tr·ªìng h·∫°t...')
    const emptyFarmland = bot.findBlock({
      matching: (block: any) => {
        if (!block || block.name !== 'farmland') return false
        if (!block.position) return false // Check position exists

        // Check if there's no crop above it - with null safety
        try {
          const blockAbove = bot.blockAt(block.position.offset(0, 1, 0))
          return blockAbove && blockAbove.name === 'air'
        } catch (error) {
          return false
        }
      },
      maxDistance: 32,
      count: 1
    })

    if (emptyFarmland) {
      const seeds = findSeeds()
      if (seeds) {
        console.log(`üå± T√¨m th·∫•y ƒë·∫•t tr·ªëng t·∫°i (${emptyFarmland.position.x}, ${emptyFarmland.position.y}, ${emptyFarmland.position.z})`)

        try {
          // Move to farmland
          await bot.pathfinder.goto(new goals.GoalNear(emptyFarmland.position.x, emptyFarmland.position.y, emptyFarmland.position.z, 1))

          // Equip seeds
          await bot.equip(seeds, 'hand')

          // Plant on the farmland
          const plantPosition = emptyFarmland.position.offset(0, 1, 0)
          await bot.placeBlock(emptyFarmland, new Vec3(0, 1, 0))
          console.log(`‚úÖ ƒê√£ tr·ªìng ${seeds.name}`)

          // Optional: Use bone meal if available
          const boneMeal = findBoneMeal()
          if (boneMeal) {
            await new Promise(resolve => setTimeout(resolve, 300))
            const plantedBlock = bot.blockAt(plantPosition)
            if (plantedBlock && plantedBlock.name !== 'air') {
              try {
                await bot.equip(boneMeal, 'hand')
                await bot.activateBlock(plantedBlock)
                console.log(`üíö ƒê√£ b√≥n ph√¢n cho c√¢y`)
              } catch (error) {
                // Bone meal might fail, that's ok
              }
            }
          }

          // Re-equip hoe
          await equipBestHoe()
          return
        } catch (error) {
          console.log('‚ùå L·ªói tr·ªìng c√¢y:', error)
        }
      } else {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y h·∫°t gi·ªëng ƒë·ªÉ tr·ªìng')
      }
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ƒë·∫•t tr·ªëng ƒë·ªÉ tr·ªìng')
    }

    // Step 4: Check inventory and store items if needed
    const inventorySpace = bot.inventory.emptySlotCount()
    if (inventorySpace <= 3) {
      console.log('üéí T√∫i ƒë·ªì g·∫ßn ƒë·∫ßy, t√¨m r∆∞∆°ng ƒë·ªÉ c·∫•t...')

      const chest = bot.findBlock({
        matching: (block: any) => block && (block.name === 'chest' || block.name === 'barrel'),
        maxDistance: 32,
        count: 1
      })

      if (chest) {
        try {
          await bot.pathfinder.goto(new goals.GoalNear(chest.position.x, chest.position.y, chest.position.z, 1))
          const chestContainer = await bot.openContainer(chest)

          // Store crops and excess seeds, keep hoe and some seeds/bone meal
          const itemsToStore = bot.inventory.items().filter(item => {
            const name = item.name.toLowerCase()
            if (name.includes('hoe')) return false // Keep hoe
            if (name.includes('bone_meal') && item.count <= 16) return false // Keep some bone meal
            if (name.includes('seeds') && item.count <= 16) return false // Keep some seeds
            if (name.includes('carrot') && item.count <= 16) return false
            if (name.includes('potato') && item.count <= 16) return false
            return true
          })

          for (const item of itemsToStore) {
            try {
              await chestContainer.deposit(item.type, null, item.count)
              console.log(`üì¶ ƒê√£ c·∫•t ${item.name} x${item.count}`)
              await new Promise(resolve => setTimeout(resolve, 100))
            } catch (error) {
              console.log('‚ùå L·ªói c·∫•t ƒë·ªì:', error)
            }
          }

          chestContainer.close()
          bot.chat('‚úÖ ƒê√£ c·∫•t ƒë·ªì v√†o r∆∞∆°ng!')
        } catch (error) {
          console.log('‚ùå Kh√¥ng th·ªÉ m·ªü r∆∞∆°ng:', error)
          bot.chat('ü•∫ Kh√¥ng t√¨m th·∫•y r∆∞∆°ng ho·∫∑c r∆∞∆°ng ƒë·∫ßy. D·ª´ng auto farmer!')
          stopAutoCropFarmer()
        }
      } else {
        bot.chat('ü•∫ Kh√¥ng t√¨m th·∫•y r∆∞∆°ng. D·ª´ng auto farmer!')
        stopAutoCropFarmer()
      }
    }
  }

  // Stop auto crop farming
  stopAutoCropFarmer = function() {
    console.log('üõë Stopping auto crop farmer...')

    autoCropFarmerActive = false
    currentHoeTool = null
    harvestedCrops.clear()

    if (cropFarmerInterval) {
      clearInterval(cropFarmerInterval)
      cropFarmerInterval = null
    }

    try {
      bot.pathfinder.setGoal(null)
    } catch (error) {
      // Ignore
    }

    bot.chat('üåæ D·ª´ng auto farmer r·ªìi!')
    console.log('‚èπÔ∏è Auto Crop Farmer - Deactivated')
  }

  // ------------------ AUTO EXPLORE SYSTEM ------------------

  // Minecraft structure signatures - 2 block patterns to identify structures
  const STRUCTURE_SIGNATURES = {
    'Village': [
      { blocks: ['oak_planks', 'cobblestone'], pattern: 'adjacent' },
      { blocks: ['oak_log', 'oak_planks'], pattern: 'vertical' },
      { blocks: ['hay_block', 'oak_planks'], pattern: 'adjacent' }
    ],
    'Desert Temple': [
      { blocks: ['sandstone', 'orange_terracotta'], pattern: 'adjacent' },
      { blocks: ['chiseled_sandstone', 'sandstone'], pattern: 'vertical' }
    ],
    'Jungle Temple': [
      { blocks: ['mossy_cobblestone', 'cobblestone'], pattern: 'adjacent' },
      { blocks: ['cobblestone', 'vine'], pattern: 'adjacent' }
    ],
    'Witch Hut': [
      { blocks: ['oak_planks', 'spruce_planks'], pattern: 'adjacent' },
      { blocks: ['oak_fence', 'spruce_planks'], pattern: 'vertical' }
    ],
    'Ocean Monument': [
      { blocks: ['prismarine', 'prismarine_bricks'], pattern: 'adjacent' },
      { blocks: ['dark_prismarine', 'prismarine'], pattern: 'adjacent' }
    ],
    'Stronghold': [
      { blocks: ['stone_bricks', 'cracked_stone_bricks'], pattern: 'adjacent' },
      { blocks: ['iron_bars', 'stone_bricks'], pattern: 'adjacent' }
    ],
    'Mineshaft': [
      { blocks: ['oak_fence', 'cobweb'], pattern: 'adjacent' },
      { blocks: ['rail', 'oak_planks'], pattern: 'adjacent' }
    ],
    'Nether Fortress': [
      { blocks: ['nether_bricks', 'nether_brick_fence'], pattern: 'adjacent' },
      { blocks: ['nether_bricks', 'nether_brick_stairs'], pattern: 'adjacent' }
    ],
    'End City': [
      { blocks: ['end_stone_bricks', 'purpur_block'], pattern: 'adjacent' },
      { blocks: ['purpur_pillar', 'purpur_block'], pattern: 'vertical' }
    ],
    'Pillager Outpost': [
      { blocks: ['dark_oak_log', 'dark_oak_planks'], pattern: 'vertical' },
      { blocks: ['cobblestone', 'dark_oak_log'], pattern: 'adjacent' }
    ],
    'Ruined Portal': [
      { blocks: ['obsidian', 'crying_obsidian'], pattern: 'adjacent' },
      { blocks: ['netherrack', 'obsidian'], pattern: 'adjacent' }
    ],
    'Shipwreck': [
      { blocks: ['oak_planks', 'oak_log'], pattern: 'adjacent' },
      { blocks: ['oak_fence', 'oak_planks'], pattern: 'adjacent' }
    ],
    'Buried Treasure': [
      { blocks: ['chest', 'sand'], pattern: 'vertical' },
      { blocks: ['chest', 'sandstone'], pattern: 'vertical' }
    ]
  }

  // Start auto explore
  startAutoExplore = function() {
    // Stop other activities
    stopFollowing()
    stopProtecting()
    if (autoFishingActive) stopSmartAutoFishing()
    if (autoFarmActive) stopAutoFarm()
    if (autoMiningActive) stopAutoMining()
    if (autoCropFarmerActive) stopAutoCropFarmer()
    if (autoChestHuntingActive) stopAutoChestHunting()

    autoExploreActive = true
    discoveredStructures.clear()

    // Pick a random direction to explore
    const angle = Math.random() * Math.PI * 2
    exploreDirection = {
      x: Math.cos(angle),
      z: Math.sin(angle)
    }

    bot.chat('üó∫Ô∏è B·∫Øt ƒë·∫ßu kh√°m ph√°! T·ªõ s·∫Ω t√¨m c√¥ng tr√¨nh v√† ƒë√°nh qu√°i!')
    console.log('üó∫Ô∏è Auto Explore - Activated')
    console.log(`üìç H∆∞·ªõng kh√°m ph√°: ${Math.round(angle * 180 / Math.PI)}¬∞`)

    // Clear previous interval
    if (exploreInterval) {
      clearInterval(exploreInterval)
    }

    exploreInterval = setInterval(async () => {
      if (!autoExploreActive) {
        clearInterval(exploreInterval!)
        exploreInterval = null
        return
      }

      try {
        await executeExploreCycle()
      } catch (error) {
        console.log('‚ùå L·ªói auto explore:', error)
        bot.pathfinder.setGoal(null)
      }
    }, 3000) // Every 3 seconds
  }

  // Execute one explore cycle
  async function executeExploreCycle() {
    if (!autoExploreActive) return

    const health = bot.health
    const food = bot.food

    // Step 1: Auto eat if hungry
    if (food < 6) {
      console.log('üçû ƒêang ƒë√≥i, ƒÉn th·ª©c ƒÉn...')
      await eatFoodToHeal()
    }

    // Step 2: Scan for structures within 180 blocks
    await scanForStructures()

    // Step 3: Scan for hostile mobs
    const nearestMob = bot.nearestEntity((entity: any) => {
      if (!entity || !entity.position) return false
      const distance = bot.entity.position.distanceTo(entity.position)
      if (distance > 30) return false // Scan within 30 blocks

      const hostileMobs = [
        'zombie', 'skeleton', 'creeper', 'spider', 'witch', 'pillager', 'vindicator',
        'evoker', 'husk', 'stray', 'phantom', 'drowned', 'enderman', 'breeze', 'bogged',
        'slime', 'silverfish', 'cave_spider', 'wither_skeleton', 'blaze', 'ghast'
      ]
      const mobName = entity.name ? entity.name.toLowerCase() : ''
      const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''

      const isHostile = hostileMobs.some(mobType =>
        mobName.includes(mobType) || displayName.includes(mobType)
      )

      return entity.type === 'mob' && isHostile
    })

    // Step 4: Combat if mob found and health > 6 (3 hearts)
    if (nearestMob && health > 6) {
      const distance = bot.entity.position.distanceTo(nearestMob.position)
      console.log(`‚öîÔ∏è Ph√°t hi·ªán ${nearestMob.name || 'mob'} c√°ch ${distance.toFixed(1)}m, ƒë√°nh qu√°i!`)

      // Equip weapon
      await equipBestSword()

      // Move towards mob
      const movements = new Movements(bot)
      movements.allowSprinting = true
      bot.pathfinder.setMovements(movements)

      try {
        await bot.pathfinder.goto(new goals.GoalNear(nearestMob.position.x, nearestMob.position.y, nearestMob.position.z, 2))

        // Attack mob
        bot.pvp.attack(nearestMob)

        // Wait for combat to finish
        await new Promise(resolve => setTimeout(resolve, 3000))

        bot.pvp.stop()
        console.log('‚úÖ ƒê√£ ti√™u di·ªát qu√°i, ti·∫øp t·ª•c kh√°m ph√°')
      } catch (error) {
        console.log('‚ö†Ô∏è L·ªói khi ƒë√°nh qu√°i:', error?.message || error)
      }

      return
    } else if (nearestMob && health <= 6) {
      console.log(`‚ö†Ô∏è M√°u y·∫øu (${health}/20), tr√°nh qu√°i ${nearestMob.name || 'mob'}`)
    }

    // Step 5: Continue exploring in chosen direction
    const now = Date.now()
    if (now - lastExploreMove > 5000) { // Move every 5 seconds
      lastExploreMove = now

      const currentPos = bot.entity.position
      const distance = 40 + Math.random() * 40 // 40-80 blocks

      const targetX = currentPos.x + exploreDirection!.x * distance
      const targetZ = currentPos.z + exploreDirection!.z * distance

      const movements = new Movements(bot)
      movements.canDig = true
      movements.allowSprinting = true
      bot.pathfinder.setMovements(movements)

      const goal = new goals.GoalXZ(targetX, targetZ)
      bot.pathfinder.setGoal(goal)

      console.log(`üö∂ Di chuy·ªÉn ƒë·∫øn (${Math.floor(targetX)}, ${Math.floor(targetZ)})`)
    }
  }

  // Scan for structures
  async function scanForStructures() {
    const scanRadius = 180
    const botPos = bot.entity.position

    // Scan blocks in radius
    for (const [structureName, signatures] of Object.entries(STRUCTURE_SIGNATURES)) {
      for (const signature of signatures) {
        const [block1Name, block2Name] = signature.blocks

        // Find first block type
        const block1 = bot.findBlock({
          matching: (block: any) => block && block.name === block1Name,
          maxDistance: scanRadius,
          count: 1
        })

        if (!block1) continue

        // Check for second block nearby (adjacent or vertical)
        const offsets = signature.pattern === 'adjacent'
          ? [[1,0,0], [-1,0,0], [0,0,1], [0,0,-1]]
          : [[0,1,0], [0,-1,0]]

        for (const [dx, dy, dz] of offsets) {
          const checkPos = block1.position.offset(dx, dy, dz)
          const block2 = bot.blockAt(checkPos)

          if (block2 && block2.name === block2Name) {
            // Found structure signature!
            const structureKey = `${structureName}_${Math.floor(block1.position.x)}_${Math.floor(block1.position.z)}`

            if (!discoveredStructures.has(structureKey)) {
              discoveredStructures.add(structureKey)
              const coords = `(${Math.floor(block1.position.x)}, ${Math.floor(block1.position.y)}, ${Math.floor(block1.position.z)})`
              bot.chat(`üèõÔ∏è Ph√°t hi·ªán ${structureName} t·∫°i ${coords}!`)
              console.log(`üèõÔ∏è Discovered ${structureName} at ${coords}`)
              return // Only announce one structure per cycle
            }
          }
        }
      }
    }
  }

  // Stop auto explore
  stopAutoExplore = function() {
    console.log('üõë Stopping auto explore...')

    autoExploreActive = false
    exploreDirection = null
    discoveredStructures.clear()

    if (exploreInterval) {
      clearInterval(exploreInterval)
      exploreInterval = null
    }

    try {
      bot.pathfinder.setGoal(null)
      bot.pvp.stop()
    } catch (error) {
      // Ignore
    }

    bot.chat('üó∫Ô∏è D·ª´ng kh√°m ph√° r·ªìi!')
    console.log('‚èπÔ∏è Auto Explore - Deactivated')
  }

  // Heartbeat ƒë·ªÉ duy tr√¨ connection - c·∫£i thi·ªán v·ªõi error handling
  setInterval(() => {
    if (bot && bot._client && bot._client.state === 'play') {
      try {
        // Ch·ªâ heartbeat khi bot th·ª±c s·ª± connected v√† kh√¥ng c√≥ ho·∫°t ƒë·ªông quan tr·ªçng
        if (!isCurrentlyDigging && !isEating) {
          bot.setControlState('sneak', true)
          setTimeout(() => {
            if (bot && bot._client && bot._client.state === 'play') {
              try {
                bot.setControlState('sneak', false)
              } catch (e) {
                // Ignore minor control errors
              }
            }
          }, 50) // Gi·∫£m delay t·ª´ 100ms xu·ªëng 50ms
        }
      } catch (error) {
        // Ch·ªâ log l·ªói heartbeat n·∫øu kh√¥ng ph·∫£i EPIPE
        if (!error.message?.includes('EPIPE')) {
          console.log('‚ö†Ô∏è Heartbeat warning:', error.message || error)
        }
      }
    }
  }, 300000) // 5 ph√∫t

  // Auto-check bot presence in server every 5 seconds and reconnect if needed
  let presenceCheckFailures = 0
  const MAX_PRESENCE_FAILURES = 3
  let lastPresenceCheck = Date.now()

  setInterval(async () => {
    const currentTime = Date.now()

    // Ki·ªÉm tra xem bot c√≥ c√≤n connected kh√¥ng
    if (!bot || !bot._client || bot._client.state !== 'play' || bot._client.ended) {
      presenceCheckFailures++
      console.log(`‚ùå Bot presence check failed (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES})`)

      if (presenceCheckFailures >= MAX_PRESENCE_FAILURES && reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
        console.log('üîÑ Bot not present in server, attempting reconnect...')

        // Reset presence failures
        presenceCheckFailures = 0

        // Cleanup current bot instance
        try {
          if (bot && bot._client && !bot._client.ended) {
            bot._client.end()
          }
        } catch (e) {
          // Ignore cleanup errors
        }

        // Trigger reconnect
        console.log('üöÄ Reconnecting due to presence check failure...')
        setTimeout(() => {
          if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
            console.log('üöÄ Auto-reconnecting due to presence check failure...')
            createBot()
          }
        }, 2000)

        return
      }
    } else {
      // Bot is connected, check if it's actually responsive
      try {
        // Test if bot can perform basic operations
        const health = bot.health
        const position = bot.entity?.position

        if (health !== undefined && position) {
          // Bot is responsive, reset failure count
          if (presenceCheckFailures > 0) {
            console.log('‚úÖ Bot presence restored')
            presenceCheckFailures = 0
          }
          lastPresenceCheck = currentTime
        } else {
          presenceCheckFailures++
          console.log(`‚ö†Ô∏è Bot unresponsive (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES})`)
        }
      } catch (error) {
        presenceCheckFailures++
        console.log(`‚ö†Ô∏è Bot presence check error (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES}):`, error.message || error)
      }
    }

    // Check for stale connection (no updates for 30+ seconds)
    if (currentTime - lastPresenceCheck > 30000) {
      presenceCheckFailures++
      console.log(`‚è∞ Stale connection detected (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES})`)
    }

  }, 5000) // Ki·ªÉm tra m·ªói 5 gi√¢y

  // Helper function ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi th·ª±c hi·ªán h√†nh ƒë·ªông
  function isConnected(): boolean {
    return bot && bot._client && bot._client.state === 'play' && !bot._client.ended
  }

  // Helper function ƒë·ªÉ th·ª±c hi·ªán action an to√†n
  function safeAction(action: () => void, actionName: string = 'action') {
    try {
      if (!isConnected()) {
        console.log(`‚ö†Ô∏è B·ªè qua ${actionName} - bot kh√¥ng connected`)
        return false
      }
      action()
      return true
    } catch (error) {
      if (!error.message?.includes('EPIPE')) {
        console.log(`‚ö†Ô∏è L·ªói ${actionName}:`, error.message || error)
      }
      return false
    }
  }

  // Error handling v·ªõi improved EPIPE handling v√† auto-reconnect
  bot.on('error', (err: any) => {
    const errorMessage = err.message || err.toString()

    // Ch·ªâ log l·ªói quan tr·ªçng, b·ªè qua spam
    if (!errorMessage.includes('write EPIPE') &&
        !errorMessage.includes('read ECONNRESET') &&
        !errorMessage.includes('ECONNRESET') &&
        !errorMessage.includes('ECONN') &&
        !errorMessage.includes('EADDRINUSE')) {
      console.log('üõë Bot g·∫∑p l·ªói:', errorMessage)
    }

    // Ph√¢n lo·∫°i l·ªói ƒë·ªÉ x·ª≠ l√Ω ph√π h·ª£p
    const criticalErrors = ['ENOTFOUND', 'Invalid username', 'EAUTH', 'Failed to authenticate', 'Invalid session']
    const networkErrors = ['ECONNREFUSED', 'ECONNRESET', 'ETIMEDOUT', 'EPIPE', 'socketClosed', 'ECONN']
    const serverErrors = ['Server closed', 'Connection lost', 'Timed out', 'kicked']

    if (criticalErrors.some(errType => errorMessage.includes(errType))) {
      console.log('‚ùå L·ªói nghi√™m tr·ªçng, d·ª´ng auto-reconnect')
      reconnectAttempts = MAX_RECONNECT_ATTEMPTS // Force stop reconnection
      return
    }

    if (networkErrors.some(errType => errorMessage.includes(errType)) ||
        serverErrors.some(errType => errorMessage.includes(errType))) {
      // Ch·ªâ log EPIPE warning m·ªôt l·∫ßn
      if (errorMessage.includes('EPIPE') && !bot._epipeWarned) {
        console.log('‚ö†Ô∏è K·∫øt n·ªëi b·ªã ng·∫Øt (EPIPE), s·∫Ω auto-reconnect...')
        bot._epipeWarned = true
      }

      // Cleanup safely ƒë·ªÉ tr√°nh th√™m EPIPE errors
      try {
        stopAll()
      } catch (cleanupError) {
        // Ignore cleanup errors
      }

      // Trigger auto-reconnect for network/server errors if within limit
      if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
        console.log('üîÑ Network error detected, scheduling auto-reconnect...')
        setTimeout(() => {
          if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
            console.log('üöÄ Auto-reconnecting due to network error...')
            createBot()
          }
        }, 3000)
      }
      return
    }

    console.log('‚ö†Ô∏è L·ªói kh√°c, ti·∫øp t·ª•c ho·∫°t ƒë·ªông...')
  })

  bot.on('end', (reason: string) => {
    console.log('üíî Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi:', reason || 'Unknown reason')

    // Graceful cleanup - catch any errors
    try {
      // Clear all activities when disconnected
      autoFarmActive = false
      autoFishingActive = false
      if (typeof autoMiningActive !== 'undefined') {
        autoMiningActive = false
      }
      isEating = false
      if (typeof isCurrentlyDigging !== 'undefined') {
        isCurrentlyDigging = false
      }
      autoEatPluginActive = false
      autoChestHuntingActive = false
      isCurrentlyApproachingChest = false
      currentChestTarget = null

      // Clear intervals safely
      if (followInterval) clearInterval(followInterval)
      if (protectInterval) clearInterval(protectInterval)
      if (typeof miningInterval !== 'undefined' && miningInterval) clearInterval(miningInterval)
      if (fishingInterval) clearInterval(fishingInterval)
      if (hookCheckInterval) clearInterval(hookCheckInterval)
      if (chestHuntingInterval) clearInterval(chestHuntingInterval)

      // Reset pathfinder safely
      if (bot && bot.pathfinder) {
        try {
                    bot.pathfinder.setGoal(null)
        } catch (e) {
          // Ignore pathfinder errors during cleanup
        }
      }

      // Cleanup prismarine-viewer instance
      if (prismarineViewerInstance) {
        try {
          console.log('üßπ Cleaning up prismarine-viewer instance on disconnect...')
          if (typeof prismarineViewerInstance.close === 'function') {
            prismarineViewerInstance.close()
          }
          prismarineViewerInstance = null
          console.log('‚úÖ Prismarine-viewer cleanup completed')
        } catch (viewerCleanupError) {
          // Silent cleanup ƒë·ªÉ tr√°nh spam log
          prismarineViewerInstance = null
        }
      }

      // Reset viewer setup flag to allow setup on reconnect
      prismarineViewerSetup = false
      console.log('üîÑ Reset prismarine viewer setup flag for future connections')

    } catch (cleanupError) {
      console.log('‚ö†Ô∏è L·ªói cleanup khi disconnect:', cleanupError.message)
    }

    // C·∫≠p nh·∫≠t bot status cho web interface
    setBotConnected(false)

    const shouldReconnect =
      (
        reason === 'socketClosed' ||
        reason === 'disconnect.timeout' ||
        reason === 'disconnect.quitting' ||
        reason === 'ECONNRESET' ||
        !reason || reason === ''
      ) &&
      reconnectAttempts < MAX_RECONNECT_ATTEMPTS

    if (shouldReconnect) {
      reconnectAttempts++
      // TƒÉng delay base l√™n 60s v√† max l√™n 5 ph√∫t ƒë·ªÉ gi·∫£m spam reconnect
      const delay = Math.min(60000 * reconnectAttempts, 300000)
      console.log(`‚è≥ Server c√≥ th·ªÉ ƒëang kh√¥ng ·ªïn ƒë·ªãnh. Ch·ªù ${delay/1000} gi√¢y tr∆∞·ªõc khi reconnect... (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`)

      setTimeout(async () => {
        console.log('üîÑ Ki·ªÉm tra server v√† th·ª≠ k·∫øt n·ªëi l·∫°i...')

        // Ki·ªÉm tra server tr∆∞·ªõc khi reconnect
        const serverOnline = await testServerConnection()
        if (!serverOnline) {
          console.log('‚ùå Server v·∫´n offline, s·∫Ω th·ª≠ l·∫°i sau...')
          // Reset ƒë·ªÉ th·ª≠ l·∫°i
          setTimeout(() => createBot(), 30000)
          return
        }

        createBot()
      }, delay)
    } else {
      console.log('‚ùå D·ª´ng auto-reconnect')
      console.log(`üí° L√Ω do: ${reason} | S·ªë l·∫ßn th·ª≠: ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`)

      // Reset reconnect counter sau 10 ph√∫t ƒë·ªÉ c√≥ th·ªÉ th·ª≠ l·∫°i sau
      setTimeout(() => {
        reconnectAttempts = 0
        console.log('üîÑ Reset reconnect counter, c√≥ th·ªÉ th·ª≠ manual restart')
      }, 600000)
    }
  })
}

// Kh·ªüi t·∫°o bot
createBot()