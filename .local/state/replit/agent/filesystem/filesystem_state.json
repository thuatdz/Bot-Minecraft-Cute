{"file_contents":{"backup/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"backup/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/pages/VpsSimulator.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AlertCircle, Server, Activity, Settings, Terminal, Wifi, HardDrive } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface VPSConfig {\n  dataUrl: string;\n  secretKey: string;\n  serverName: string;\n  region: string;\n  cpuCores: number;\n  ramGB: number;\n  storageGB: number;\n}\n\ninterface ServerStats {\n  cpuUsage: number;\n  ramUsage: number;\n  diskUsage: number;\n  uptime: string;\n  status: 'online' | 'offline' | 'maintenance';\n}\n\nexport default function VpsSimulator() {\n  const [config, setConfig] = useState<VPSConfig>({\n    dataUrl: 'https://api.minecraft-bots.com/v1/data/servers',\n    secretKey: 'sk-mb_1234567890abcdef_your_minecraft_bot_api_key_here',\n    serverName: 'MindzWeb-Bot-Server',\n    region: 'Asia-Pacific',\n    cpuCores: 4,\n    ramGB: 8,\n    storageGB: 100\n  });\n\n  const [stats, setStats] = useState<ServerStats>({\n    cpuUsage: 45,\n    ramUsage: 62,\n    diskUsage: 38,\n    uptime: '2d 14h 32m',\n    status: 'online'\n  });\n\n  const [consoleOutput, setConsoleOutput] = useState<string[]>([\n    '[INFO] VPS Server initialized successfully',\n    '[INFO] Minecraft Bot API connected',\n    '[INFO] Data synchronization active',\n    '[DEBUG] Secret key authenticated',\n    '[INFO] MindzWeb Bot Management System ready'\n  ]);\n\n  const [command, setCommand] = useState('');\n  const [isConnected, setIsConnected] = useState(true);\n\n  useEffect(() => {\n    // Simulate real-time stats updates\n    const interval = setInterval(() => {\n      try {\n        setStats(prev => ({\n          ...prev,\n          cpuUsage: Math.max(20, Math.min(90, prev.cpuUsage + (Math.random() - 0.5) * 10)),\n          ramUsage: Math.max(30, Math.min(95, prev.ramUsage + (Math.random() - 0.5) * 8)),\n          diskUsage: Math.max(10, Math.min(80, prev.diskUsage + (Math.random() - 0.5) * 3))\n        }));\n      } catch (error) {\n        console.error('Error updating stats:', error);\n      }\n    }, 30000); // Tăng từ 3s lên 30s để tránh spam\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, []);\n\n  const executeCommand = () => {\n    try {\n      if (!command.trim()) return;\n      \n      const newOutput = [...consoleOutput];\n      newOutput.push(`> ${command}`);\n      \n      // Simulate command responses\n      switch (command.toLowerCase()) {\n        case 'status':\n          newOutput.push(`[INFO] Server Status: ${stats.status.toUpperCase()}`);\n          newOutput.push(`[INFO] Uptime: ${stats.uptime}`);\n          break;\n        case 'restart bot':\n          newOutput.push('[INFO] Restarting Minecraft bot...');\n          newOutput.push('[SUCCESS] Bot restarted successfully');\n          break;\n        case 'check api':\n          newOutput.push(`[INFO] Data URL: ${config.dataUrl}`);\n          newOutput.push('[SUCCESS] API connection healthy');\n          break;\n        case 'clear':\n          setConsoleOutput([]);\n          setCommand('');\n          return;\n        default:\n          newOutput.push(`[ERROR] Unknown command: ${command}`);\n      }\n      \n      setConsoleOutput(newOutput.slice(-10)); // Keep last 10 lines\n      setCommand('');\n    } catch (error) {\n      console.error('Error executing command:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online': return 'bg-green-500';\n      case 'offline': return 'bg-red-500';\n      case 'maintenance': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-purple-100 dark:from-gray-900 dark:to-purple-900 p-4\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n            🌸 VPS Simulator Kawaii 🌸\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Mô phỏng máy chủ ảo cho hệ thống quản lý bot Minecraft\n          </p>\n        </div>\n\n        {/* Connection Status */}\n        <Alert className={isConnected ? \"border-green-200 bg-green-50\" : \"border-red-200 bg-red-50\"}>\n          <Wifi className={`h-4 w-4 ${isConnected ? 'text-green-600' : 'text-red-600'}`} />\n          <AlertDescription className={isConnected ? 'text-green-800' : 'text-red-800'}>\n            {isConnected ? 'Kết nối VPS thành công - Dữ liệu đang đồng bộ' : 'Mất kết nối VPS'}\n          </AlertDescription>\n        </Alert>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Tổng quan</TabsTrigger>\n            <TabsTrigger value=\"config\">Cấu hình</TabsTrigger>\n            <TabsTrigger value=\"console\">Console</TabsTrigger>\n            <TabsTrigger value=\"monitoring\">Giám sát</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">CPU Usage</CardTitle>\n                  <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-pink-600\">{stats.cpuUsage.toFixed(1)}%</div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-pink-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${stats.cpuUsage}%` }}\n                    ></div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">RAM Usage</CardTitle>\n                  <HardDrive className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-purple-600\">{stats.ramUsage.toFixed(1)}%</div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-purple-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${stats.ramUsage}%` }}\n                    ></div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Disk Usage</CardTitle>\n                  <Server className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-600\">{stats.diskUsage.toFixed(1)}%</div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div \n                      className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${stats.diskUsage}%` }}\n                    ></div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Status</CardTitle>\n                  <div className={`w-3 h-3 rounded-full ${getStatusColor(stats.status)}`}></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold capitalize\">{stats.status}</div>\n                  <p className=\"text-xs text-muted-foreground\">Uptime: {stats.uptime}</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Thông tin máy chủ</CardTitle>\n                <CardDescription>Chi tiết cấu hình VPS hiện tại</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Tên máy chủ</Label>\n                    <p className=\"text-lg font-semibold text-pink-600\">{config.serverName}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Vùng</Label>\n                    <p className=\"text-lg\">{config.region}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">CPU Cores</Label>\n                    <p className=\"text-lg\">{config.cpuCores} cores</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">RAM</Label>\n                    <p className=\"text-lg\">{config.ramGB} GB</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Configuration Tab */}\n          <TabsContent value=\"config\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Cấu hình API và Secret Key</CardTitle>\n                <CardDescription>Thiết lập kết nối dữ liệu và bảo mật</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dataUrl\">Data URL</Label>\n                    <Input\n                      id=\"dataUrl\"\n                      value={config.dataUrl}\n                      onChange={(e) => setConfig(prev => ({ ...prev, dataUrl: e.target.value }))}\n                      placeholder=\"https://api.minecraft-bots.com/v1/data/servers\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"secretKey\">Secret Key</Label>\n                    <Input\n                      id=\"secretKey\"\n                      type=\"password\"\n                      value={config.secretKey}\n                      onChange={(e) => setConfig(prev => ({ ...prev, secretKey: e.target.value }))}\n                      placeholder=\"sk-mb_1234567890abcdef...\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"serverName\">Tên máy chủ</Label>\n                    <Input\n                      id=\"serverName\"\n                      value={config.serverName}\n                      onChange={(e) => setConfig(prev => ({ ...prev, serverName: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"region\">Vùng</Label>\n                    <Input\n                      id=\"region\"\n                      value={config.region}\n                      onChange={(e) => setConfig(prev => ({ ...prev, region: e.target.value }))}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-4\">\n                  <Button className=\"bg-pink-500 hover:bg-pink-600\">\n                    Lưu cấu hình\n                  </Button>\n                  <Button variant=\"outline\">\n                    Test kết nối\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Console Tab */}\n          <TabsContent value=\"console\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Terminal className=\"h-5 w-5\" />\n                  VPS Console\n                </CardTitle>\n                <CardDescription>Điều khiển máy chủ qua dòng lệnh</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"bg-black text-green-400 p-4 rounded-lg font-mono text-sm h-64 overflow-y-auto\">\n                    {consoleOutput.map((line, index) => (\n                      <div key={index} className=\"mb-1\">{line}</div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Input\n                      value={command}\n                      onChange={(e) => setCommand(e.target.value)}\n                      placeholder=\"Nhập lệnh (status, restart bot, check api, clear...)\"\n                      onKeyDown={(e) => e.key === 'Enter' && executeCommand()}\n                      className=\"font-mono\"\n                    />\n                    <Button onClick={executeCommand} className=\"bg-pink-500 hover:bg-pink-600\">\n                      Thực thi\n                    </Button>\n                  </div>\n                  \n                  <div className=\"text-xs text-gray-500\">\n                    Lệnh có sẵn: status, restart bot, check api, clear\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Monitoring Tab */}\n          <TabsContent value=\"monitoring\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Trạng thái API</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Data URL</span>\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                        Active\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Secret Key</span>\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                        Valid\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Bot Connection</span>\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                        Connected\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Nhật ký hệ thống</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"text-green-600\">[15:45] API authenticated successfully</div>\n                    <div className=\"text-blue-600\">[15:44] Data synchronization completed</div>\n                    <div className=\"text-yellow-600\">[15:43] Bot behavior updated</div>\n                    <div className=\"text-green-600\">[15:42] VPS resources optimized</div>\n                    <div className=\"text-blue-600\">[15:41] System health check passed</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":16416},"backup/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/about.tsx":{"content":"import { Check } from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <section id=\"about\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold text-mindz-dark mb-4\">About Mindz</h2>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            We are a forward-thinking company dedicated to creating digital experiences that combine beautiful design with powerful functionality.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n          <div>\n            <img \n              src=\"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n              alt=\"Modern office workspace\" \n              className=\"rounded-xl shadow-lg w-full h-auto\" \n            />\n          </div>\n          <div>\n            <h3 className=\"text-2xl font-semibold text-mindz-dark mb-6\">Our Vision</h3>\n            <p className=\"text-gray-600 mb-6\">\n              At Mindz, we believe in the power of thoughtful design and innovative technology to solve real-world problems. Our team combines creativity with technical expertise to deliver solutions that exceed expectations.\n            </p>\n            <p className=\"text-gray-600 mb-8\">\n              We focus on creating user-centered experiences that are not only functional but also delightful to use. Every project we undertake is an opportunity to push boundaries and explore new possibilities.\n            </p>\n            <div className=\"flex items-center text-mindz-blue\">\n              <Check className=\"w-5 h-5 mr-2\" />\n              <span className=\"font-medium\">Innovation-driven approach</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1949},"backup/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/file-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ArrowLeft, ArrowRight, Plus, FolderPlus, Folder, FolderOpen, File, FileText, Edit3, Download, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { File as FileType } from \"@shared/schema\";\n\ninterface FileManagerProps {\n  currentPath: string;\n  onPathChange: (path: string) => void;\n}\n\nexport default function FileManager({ currentPath, onPathChange }: FileManagerProps) {\n  const [selectedFile, setSelectedFile] = useState<string | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newFileName, setNewFileName] = useState(\"\");\n  const [newFileType, setNewFileType] = useState<\"file\" | \"directory\">(\"file\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get files in current directory\n  const { data: allFiles = [], isLoading } = useQuery<FileType[]>({\n    queryKey: [\"/api/files\"],\n  });\n\n  // Filter files for current directory\n  const filesInCurrentDir = allFiles.filter(file => {\n    const parentPath = file.path.substring(0, file.path.lastIndexOf('/')) || '/';\n    return parentPath === currentPath;\n  });\n\n  // Create file/directory mutation\n  const createFile = useMutation({\n    mutationFn: async ({ name, type }: { name: string; type: \"file\" | \"directory\" }) => {\n      const path = currentPath === '/' ? `/${name}` : `${currentPath}/${name}`;\n      const response = await apiRequest(\"POST\", \"/api/files\", {\n        name,\n        path,\n        content: \"\",\n        type,\n        size: type === \"directory\" ? 4096 : 0,\n        permissions: type === \"directory\" ? \"755\" : \"644\",\n        owner: \"root\",\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      setIsCreateDialogOpen(false);\n      setNewFileName(\"\");\n      toast({\n        title: \"Success\",\n        description: `${newFileType === \"file\" ? \"File\" : \"Directory\"} created successfully`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: `Failed to create ${newFileType}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete file mutation\n  const deleteFile = useMutation({\n    mutationFn: async (fileId: string) => {\n      await apiRequest(\"DELETE\", `/api/files/${fileId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      toast({\n        title: \"Success\",\n        description: \"File deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileClick = (file: FileType) => {\n    if (file.type === \"directory\") {\n      onPathChange(file.path);\n    } else {\n      setSelectedFile(file.id);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentPath !== \"/\") {\n      const parentPath = currentPath.substring(0, currentPath.lastIndexOf('/')) || '/';\n      onPathChange(parentPath);\n    }\n  };\n\n  const getFileIcon = (file: FileType) => {\n    if (file.type === \"directory\") {\n      return file.path === currentPath ? \n        <FolderOpen className=\"h-4 w-4 text-yellow-500\" /> : \n        <Folder className=\"h-4 w-4 text-yellow-500\" />;\n    }\n    \n    if (file.name.endsWith('.py') || file.name.endsWith('.js') || file.name.endsWith('.ts')) {\n      return <FileText className=\"h-4 w-4 text-green-400\" />;\n    }\n    \n    return <File className=\"h-4 w-4 text-blue-400\" />;\n  };\n\n  const formatFileSize = (size: number) => {\n    if (size < 1024) return `${size} B`;\n    if (size < 1024 * 1024) return `${(size / 1024).toFixed(1)} KB`;\n    return `${(size / (1024 * 1024)).toFixed(1)} MB`;\n  };\n\n  const formatDate = (date: Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // Build directory tree\n  const buildDirectoryTree = () => {\n    const directories = allFiles.filter(f => f.type === \"directory\").sort((a, b) => a.path.localeCompare(b.path));\n    \n    return directories.map(dir => {\n      const depth = (dir.path.match(/\\//g) || []).length - 1;\n      const isCurrentPath = dir.path === currentPath;\n      \n      return (\n        <div\n          key={dir.id}\n          className={`flex items-center gap-2 py-1 px-2 cursor-pointer rounded text-sm ${\n            isCurrentPath ? 'terminal-accent' : 'terminal-muted hover:terminal-text'\n          }`}\n          style={{ marginLeft: `${depth * 16}px` }}\n          onClick={() => onPathChange(dir.path)}\n        >\n          {isCurrentPath ? <FolderOpen className=\"h-4 w-4\" /> : <Folder className=\"h-4 w-4\" />}\n          <span>{dir.name}</span>\n        </div>\n      );\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex-1 p-4 terminal-text\">Loading files...</div>;\n  }\n\n  return (\n    <div className=\"flex-1 flex\">\n      {/* Directory Tree */}\n      <div className=\"w-64 terminal-panel border-r terminal-border p-3\">\n        <h3 className=\"text-xs font-semibold terminal-muted uppercase tracking-wide mb-3\">\n          Directory Tree\n        </h3>\n        <div className=\"font-mono space-y-1\">\n          {buildDirectoryTree()}\n        </div>\n      </div>\n\n      {/* File Browser */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <div className=\"h-12 terminal-panel border-b terminal-border flex items-center justify-between px-4\">\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBack}\n              disabled={currentPath === \"/\"}\n              className=\"p-1 terminal-muted hover:terminal-text\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-1 terminal-muted hover:terminal-text\"\n              disabled\n            >\n              <ArrowRight className=\"h-4 w-4\" />\n            </Button>\n            <span className=\"text-sm font-mono terminal-text\">{currentPath}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  size=\"sm\" \n                  className=\"bg-cyan-500 text-black hover:bg-cyan-400\"\n                  onClick={() => setNewFileType(\"file\")}\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  New File\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"terminal-panel border terminal-border\">\n                <DialogHeader>\n                  <DialogTitle className=\"terminal-text\">Create New {newFileType}</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant={newFileType === \"file\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setNewFileType(\"file\")}\n                    >\n                      File\n                    </Button>\n                    <Button\n                      variant={newFileType === \"directory\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setNewFileType(\"directory\")}\n                    >\n                      Directory\n                    </Button>\n                  </div>\n                  <Input\n                    placeholder={`${newFileType} name`}\n                    value={newFileName}\n                    onChange={(e) => setNewFileName(e.target.value)}\n                    className=\"terminal-panel border terminal-border terminal-text\"\n                  />\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => createFile.mutate({ name: newFileName, type: newFileType })}\n                      disabled={!newFileName.trim() || createFile.isPending}\n                      className=\"bg-cyan-500 text-black hover:bg-cyan-400\"\n                    >\n                      Create\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsCreateDialogOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              className=\"terminal-border terminal-text hover:bg-gray-600\"\n              onClick={() => {\n                setNewFileType(\"directory\");\n                setIsCreateDialogOpen(true);\n              }}\n            >\n              <FolderPlus className=\"h-4 w-4 mr-1\" />\n              New Folder\n            </Button>\n          </div>\n        </div>\n\n        {/* File List */}\n        <div className=\"flex-1 p-4 custom-scrollbar overflow-y-auto\">\n          <div className=\"space-y-2\">\n            {filesInCurrentDir.map((file) => (\n              <div\n                key={file.id}\n                className={`flex items-center gap-3 p-2 rounded cursor-pointer transition-colors ${\n                  selectedFile === file.id \n                    ? 'bg-cyan-500/20 border border-cyan-500/50' \n                    : 'hover:bg-gray-600/30'\n                }`}\n                onClick={() => handleFileClick(file)}\n              >\n                {getFileIcon(file)}\n                <div className=\"flex-1\">\n                  <div className=\"text-sm terminal-text\">{file.name}</div>\n                  <div className=\"text-xs terminal-muted\">\n                    {file.type === \"directory\" \n                      ? \"Folder\" \n                      : `${formatFileSize(file.size)} • Modified ${formatDate(file.lastModified)}`\n                    }\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  {file.type === \"file\" && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-1 terminal-muted hover:terminal-text\"\n                    >\n                      <Edit3 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {file.type === \"file\" && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-1 terminal-muted hover:terminal-text\"\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      deleteFile.mutate(file.id);\n                    }}\n                    className=\"p-1 terminal-muted hover:text-red-400\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n            \n            {filesInCurrentDir.length === 0 && (\n              <div className=\"text-center py-8 terminal-muted\">\n                <Folder className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                <p>This directory is empty</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12053},"backup/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"backup/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"backup/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"backup/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/BotConfigModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useBots } from \"@/hooks/use-bots\";\nimport { UpdateBotConfig } from \"@shared/schema\";\n\ninterface BotConfigModalProps {\n  botId: string;\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function BotConfigModal({ botId, open, onClose }: BotConfigModalProps) {\n  const { bots, updateBotConfig } = useBots();\n  const bot = bots?.find(b => b.id === botId);\n  \n  const [config, setConfig] = useState<UpdateBotConfig>({\n    autoReconnect: true,\n    chatEnabled: true,\n    movementPattern: \"random\",\n    responseDelay: 1000,\n  });\n\n  useEffect(() => {\n    if (bot) {\n      setConfig({\n        autoReconnect: bot.autoReconnect ?? true,\n        chatEnabled: bot.chatEnabled ?? true,\n        movementPattern: bot.movementPattern ?? \"random\",\n        responseDelay: bot.responseDelay ?? 1000,\n      });\n    }\n  }, [bot]);\n\n  const handleSave = async () => {\n    await updateBotConfig.mutateAsync({ botId, config });\n    onClose();\n  };\n\n  const handleReset = () => {\n    if (bot) {\n      setConfig({\n        autoReconnect: bot.autoReconnect,\n        chatEnabled: bot.chatEnabled,\n        movementPattern: bot.movementPattern,\n        responseDelay: bot.responseDelay,\n      });\n    }\n  };\n\n  if (!bot) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-semibold text-purple-600\">\n            🛠️ Bot Configuration - {bot.username}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 py-6\">\n          <div>\n            <h4 className=\"text-lg font-medium text-gray-800 mb-4\">Basic Settings</h4>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"autoReconnect\" className=\"text-sm font-medium text-gray-700\">\n                  Auto-Reconnect\n                </Label>\n                <Switch\n                  id=\"autoReconnect\"\n                  checked={config.autoReconnect ?? true}\n                  onCheckedChange={(checked) => \n                    setConfig(prev => ({ ...prev, autoReconnect: checked }))\n                  }\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"chatEnabled\" className=\"text-sm font-medium text-gray-700\">\n                  Chat Messages\n                </Label>\n                <Switch\n                  id=\"chatEnabled\"\n                  checked={config.chatEnabled ?? true}\n                  onCheckedChange={(checked) => \n                    setConfig(prev => ({ ...prev, chatEnabled: checked }))\n                  }\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-medium text-gray-800 mb-4\">Advanced Features</h4>\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Movement Pattern\n                </Label>\n                <Select\n                  value={config.movementPattern ?? \"random\"}\n                  onValueChange={(value) => \n                    setConfig(prev => ({ ...prev, movementPattern: value }))\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"random\">Random Walk</SelectItem>\n                    <SelectItem value=\"follow\">Follow Player</SelectItem>\n                    <SelectItem value=\"stay\">Stay in Place</SelectItem>\n                    <SelectItem value=\"custom\">Custom Path</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Response Delay (ms)\n                </Label>\n                <Input\n                  type=\"number\"\n                  min=\"100\"\n                  max=\"5000\"\n                  value={config.responseDelay ?? 1000}\n                  onChange={(e) => \n                    setConfig(prev => ({ ...prev, responseDelay: parseInt(e.target.value) || 1000 }))\n                  }\n                  className=\"border-pink-200 focus:border-pink-500\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n          <Button\n            variant=\"outline\"\n            onClick={handleReset}\n            className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={updateBotConfig.isPending}\n            className=\"bg-pink-500 hover:bg-pink-600 text-white\"\n          >\n            {updateBotConfig.isPending ? \"Saving...\" : \"Save Configuration\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5606},"backup/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/system-stats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { SystemStats } from \"@shared/schema\";\n\nexport default function SystemStats() {\n  const { data: stats } = useQuery<SystemStats>({\n    queryKey: [\"/api/system/stats\"],\n    refetchInterval: 2000, // Update every 2 seconds\n  });\n\n  if (!stats) {\n    return (\n      <div className=\"p-3 border-t terminal-border\">\n        <div className=\"text-xs font-semibold terminal-muted uppercase tracking-wide mb-3\">\n          System Status\n        </div>\n        <div className=\"space-y-3\">\n          <div className=\"text-xs terminal-muted\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const cpuPercent = (stats.cpuUsage / 100);\n  const memoryPercent = (stats.memoryUsed / stats.memoryTotal) * 100;\n  const diskPercent = (stats.diskUsed / stats.diskTotal) * 100;\n\n  return (\n    <div className=\"p-3 border-t terminal-border\">\n      <h3 className=\"text-xs font-semibold terminal-muted uppercase tracking-wide mb-3\">\n        System Status\n      </h3>\n      <div className=\"space-y-3\">\n        <div>\n          <div className=\"flex justify-between text-xs mb-1\">\n            <span className=\"terminal-muted\">CPU</span>\n            <span className=\"terminal-text\">{cpuPercent.toFixed(1)}%</span>\n          </div>\n          <Progress \n            value={cpuPercent} \n            className=\"h-1.5 bg-gray-600\"\n          />\n        </div>\n        <div>\n          <div className=\"flex justify-between text-xs mb-1\">\n            <span className=\"terminal-muted\">Memory</span>\n            <span className=\"terminal-text\">\n              {(stats.memoryUsed / 1024).toFixed(1)}/{(stats.memoryTotal / 1024).toFixed(1)} GB\n            </span>\n          </div>\n          <Progress \n            value={memoryPercent} \n            className=\"h-1.5 bg-gray-600\"\n          />\n        </div>\n        <div>\n          <div className=\"flex justify-between text-xs mb-1\">\n            <span className=\"terminal-muted\">Disk</span>\n            <span className=\"terminal-text\">\n              {(stats.diskUsed / 1024).toFixed(0)}/{(stats.diskTotal / 1024).toFixed(0)} GB\n            </span>\n          </div>\n          <Progress \n            value={diskPercent} \n            className=\"h-1.5 bg-gray-600\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2346},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"backup/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"backup/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"backup/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ErrorBoundary.tsx":{"content":"import React from 'react';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}\n\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-purple-100 dark:from-gray-900 dark:to-purple-900 p-4 flex items-center justify-center\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 max-w-md w-full text-center\">\n            <div className=\"text-6xl mb-4\">🌸</div>\n            <h2 className=\"text-2xl font-bold text-gray-800 dark:text-white mb-2\">\n              Oops! Có lỗi xảy ra\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n              Đừng lo lắng, chúng tôi đang khắc phục vấn đề này!\n            </p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"bg-pink-500 hover:bg-pink-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\"\n            >\n              Tải lại trang\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":1776},"backup/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/minecraft-card.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { ReactNode } from \"react\";\n\ninterface MinecraftCardProps {\n  children: ReactNode;\n  className?: string;\n  glowType?: \"online\" | \"offline\" | \"none\";\n}\n\nexport default function MinecraftCard({ children, className, glowType = \"none\" }: MinecraftCardProps) {\n  return (\n    <div className={cn(\n      \"server-card rounded-xl p-6 minecraft-border hover-glow\",\n      glowType === \"online\" && \"status-online\",\n      glowType === \"offline\" && \"status-offline\",\n      className\n    )}>\n      {children}\n    </div>\n  );\n}\n","size_bytes":553},"backup/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"server/bot-console.ts":{"content":"#!/usr/bin/env tsx\nimport { botManager, BotConfig } from './botmineflayer';\nimport readline from 'readline';\n\n// Tạo console interface\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconsole.log(`\n🌸 ====================================== 🌸\n     MINECRAFT BOT CONSOLE - LOLI CUTE\n🌸 ====================================== 🌸\n\nServer: thuatzai123.aternos.me:38893\nPhiên bản: 1.19.4\n\nCác lệnh có sẵn:\n  /start <tên_bot>  - Tạo và kết nối bot mới\n  /stop <tên_bot>   - Dừng bot\n  /list             - Liệt kê tất cả bot đang chạy  \n  /say <tên_bot> <tin_nhắn> - Gửi tin nhắn từ bot\n  /status <tên_bot> - Xem trạng thái bot\n  /dance <tên_bot>  - Cho bot nhảy múa\n  /help             - Hiển thị trợ giúp\n  /exit             - Thoát console\n\n🌸 ====================================== 🌸\n`);\n\n// Console callback để nhận log từ bot\nconst consoleCallback = (botId: string, level: string, message: string, source: string) => {\n  const timestamp = new Date().toLocaleTimeString('vi-VN');\n  const levelColor = {\n    'info': '\\x1b[36m',    // cyan\n    'success': '\\x1b[32m', // green  \n    'warning': '\\x1b[33m', // yellow\n    'error': '\\x1b[31m',   // red\n    'debug': '\\x1b[37m'    // white\n  };\n  const color = levelColor[level as keyof typeof levelColor] || '\\x1b[37m';\n  const reset = '\\x1b[0m';\n  \n  console.log(`${color}[${timestamp}] [${botId}] ${level.toUpperCase()}: ${message}${reset}`);\n};\n\n// Map để lưu trữ các bot instances\nconst activeBots = new Map<string, any>();\n\n// Function để xử lý các lệnh\nasync function handleCommand(input: string) {\n  const parts = input.trim().split(' ');\n  const command = parts[0];\n  \n  try {\n    switch (command) {\n      case '/start':\n        if (parts.length < 2) {\n          console.log('❌ Cách sử dụng: /start <tên_bot>');\n          break;\n        }\n        const username = parts[1];\n        \n        if (activeBots.has(username)) {\n          console.log(`⚠️  Bot ${username} đã đang chạy rồi!`);\n          break;\n        }\n        \n        console.log(`🚀 Đang tạo bot ${username}...`);\n        const success = await botManager.connectBotToServer(username, username, consoleCallback);\n        \n        if (success) {\n          const bot = botManager.getBot(username);\n          if (bot) {\n            activeBots.set(username, bot);\n            console.log(`✅ Bot ${username} đã được tạo thành công!`);\n          }\n        } else {\n          console.log(`❌ Không thể tạo bot ${username}`);\n        }\n        break;\n        \n      case '/stop':\n        if (parts.length < 2) {\n          console.log('❌ Cách sử dụng: /stop <tên_bot>');\n          break;\n        }\n        const botToStop = parts[1];\n        \n        if (!activeBots.has(botToStop)) {\n          console.log(`⚠️  Bot ${botToStop} không tồn tại hoặc chưa chạy!`);\n          break;\n        }\n        \n        console.log(`🔌 Đang dừng bot ${botToStop}...`);\n        botManager.removeBot(botToStop);\n        activeBots.delete(botToStop);\n        console.log(`✅ Bot ${botToStop} đã được dừng!`);\n        break;\n        \n      case '/list':\n        console.log('\\n📋 DANH SÁCH BOT ĐANG CHẠY:');\n        if (activeBots.size === 0) {\n          console.log('   (Không có bot nào đang chạy)');\n        } else {\n          activeBots.forEach((bot, name) => {\n            const status = bot.getStatus();\n            const statusIcon = status.connected ? '🟢' : '🔴';\n            console.log(`   ${statusIcon} ${name} - ${status.connected ? 'Online' : 'Offline'} | HP: ${status.health} | Food: ${status.food} | Uptime: ${status.uptime}s`);\n          });\n        }\n        console.log('');\n        break;\n        \n      case '/say':\n        if (parts.length < 3) {\n          console.log('❌ Cách sử dụng: /say <tên_bot> <tin_nhắn>');\n          break;\n        }\n        const botToSpeak = parts[1];\n        const message = parts.slice(2).join(' ');\n        \n        const speakBot = activeBots.get(botToSpeak);\n        if (!speakBot) {\n          console.log(`⚠️  Bot ${botToSpeak} không tồn tại hoặc chưa chạy!`);\n          break;\n        }\n        \n        speakBot.sendChat(message);\n        console.log(`💬 Bot ${botToSpeak} đã gửi: \"${message}\"`);\n        break;\n        \n      case '/status':\n        if (parts.length < 2) {\n          console.log('❌ Cách sử dụng: /status <tên_bot>');\n          break;\n        }\n        const botToCheck = parts[1];\n        \n        const checkBot = activeBots.get(botToCheck);\n        if (!checkBot) {\n          console.log(`⚠️  Bot ${botToCheck} không tồn tại hoặc chưa chạy!`);\n          break;\n        }\n        \n        const status = checkBot.getStatus();\n        const position = checkBot.getPosition();\n        console.log(`\n📊 TRẠNG THÁI BOT: ${botToCheck}\n🔗 Kết nối: ${status.connected ? '✅ Online' : '❌ Offline'}\n❤️  Máu: ${status.health}/20\n🍖 Đói: ${status.food}/20  \n⏱️  Uptime: ${status.uptime} giây\n📍 Vị trí: X:${position.x} Y:${position.y} Z:${position.z}\n`);\n        break;\n        \n      case '/dance':\n        if (parts.length < 2) {\n          console.log('❌ Cách sử dụng: /dance <tên_bot>');\n          break;\n        }\n        const botToDance = parts[1];\n        \n        const danceBot = activeBots.get(botToDance);\n        if (!danceBot) {\n          console.log(`⚠️  Bot ${botToDance} không tồn tại hoặc chưa chạy!`);\n          break;\n        }\n        \n        danceBot.sendChat('/dance');\n        console.log(`💃 Bot ${botToDance} đang bắt đầu nhảy múa!`);\n        break;\n        \n      case '/help':\n        console.log(`\n🌸 ====== TRỢ GIÚP LỆNH BOT ====== 🌸\n\n/start <tên>     - Tạo bot mới với tên chỉ định\n/stop <tên>      - Dừng bot theo tên  \n/list            - Xem tất cả bot đang chạy\n/say <tên> <msg> - Gửi tin nhắn từ bot\n/status <tên>    - Xem chi tiết trạng thái bot\n/dance <tên>     - Cho bot nhảy múa cute\n/help            - Hiển thị trợ giúp này\n/exit            - Thoát console\n\nVÍ DỤ:\n  /start LoliBot1\n  /say LoliBot1 Hello everyone!\n  /dance LoliBot1\n  /status LoliBot1\n  /stop LoliBot1\n\n🌸 ============================== 🌸\n`);\n        break;\n        \n      case '/exit':\n        console.log('👋 Đang dừng tất cả bot và thoát console...');\n        \n        // Dừng tất cả bot trước khi thoát\n        activeBots.forEach((bot, name) => {\n          console.log(`🔌 Dừng bot ${name}...`);\n          botManager.removeBot(name);\n        });\n        \n        console.log('✅ Đã thoát console. Bye bye! 🌸');\n        process.exit(0);\n        break;\n        \n      default:\n        if (input.trim() !== '') {\n          console.log(`❌ Lệnh không hợp lệ: ${command}`);\n          console.log('💡 Gõ /help để xem danh sách lệnh có sẵn.');\n        }\n        break;\n    }\n  } catch (error) {\n    console.error(`❌ Lỗi khi thực hiện lệnh: ${error}`);\n  }\n}\n\n// Prompt để nhập lệnh\nfunction prompt() {\n  rl.question('🌸 Bot Console > ', async (input) => {\n    await handleCommand(input);\n    prompt();\n  });\n}\n\n// Bắt đầu console\nconsole.log('💕 Bot Console đã sẵn sàng! Gõ /help để xem lệnh hoặc /start <tên_bot> để bắt đầu!');\nprompt();\n\n// Xử lý thoát gracefully\nprocess.on('SIGINT', () => {\n  console.log('\\n👋 Đang dừng tất cả bot...');\n  activeBots.forEach((bot, name) => {\n    botManager.removeBot(name);\n  });\n  console.log('✅ Đã thoát! Bye bye! 🌸');\n  process.exit(0);\n});","size_bytes":7775},"client/src/components/VipPricing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Facebook, Youtube } from \"lucide-react\";\n\nexport default function VipPricing() {\n  return (\n    <section id=\"vip\" className=\"py-20 px-4\">\n      <div className=\"container mx-auto\">\n        <h2 className=\"text-4xl font-bold text-purple-600 text-center mb-12\">\n          ✨ VIP Features ✨\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {/* Basic Plan */}\n          <Card className=\"bg-white/80 backdrop-blur-sm border-2 border-transparent hover:border-pink-200 transition-all\">\n            <CardContent className=\"p-8 text-center\">\n              <h3 className=\"text-2xl font-bold text-gray-800 mb-2\">Basic</h3>\n              <div className=\"text-4xl font-bold text-pink-500 mb-2\">Free</div>\n              <p className=\"text-gray-600 mb-6\">Tính năng cơ bản</p>\n              \n              <ul className=\"space-y-3 mb-8 text-left\">\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">1 Bot cùng lúc</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Cấu hình cơ bản</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Support cộng đồng</span>\n                </li>\n              </ul>\n              \n              <Button className=\"w-full bg-gray-300 text-gray-700 cursor-default\" disabled>\n                Đang sử dụng\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Premium Plan */}\n          <Card className=\"bg-white/80 backdrop-blur-sm border-2 border-pink-500 transform scale-105 relative\">\n            <Badge className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 bg-pink-500 text-white\">\n              Phổ biến\n            </Badge>\n            <CardContent className=\"p-8 text-center\">\n              <h3 className=\"text-2xl font-bold text-gray-800 mb-2\">Premium</h3>\n              <div className=\"text-4xl font-bold text-pink-500 mb-2\">50k VND</div>\n              <p className=\"text-gray-600 mb-6\">Mỗi tháng</p>\n              \n              <ul className=\"space-y-3 mb-8 text-left\">\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">5 Bot cùng lúc</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Tính năng AI thông minh</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Auto-farm nâng cao</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Priority support</span>\n                </li>\n              </ul>\n              \n              <Button className=\"w-full bg-pink-500 hover:bg-pink-600 text-white\">\n                Nâng cấp ngay\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* VIP Plan */}\n          <Card className=\"bg-white/80 backdrop-blur-sm border-2 border-transparent hover:border-purple-500 transition-all\">\n            <CardContent className=\"p-8 text-center\">\n              <h3 className=\"text-2xl font-bold text-gray-800 mb-2\">VIP</h3>\n              <div className=\"text-4xl font-bold text-purple-600 mb-2\">100k VND</div>\n              <p className=\"text-gray-600 mb-6\">Mỗi tháng</p>\n              \n              <ul className=\"space-y-3 mb-8 text-left\">\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Unlimited Bot</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Custom scripting</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">24/7 dedicated support</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <Check className=\"text-green-500 mr-3 h-5 w-5 flex-shrink-0\" />\n                  <span className=\"text-gray-700\">Tính năng độc quyền</span>\n                </li>\n              </ul>\n              \n              <Button className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\">\n                Liên hệ ngay\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center mt-12\">\n          <p className=\"text-lg text-gray-700 mb-4\">\n            💰 Để nâng cấp hoặc có thắc mắc, hãy liên hệ qua Facebook hoặc YouTube!\n          </p>\n          <div className=\"flex justify-center space-x-4\">\n            <Button asChild className=\"bg-blue-500 hover:bg-blue-600\">\n              <a href=\"https://www.facebook.com/le.van.nam.21737\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Facebook className=\"mr-2 h-4 w-4\" />\n                Chat Facebook\n              </a>\n            </Button>\n            <Button asChild className=\"bg-red-500 hover:bg-red-600\">\n              <a href=\"https://m.youtube.com/@duythien2k6\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Youtube className=\"mr-2 h-4 w-4\" />\n                Xem YouTube\n              </a>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6418},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"backup/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/text-editor.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { FolderOpen, Save, Undo, FileText, File, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { File as FileType } from \"@shared/schema\";\n\nexport default function TextEditor() {\n  const [openFiles, setOpenFiles] = useState<FileType[]>([]);\n  const [activeFileId, setActiveFileId] = useState<string | null>(null);\n  const [fileContents, setFileContents] = useState<Record<string, string>>({});\n  const [unsavedChanges, setUnsavedChanges] = useState<Set<string>>(new Set());\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get all files\n  const { data: allFiles = [] } = useQuery<FileType[]>({\n    queryKey: [\"/api/files\"],\n  });\n\n  // Get text files only\n  const textFiles = allFiles.filter(file => \n    file.type === \"file\" && (\n      file.name.endsWith('.txt') ||\n      file.name.endsWith('.py') ||\n      file.name.endsWith('.js') ||\n      file.name.endsWith('.ts') ||\n      file.name.endsWith('.json') ||\n      file.name.endsWith('.xml') ||\n      file.name.endsWith('.html') ||\n      file.name.endsWith('.css') ||\n      file.name.endsWith('.md') ||\n      file.name.endsWith('.sh') ||\n      file.name.endsWith('.bashrc') ||\n      file.name.endsWith('.profile') ||\n      !file.name.includes('.')\n    )\n  );\n\n  // Update file mutation\n  const updateFile = useMutation({\n    mutationFn: async ({ id, content }: { id: string; content: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/files/${id}`, { content });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      setUnsavedChanges(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(variables.id);\n        return newSet;\n      });\n      toast({\n        title: \"Success\",\n        description: \"File saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const openFile = (file: FileType) => {\n    if (!openFiles.find(f => f.id === file.id)) {\n      setOpenFiles(prev => [...prev, file]);\n      setFileContents(prev => ({ ...prev, [file.id]: file.content || \"\" }));\n    }\n    setActiveFileId(file.id);\n  };\n\n  const closeFile = (fileId: string) => {\n    setOpenFiles(prev => prev.filter(f => f.id !== fileId));\n    setFileContents(prev => {\n      const newContents = { ...prev };\n      delete newContents[fileId];\n      return newContents;\n    });\n    setUnsavedChanges(prev => {\n      const newSet = new Set(prev);\n      newSet.delete(fileId);\n      return newSet;\n    });\n    \n    if (activeFileId === fileId) {\n      const remainingFiles = openFiles.filter(f => f.id !== fileId);\n      setActiveFileId(remainingFiles.length > 0 ? remainingFiles[0].id : null);\n    }\n  };\n\n  const handleContentChange = (fileId: string, content: string) => {\n    setFileContents(prev => ({ ...prev, [fileId]: content }));\n    setUnsavedChanges(prev => new Set(prev).add(fileId));\n  };\n\n  const saveFile = (fileId: string) => {\n    const content = fileContents[fileId];\n    if (content !== undefined) {\n      updateFile.mutate({ id: fileId, content });\n    }\n  };\n\n  const activeFile = openFiles.find(f => f.id === activeFileId);\n  const activeContent = activeFileId ? fileContents[activeFileId] || \"\" : \"\";\n  const hasUnsavedChanges = activeFileId ? unsavedChanges.has(activeFileId) : false;\n\n  const getFileIcon = (fileName: string) => {\n    if (fileName.endsWith('.py') || fileName.endsWith('.js') || fileName.endsWith('.ts')) {\n      return <FileText className=\"h-4 w-4 text-green-400\" />;\n    }\n    return <File className=\"h-4 w-4 text-blue-400\" />;\n  };\n\n  const getLineNumbers = (content: string) => {\n    const lines = content.split('\\n');\n    return Array.from({ length: Math.max(lines.length, 1) }, (_, i) => i + 1);\n  };\n\n  return (\n    <div className=\"flex-1 flex\">\n      {/* File Explorer */}\n      <div className=\"w-64 terminal-panel border-r terminal-border p-3\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-xs font-semibold terminal-muted uppercase tracking-wide\">\n            Open Files\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-xs terminal-accent hover:terminal-info h-auto p-1\"\n          >\n            <FolderOpen className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Open Files Tabs */}\n        <div className=\"space-y-1 mb-4\">\n          {openFiles.map((file) => (\n            <div\n              key={file.id}\n              className={`flex items-center gap-2 p-2 rounded text-sm cursor-pointer ${\n                activeFileId === file.id\n                  ? \"bg-cyan-500/20 terminal-accent\"\n                  : \"terminal-muted hover:bg-gray-600/30\"\n              }`}\n              onClick={() => setActiveFileId(file.id)}\n            >\n              {getFileIcon(file.name)}\n              <span className=\"flex-1 truncate\">{file.name}</span>\n              {unsavedChanges.has(file.id) && (\n                <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  closeFile(file.id);\n                }}\n                className=\"p-0 h-auto terminal-muted hover:text-red-400\"\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n\n        {/* Available Files */}\n        <div className=\"border-t terminal-border pt-3\">\n          <h4 className=\"text-xs font-semibold terminal-muted uppercase tracking-wide mb-2\">\n            Available Files\n          </h4>\n          <div className=\"space-y-1\">\n            {textFiles.map((file) => (\n              <div\n                key={file.id}\n                className=\"flex items-center gap-2 p-2 hover:bg-gray-600/30 rounded text-sm cursor-pointer terminal-muted\"\n                onClick={() => openFile(file)}\n              >\n                {getFileIcon(file.name)}\n                <span className=\"truncate\">{file.name}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Editor */}\n      <div className=\"flex-1 flex flex-col\">\n        {activeFile ? (\n          <>\n            {/* Editor Header */}\n            <div className=\"h-12 terminal-panel border-b terminal-border flex items-center justify-between px-4\">\n              <div className=\"flex items-center gap-4\">\n                <span className=\"text-sm font-mono terminal-text\">{activeFile.path}</span>\n                {hasUnsavedChanges && (\n                  <span className=\"text-xs terminal-warning\">• Modified</span>\n                )}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => activeFileId && saveFile(activeFileId)}\n                  disabled={!hasUnsavedChanges || updateFile.isPending}\n                  className=\"bg-green-500 text-black hover:bg-green-400\"\n                >\n                  <Save className=\"h-4 w-4 mr-1\" />\n                  Save\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"terminal-border terminal-text hover:bg-gray-600\"\n                >\n                  <Undo className=\"h-4 w-4 mr-1\" />\n                  Undo\n                </Button>\n              </div>\n            </div>\n\n            {/* Editor Content */}\n            <div className=\"flex-1 flex\">\n              {/* Line Numbers */}\n              <div className=\"w-12 terminal-panel border-r terminal-border p-2 text-right text-xs font-mono terminal-muted select-none\">\n                {getLineNumbers(activeContent).map((num) => (\n                  <div key={num}>{num}</div>\n                ))}\n              </div>\n\n              {/* Editor */}\n              <div className=\"flex-1 p-4\">\n                <Textarea\n                  value={activeContent}\n                  onChange={(e) => activeFileId && handleContentChange(activeFileId, e.target.value)}\n                  className=\"w-full h-full bg-transparent border-none outline-none resize-none text-sm font-mono terminal-text placeholder-gray-500 focus:ring-0\"\n                  placeholder=\"Start typing...\"\n                  style={{ minHeight: 'calc(100vh - 200px)' }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center terminal-muted\">\n              <FileText className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No File Open</h3>\n              <p className=\"text-sm\">Select a file from the sidebar to start editing</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9392},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/WebConsole.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Terminal, Send, Trash2, Wifi, WifiOff } from \"lucide-react\";\n\ninterface ConsoleMessage {\n  id: string;\n  type: 'welcome' | 'console' | 'error';\n  botId?: string;\n  level?: 'info' | 'success' | 'warning' | 'error';\n  message: string;\n  source?: 'user' | 'system' | 'chat' | 'bot' | 'action' | 'movement' | 'ai';\n  timestamp: string;\n}\n\ninterface WebConsoleProps {\n  bots: any[];\n}\n\nexport default function WebConsole({ bots }: WebConsoleProps) {\n  const [ws, setWs] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<ConsoleMessage[]>([]);\n  const [command, setCommand] = useState(\"\");\n  const [selectedBotId, setSelectedBotId] = useState<string>(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Tự động cuộn xuống cuối khi có tin nhắn mới\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Kết nối WebSocket\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const host = window.location.host;\n    const wsUrl = `${protocol}//${host}/ws`;\n    \n    console.log('Connecting to WebSocket:', wsUrl);\n    const websocket = new WebSocket(wsUrl);\n\n    websocket.onopen = () => {\n      console.log(\"WebSocket connected\");\n      setIsConnected(true);\n      setMessages(prev => [...prev, {\n        id: Math.random().toString(36).substr(2, 9),\n        type: 'welcome',\n        message: 'Chào mừng đến với bot loli! 💕 Console đã kết nối thành công!',\n        timestamp: new Date().toLocaleTimeString('vi-VN'),\n        source: 'system',\n        level: 'success'\n      }]);\n    };\n\n    websocket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        const newMessage: ConsoleMessage = {\n          id: Math.random().toString(36).substr(2, 9),\n          ...data\n        };\n        setMessages(prev => [...prev, newMessage]);\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    websocket.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      setIsConnected(false);\n    };\n\n    websocket.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n      setIsConnected(false);\n    };\n\n    setWs(websocket);\n\n    return () => {\n      websocket.close();\n    };\n  }, []);\n\n  // Gửi lệnh\n  const sendCommand = () => {\n    if (!ws || !command.trim() || !selectedBotId) return;\n\n    const message = {\n      type: 'command',\n      botId: selectedBotId,\n      command: command.trim()\n    };\n\n    ws.send(JSON.stringify(message));\n    setCommand(\"\");\n  };\n\n  // Xóa console\n  const clearConsole = () => {\n    setMessages([]);\n  };\n\n  // Lấy màu cho các level khác nhau\n  const getMessageColor = (level?: string, source?: string) => {\n    if (source === 'user') return 'text-blue-400';\n    if (source === 'chat') return 'text-purple-400';\n    if (source === 'action') return 'text-pink-400';\n    if (source === 'movement') return 'text-orange-400';\n    if (source === 'ai') return 'text-cyan-400';\n    \n    switch (level) {\n      case 'success': return 'text-green-400';\n      case 'error': return 'text-red-400';\n      case 'warning': return 'text-yellow-400';\n      case 'info': return 'text-blue-300';\n      default: return 'text-gray-300';\n    }\n  };\n\n  // Lấy icon cho source\n  const getSourceIcon = (source?: string) => {\n    switch (source) {\n      case 'user': return '>';\n      case 'system': return '•';\n      case 'chat': return '💬';\n      case 'bot': return '🤖';\n      case 'action': return '🎭';\n      case 'movement': return '🚶';\n      case 'ai': return '✨';\n      default: return '→';\n    }\n  };\n\n  return (\n    <Card className=\"h-full bg-gradient-to-br from-gray-900 to-black border-pink-300/20\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Terminal className=\"text-pink-400\" size={20} />\n            <CardTitle className=\"text-white\">🎮 Web Console</CardTitle>\n            <Badge variant={isConnected ? \"default\" : \"destructive\"} className=\"ml-2\">\n              {isConnected ? (\n                <>\n                  <Wifi size={12} className=\"mr-1\" />\n                  Kết nối\n                </>\n              ) : (\n                <>\n                  <WifiOff size={12} className=\"mr-1\" />\n                  Mất kết nối\n                </>\n              )}\n            </Badge>\n          </div>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={clearConsole}\n            className=\"border-pink-300/20 text-pink-300 hover:bg-pink-500/20\"\n          >\n            <Trash2 size={14} className=\"mr-1\" />\n            Xóa\n          </Button>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Bot selector */}\n        <div className=\"flex space-x-2\">\n          <Select value={selectedBotId} onValueChange={setSelectedBotId}>\n            <SelectTrigger className=\"bg-gray-800 border-pink-300/20 text-white\">\n              <SelectValue placeholder=\"Chọn bot để điều khiển\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-gray-800 border-pink-300/20\">\n              {bots.map((bot) => (\n                <SelectItem key={bot.id} value={bot.id} className=\"text-white hover:bg-pink-500/20\">\n                  🤖 {bot.username} ({bot.status})\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Console output */}\n        <div className=\"h-80 bg-black rounded-lg border border-pink-300/20 p-3 font-mono text-sm\">\n          <ScrollArea className=\"h-full\">\n            {messages.length === 0 ? (\n              <div className=\"text-gray-500 text-center py-8\">\n                💕 Chào mừng đến PinkMineManager Console!\n                <br />\n                <span className=\"text-xs\">Chọn bot và gửi lệnh để bắt đầu...</span>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {messages.map((msg) => (\n                  <div key={msg.id} className=\"flex items-start space-x-2\">\n                    <span className=\"text-gray-500 text-xs w-16 flex-shrink-0\">\n                      {new Date(msg.timestamp).toLocaleTimeString('vi-VN', { \n                        hour: '2-digit', \n                        minute: '2-digit',\n                        second: '2-digit'\n                      })}\n                    </span>\n                    <span className=\"text-gray-400 w-4 flex-shrink-0\">\n                      {getSourceIcon(msg.source)}\n                    </span>\n                    <span className={`${getMessageColor(msg.level, msg.source)} break-all`}>\n                      {msg.botId && msg.source !== 'user' && (\n                        <span className=\"text-pink-400\">[{msg.botId?.slice(0, 8)}] </span>\n                      )}\n                      {msg.message}\n                    </span>\n                  </div>\n                ))}\n                <div ref={messagesEndRef} />\n              </div>\n            )}\n          </ScrollArea>\n        </div>\n\n        {/* Command input */}\n        <div className=\"flex space-x-2\">\n          <Input\n            value={command}\n            onChange={(e) => setCommand(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && sendCommand()}\n            placeholder=\"Nhập lệnh... (/start, /stop, /status, /say <message>)\"\n            disabled={!isConnected || !selectedBotId}\n            className=\"flex-1 bg-gray-800 border-pink-300/20 text-white placeholder-gray-400\"\n          />\n          <Button \n            onClick={sendCommand}\n            disabled={!isConnected || !command.trim() || !selectedBotId}\n            className=\"bg-pink-500 hover:bg-pink-600 text-white\"\n          >\n            <Send size={16} />\n          </Button>\n        </div>\n\n        {/* Command help */}\n        <div className=\"text-xs text-gray-400 space-y-1 bg-gray-800/50 rounded p-3\">\n          <div className=\"text-pink-300 font-semibold\">📚 Lệnh khả dụng:</div>\n          <div><span className=\"text-blue-400\">/start</span> - Khởi động bot</div>\n          <div><span className=\"text-blue-400\">/stop</span> - Dừng bot</div>\n          <div><span className=\"text-blue-400\">/status</span> - Kiểm tra trạng thái bot</div>\n          <div><span className=\"text-blue-400\">/say &lt;tin nhắn&gt;</span> - Gửi tin nhắn qua bot</div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9236},"client/src/hooks/use-bots.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Bot, InsertBot, UpdateBotConfig } from \"@shared/schema\";\n\nexport function useBots() {\n  const queryClient = useQueryClient();\n\n  const { data: bots, isLoading, error } = useQuery<Bot[]>({\n    queryKey: [\"/api/bots\"],\n  });\n\n  const addBot = useMutation({\n    mutationFn: async (bot: InsertBot) => {\n      const response = await apiRequest(\"POST\", \"/api/bots\", bot);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n    },\n  });\n\n  const startBot = useMutation({\n    mutationFn: async (botId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bots/${botId}/start`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n    },\n  });\n\n  const stopBot = useMutation({\n    mutationFn: async (botId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bots/${botId}/stop`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n    },\n  });\n\n  const updateBotConfig = useMutation({\n    mutationFn: async ({ botId, config }: { botId: string; config: UpdateBotConfig }) => {\n      const response = await apiRequest(\"PUT\", `/api/bots/${botId}/config`, config);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n    },\n  });\n\n  const deleteBot = useMutation({\n    mutationFn: async (botId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/bots/${botId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n    },\n  });\n\n  return {\n    bots,\n    isLoading,\n    error,\n    addBot,\n    startBot,\n    stopBot,\n    updateBotConfig,\n    deleteBot,\n  };\n}\n","size_bytes":2001},"client/src/components/services.tsx":{"content":"import { Monitor, Smartphone, Zap, ArrowRight } from \"lucide-react\";\n\nexport default function Services() {\n  const services = [\n    {\n      icon: <Monitor className=\"w-6 h-6 text-white\" />,\n      title: \"Web Development\",\n      description: \"Modern, responsive websites built with the latest technologies and best practices for optimal performance.\",\n      bgColor: \"bg-mindz-blue\"\n    },\n    {\n      icon: <Smartphone className=\"w-6 h-6 text-white\" />,\n      title: \"UI/UX Design\", \n      description: \"User-centered design that creates intuitive and engaging experiences across all digital touchpoints.\",\n      bgColor: \"bg-mindz-sky\"\n    },\n    {\n      icon: <Zap className=\"w-6 h-6 text-white\" />,\n      title: \"Digital Strategy\",\n      description: \"Comprehensive digital strategies that align with your business goals and drive measurable results.\",\n      bgColor: \"bg-mindz-dark\"\n    }\n  ];\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold text-mindz-dark mb-4\">Our Services</h2>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            We offer comprehensive digital solutions tailored to your specific needs and goals.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {services.map((service, index) => (\n            <div key={index} className=\"bg-white rounded-xl p-8 shadow-sm hover:shadow-md transition-shadow duration-200\">\n              <div className={`w-12 h-12 ${service.bgColor} rounded-lg flex items-center justify-center mb-6`}>\n                {service.icon}\n              </div>\n              <h3 className=\"text-xl font-semibold text-mindz-dark mb-4\">{service.title}</h3>\n              <p className=\"text-gray-600 mb-6\">\n                {service.description}\n              </p>\n              <button className=\"text-mindz-blue font-medium hover:text-mindz-sky transition-colors duration-200 flex items-center\">\n                Learn more <ArrowRight className=\"w-4 h-4 ml-1\" />\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2255},"backup/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, X } from \"lucide-react\";\n\nexport default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 10);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <header \n      className={`bg-white sticky top-0 z-50 transition-shadow duration-200 ${\n        isScrolled ? \"shadow-sm\" : \"\"\n      }`}\n    >\n      <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex-shrink-0\">\n            <h1 className=\"text-2xl font-bold text-mindz-blue\">mindz</h1>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              <button \n                onClick={() => scrollToSection(\"home\")}\n                className=\"text-mindz-gray hover:text-mindz-blue transition-colors duration-200 px-3 py-2 text-sm font-medium\"\n              >\n                Home\n              </button>\n              <button \n                onClick={() => scrollToSection(\"about\")}\n                className=\"text-mindz-gray hover:text-mindz-blue transition-colors duration-200 px-3 py-2 text-sm font-medium\"\n              >\n                About\n              </button>\n              <button \n                onClick={() => scrollToSection(\"services\")}\n                className=\"text-mindz-gray hover:text-mindz-blue transition-colors duration-200 px-3 py-2 text-sm font-medium\"\n              >\n                Services\n              </button>\n              <button \n                onClick={() => scrollToSection(\"contact\")}\n                className=\"text-mindz-gray hover:text-mindz-blue transition-colors duration-200 px-3 py-2 text-sm font-medium\"\n              >\n                Contact\n              </button>\n            </div>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <button \n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              className=\"text-mindz-gray hover:text-mindz-blue focus:outline-none focus:text-mindz-blue\"\n            >\n              {isMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 bg-white shadow-lg\">\n              <button \n                onClick={() => scrollToSection(\"home\")}\n                className=\"text-mindz-gray hover:text-mindz-blue block px-3 py-2 text-base font-medium w-full text-left\"\n              >\n                Home\n              </button>\n              <button \n                onClick={() => scrollToSection(\"about\")}\n                className=\"text-mindz-gray hover:text-mindz-blue block px-3 py-2 text-base font-medium w-full text-left\"\n              >\n                About\n              </button>\n              <button \n                onClick={() => scrollToSection(\"services\")}\n                className=\"text-mindz-gray hover:text-mindz-blue block px-3 py-2 text-base font-medium w-full text-left\"\n              >\n                Services\n              </button>\n              <button \n                onClick={() => scrollToSection(\"contact\")}\n                className=\"text-mindz-gray hover:text-mindz-blue block px-3 py-2 text-base font-medium w-full text-left\"\n              >\n                Contact\n              </button>\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n  );\n}\n","size_bytes":4152},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/BotCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Settings, Square, Monitor, Loader2 } from \"lucide-react\";\nimport { Bot } from \"@shared/schema\";\nimport { useBots } from \"@/hooks/use-bots\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ninterface BotCardProps {\n  bot: Bot;\n  onConfigure: () => void;\n}\n\nexport default function BotCard({ bot, onConfigure }: BotCardProps) {\n  const { startBot, stopBot } = useBots();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showScreen, setShowScreen] = useState(false);\n  const [isConfigOpen, setIsConfigOpen] = useState(false);\n\n  const formatUptime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online':\n        return 'bg-green-500';\n      case 'connecting':\n        return 'bg-yellow-500';\n      case 'error':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getStatusShadow = (status: string) => {\n    switch (status) {\n      case 'online':\n        return 'bot-status-online';\n      case 'error':\n        return 'bot-status-offline';\n      default:\n        return '';\n    }\n  };\n\n  const handleStart = async () => {\n    setIsLoading(true);\n    try {\n      await startBot.mutateAsync(bot.id);\n      toast({\n        title: \"Success\",\n        description: `Bot ${bot.username} started successfully.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to start bot ${bot.username}. ${error.message}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleStop = async () => {\n    setIsLoading(true);\n    try {\n      await stopBot.mutateAsync(bot.id);\n      toast({\n        title: \"Success\",\n        description: `Bot ${bot.username} stopped successfully.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to stop bot ${bot.username}. ${error.message}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n\n  return (\n    <>\n      <Card className={`bg-white/80 backdrop-blur-sm shadow-lg ${getStatusShadow(bot.status)}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-xl font-semibold text-gray-800\">{bot.username}</h3>\n          <Badge className={`${getStatusColor(bot.status)} text-white`}>\n            {bot.status.charAt(0).toUpperCase() + bot.status.slice(1)}\n          </Badge>\n        </div>\n\n        <div className=\"space-y-2 mb-4\">\n          <p className=\"text-gray-600\">\n            Server: <span className=\"font-medium\">{bot.server}</span>\n          </p>\n          <p className=\"text-gray-600\">\n            Username: <span className=\"font-medium\">{bot.username}</span>\n          </p>\n          <p className=\"text-gray-600\">\n            {bot.status === 'online' ? 'Uptime' : 'Last seen'}:\n            <span className=\"font-medium ml-1\">\n              {bot.status === 'online'\n                ? formatUptime(bot.uptime ?? 0)\n                : bot.lastSeen\n                  ? new Date(bot.lastSeen).toLocaleString()\n                  : 'Never'\n              }\n            </span>\n          </p>\n        </div>\n\n        <div className=\"flex gap-2\">\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  onClick={handleStart}\n                  disabled={isLoading || bot.status === 'online'}\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                      Đang khởi động...\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      {bot.status === 'online' ? 'Bot đang chạy' : 'Khởi động Bot'}\n                    </>\n                  )}\n                </Button>\n\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsConfigOpen(true)}\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Cấu hình\n                </Button>\n              </div>\n      </CardContent>\n    </Card>\n    </>\n  );\n}","size_bytes":4648},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nlet pool: Pool | null = null;\nlet db: any = null;\n\nif (!process.env.DATABASE_URL) {\n  console.warn(\"⚠️ DATABASE_URL not set. Database features will be disabled.\");\n} else {\n  pool = new Pool({ connectionString: process.env.DATABASE_URL });\n  db = drizzle({ client: pool, schema });\n}\n\nexport { pool, db };","size_bytes":528},"backup/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"backup/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"Embe/botlolicute.ts":{"content":"import mineflayer, { Bot } from 'mineflayer'\nimport { pathfinder, Movements } from 'mineflayer-pathfinder'\nimport * as net from 'net'\n\n// Import goals using createRequire for CommonJS module\nimport { createRequire } from 'module'\nconst require = createRequire(import.meta.url)\nconst { goals } = require('mineflayer-pathfinder')\nimport { plugin as pvp } from 'mineflayer-pvp'\nimport { plugin as collectBlock } from 'mineflayer-collectblock'\nconst autoEat = require('mineflayer-auto-eat').plugin\nimport { Vec3 } from 'vec3'\n\n// Import các module đã tách\nimport { BotConfig, BotState } from './types'\nimport { updateBotStatus, setBotConnected, getBotStatus } from './bot-status'\nconst { mineflayer: mineflayerViewer } = require('prismarine-viewer')\n\nconst geminiApiKey = process.env.GEMINI_API_KEY // Google Gemini API key\n\n// Bot configuration\nconst BOT_CONFIG: BotConfig = {\n  host: process.env.MINECRAFT_SERVER_HOST || 'thuatzai123.aternos.me',\n  port: parseInt(process.env.MINECRAFT_SERVER_PORT || '38893'),\n  username: process.env.MINECRAFT_BOT_USERNAME || 'ice',\n  version: process.env.MINECRAFT_VERSION || '1.19.4',\n  auth: 'offline' as const,\n  skinUrl: process.env.BOT_SKIN_URL || 'https://crafatar.com/skins/f014f08b7402657d', // Skin từ NameMC\n  capeUrl: process.env.BOT_CAPE_URL || undefined\n}\n\n// Export BOT_CONFIG globally for bot-status sync\n;(global as any).BOT_CONFIG = BOT_CONFIG;\n\n// All manager functionality is now integrated directly in this file\n\n// Global state variables\nlet bot: Bot\nlet targetPlayer: any = null\nlet prismarineViewerInstance: any = null\nlet prismarineViewerSetup = false\nlet followInterval: NodeJS.Timeout | null = null\nlet protectInterval: NodeJS.Timeout | null = null\nlet autoFarmActive = false\nlet isFollowing = false\nlet isProtecting = false\nlet lootedChests: Set<string> = new Set() // Ghi nhớ rương đã loot\nlet isEating = false // Track trạng thái đang ăn\nlet autoFishingActive = false // Track trạng thái câu cá\nlet autoItemCollectionDisabled = false // Tạm dừng nhặt đồ khi câu cá\nlet autoEquipDisabled = false // Tạm dừng tự động trang bị khi câu cá\nlet lastPlayerCommand = Date.now() // Track lần cuối player ra lệnh\nlet lastEatTime = 0 // Track lần cuối ăn để tránh spam\nlet bobberThrowCount = 0 // Đếm số lần âm thanh fishing_bobber.throw\nlet reconnectAttempts = 0\nconst MAX_RECONNECT_ATTEMPTS = 5\n\n// Presence check variables\nlet presenceCheckFailures = 0\nlet lastPresenceCheck = Date.now()\n\n// Auto mining variables - RESTORED per user requirements\nlet autoMiningActive = false\nlet currentMiningTarget: any = null\nlet targetOreType = ''\nlet miningInterval: NodeJS.Timeout | null = null\nlet lastMinedPosition: any = null\nlet isCurrentlyDigging = false\n\n// Auto mining variables - REMOVED but needed for cleanup (replaced by new implementation above)\n\n// Auto eat plugin variables\nlet autoEatPluginActive = false // Track trạng thái auto eat plugin\nlet lastMobCheckTime = 0 // Track lần cuối kiểm tra mob xung quanh\n\n// Auto mining variables - REMOVED\n// Chức năng auto mining đã được loại bỏ hoàn toàn\n\n// Auto chest hunting variables - RESTORED per user requirements\nlet autoChestHuntingActive = false\nlet currentChestTarget: any = null\nlet chestHuntingInterval: NodeJS.Timeout | null = null\nlet lastChestPosition: any = null\nlet isCurrentlyApproachingChest = false\nlet farmInterval: NodeJS.Timeout | null = null // Farm interval for compatibility\n\n// Auto crop farming variables - NEW\nlet autoCropFarmerActive = false\nlet cropFarmerInterval: NodeJS.Timeout | null = null\nlet currentHoeTool: any = null\nlet harvestedCrops: Set<string> = new Set() // Track harvested crops to avoid re-harvesting\n\n// PVP variables - NEW\nlet pvpActive = false\nlet pvpProActive = false\nlet pvpTargetName = ''\nlet pvpInterval: NodeJS.Timeout | null = null\nlet hasWarnedWeakPlayer = false // Track nếu đã chat \"Sao cậu yếu thế\"\nlet lastPvpTpAttempt = 0 // Track lần cuối thử /tp trong PVP\nlet lastShieldCheck = 0 // Track lần cuối check shield\nlet isCirclingBehind = false // Track nếu đang vòng ra sau lưng\n\n// Biến cho respawn handling\nlet lastMode = 'idle' // Track chế độ trước khi chết\nlet lastPosition: any = null // Track vị trí trước khi chết\nlet lastTargetPlayerName = '' // Track tên player đang theo/bảo vệ\nlet hasTpPermission: boolean | null = null // Track quyền /tp\nlet tpFailCount = 0 // Đếm số lần /tp thất bại\nlet lastAttackTime = 0 // Track lần cuối tấn công để cooldown\n\n// Compatibility shims to replace deleted manager modules\nlet equipmentManager: any\nlet autoEatManager: any\nlet combatManager: any\nlet fishingManager: any\nlet followingManager: any\nlet protectingManager: any\nlet autoFarmManager: any\nlet autoBuildManager: any\nlet autoMiningManager: any\n\n// Forward declarations của các hàm sẽ được định nghĩa sau\nlet startFollowingPlayer: (username: string) => void\nlet stopFollowing: () => void\nlet startProtectingPlayer: (username: string) => void\nlet stopProtecting: () => void\nlet startSmartAutoFishing: () => void\nlet stopSmartAutoFishing: () => void\nlet startSmartAutoBuild: (buildType: string) => void\nlet stopSmartAutoBuild: () => void\n// Auto mining functions removed\nlet startAutoFarmAll: () => void\nlet stopAutoFarm: () => void\nlet startAutoMining: (oreType: string) => void\nlet stopAutoMining: () => void\n// Auto chest hunting functions\nlet startAutoChestHunting: () => void\nlet stopAutoChestHunting: () => void\n// Auto crop farming functions\nlet startAutoCropFarmer: () => void\nlet stopAutoCropFarmer: () => void\n// PVP functions\nlet startPvP: (targetName: string) => void\nlet startPvPPro: (targetName: string) => void\nlet stopPvP: (silent?: boolean) => void\n\n// Create compatibility shims\nfunction createManagerShims() {\n  followingManager = {\n    startFollowingPlayer: (playerName: string) => startFollowingPlayer(playerName),\n    stopFollowing: () => stopFollowing(),\n    getIsFollowing: () => isFollowing,\n    getTargetPlayerName: () => lastTargetPlayerName\n  }\n\n  protectingManager = {\n    startProtectingPlayer: (playerName: string) => startProtectingPlayer(playerName),\n    stopProtecting: () => stopProtecting(),\n    getIsProtecting: () => isProtecting,\n    getTargetPlayerName: () => lastTargetPlayerName\n  }\n\n  autoFarmManager = {\n    startAutoFarm: () => startAutoFarmAll(),\n    startAutoFarmAll: () => startAutoFarmAll(),\n    stopAutoFarm: () => stopAutoFarm(),\n    getIsAutoFarmActive: () => autoFarmActive\n  }\n\n  // Auto mining manager removed\n\n  fishingManager = {\n    startSmartAutoFishing: () => startSmartAutoFishing(),\n    stopSmartAutoFishing: () => stopSmartAutoFishing(),\n    getIsAutoFishingActive: () => autoFishingActive\n  }\n\n  autoBuildManager = {\n    startSmartAutoBuild: (buildType: string) => startSmartAutoBuild(buildType),\n    stopSmartAutoBuild: () => stopSmartAutoBuild()\n  }\n\n  autoEatManager = {\n    setup: () => setupAutoEatPlugin(),\n    disable: () => disableAutoEatPlugin()\n  }\n\n  equipmentManager = {\n    equipBestWeapon: () => equipBestSwordForCombat(),\n    setup: () => {}\n  }\n\n  combatManager = {\n    setup: () => {}\n  }\n}\n\nasync function testServerConnection() {\n  return new Promise<boolean>((resolve) => {\n    const socket = new net.Socket()\n\n    socket.setTimeout(5000) // 5 second timeout\n\n    socket.on('connect', () => {\n      socket.destroy()\n      resolve(true)\n    })\n\n    socket.on('timeout', () => {\n      socket.destroy()\n      resolve(false)\n    })\n\n    socket.on('error', () => {\n      resolve(false)\n    })\n\n    socket.connect(BOT_CONFIG.port, BOT_CONFIG.host)\n  })\n}\n\nasync function createBot() {\n  console.log(`🚀 Đang tạo bot mới... (Thử lần ${reconnectAttempts + 1}/${MAX_RECONNECT_ATTEMPTS})`)\n  console.log(`📡 Kết nối tới: ${BOT_CONFIG.host}:${BOT_CONFIG.port}`)\n\n  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {\n    console.log('❌ Đã vượt quá số lần thử kết nối tối đa. Dừng bot.')\n    console.log('💡 Gợi ý: Kiểm tra xem server Minecraft có đang online không:')\n    console.log(`   - Truy cập https://${BOT_CONFIG.host} để kiểm tra status`)\n    console.log('   - Hoặc thay đổi MINECRAFT_SERVER_HOST trong file .env')\n    return\n  }\n\n  // Test server connectivity first\n  console.log('🔍 Kiểm tra kết nối server...')\n  const serverOnline = await testServerConnection()\n\n  if (!serverOnline) {\n    console.log('❌ Server không phản hồi. Server có thể đang offline.')\n    console.log('💡 Gợi ý:')\n    console.log('   1. Kiểm tra server Aternos có đang chạy không')\n    console.log('   2. Thử kết nối bằng Minecraft client trước')\n    console.log('   3. Kiểm tra địa chỉ server và port có đúng không')\n    console.log('⏳ Sẽ thử lại sau...')\n\n    // Still attempt connection but with warning\n  } else {\n    console.log('✅ Server phản hồi, đang kết nối bot...')\n  }\n\n  bot = mineflayer.createBot({\n    host: BOT_CONFIG.host,\n    port: BOT_CONFIG.port,\n    username: BOT_CONFIG.username,\n    version: BOT_CONFIG.version,\n    auth: BOT_CONFIG.auth,\n    keepAlive: true,\n    checkTimeoutInterval: 60000, // Check connection mỗi 60s\n    hideErrors: false,\n    skinUrl: BOT_CONFIG.skinUrl, // Áp dụng skin từ config\n    capeUrl: BOT_CONFIG.capeUrl   // Áp dụng cape nếu có\n  })\n\n  // Tăng MaxListeners để tránh warning\n  bot.setMaxListeners(100)\n\n  // Setup real prismarine-viewer for 3D world viewing with dedicated host\n  function setupPrismarineViewer() {\n    // Prevent multiple setups\n    if (prismarineViewerSetup) {\n      console.log('⚠️ Prismarine viewer already set up, skipping...')\n      return\n    }\n\n    try {\n      console.log('🖥️ Setting up Prismarine Viewer (one-time setup)...')\n      prismarineViewerSetup = true\n\n      // Cleanup any existing viewer instance first\n      if (prismarineViewerInstance) {\n        try {\n          console.log('🧹 Cleaning up existing prismarine-viewer instance...')\n          if (typeof prismarineViewerInstance.close === 'function') {\n            prismarineViewerInstance.close()\n          }\n        } catch (cleanupErr) {\n          console.log('⚠️ Error cleaning up old viewer:', cleanupErr.message)\n        }\n        prismarineViewerInstance = null\n      }\n\n      console.log('🖥️ Đang khởi động Real Prismarine Viewer với host riêng...')\n\n      // Check if mineflayerViewer is available\n      if (typeof mineflayerViewer === 'function') {\n        // Try ports starting from 3005 to avoid conflicts\n        const tryPorts = [3005, 3006, 3007, 3008, 3009]\n        let viewerStarted = false\n\n        for (const tryPort of tryPorts) {\n          if (viewerStarted) break\n\n          try {\n            console.log(`🔍 Trying to start prismarine-viewer on port ${tryPort}...`)\n\n            // Start real prismarine-viewer with dynamic port\n            const viewer = mineflayerViewer(bot, {\n              port: tryPort,\n              firstPerson: false,\n              host: '0.0.0.0',  // Bind to all interfaces for Replit\n              viewDistance: 'far',\n              chatHistory: true,\n              outputTextToConsole: false\n            })\n\n            // Store viewer instance for cleanup\n            prismarineViewerInstance = viewer\n            viewerStarted = true\n\n            console.log(`✅ Prismarine viewer started successfully on port ${tryPort}!`)\n\n            // Setup viewer with enhanced options\n            if (viewer && typeof viewer.on === 'function') {\n              viewer.on('listening', () => {\n                console.log(`✅ Real Prismarine Viewer đã khởi động trên port ${tryPort}!`)\n                console.log(`🌍 Có thể xem thế giới Minecraft 3D tại: http://0.0.0.0:${tryPort}`)\n\n                // Notify web interface about viewer URL with dynamic port\n                const viewerUrl = `https://${process.env.REPL_SLUG || 'workspace'}-${process.env.REPL_OWNER || 'xihobel480'}.replit.dev:${tryPort}`\n                console.log(`🎮 External Viewer URL: ${viewerUrl}`)\n\n                // Send viewer URL to main web interface\n                fetch('http://localhost:5000/api/bot-viewer-url', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify({\n                    url: viewerUrl,\n                    port: tryPort,\n                    status: 'active',\n                    botId: 'botlolicute'\n                  })\n                }).catch(() => {})\n\n                bot.chat('🎮 3D Viewer đã sẵn sàng!')\n              })\n\n              viewer.on('error', (error: any) => {\n                console.log(`❌ Lỗi Real Prismarine Viewer trên port ${tryPort}:`, error.message)\n                // Try next port\n                prismarineViewerInstance = null\n              })\n            } else {\n              console.log('⚠️ Prismarine viewer không hỗ trợ events, chỉ khởi động cơ bản')\n              console.log(`✅ Real Prismarine Viewer đã khởi động trên port ${tryPort}!`)\n\n              // Still try to notify web interface\n              const viewerUrl = `https://${process.env.REPL_SLUG || 'workspace'}-${process.env.REPL_OWNER || 'xihobel480'}.replit.dev:${tryPort}`\n              console.log(`🎮 External Viewer URL: ${viewerUrl}`)\n\n              fetch('http://localhost:5000/api/bot-viewer-url', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                  url: viewerUrl,\n                  port: tryPort,\n                  status: 'active',\n                  botId: 'botlolicute'\n                })\n              }).catch(() => {})\n\n              bot.chat('🎮 3D Viewer đã sẵn sàng!')\n            }\n\n            break // Successfully started, exit port loop\n\n          } catch (portError: any) {\n            console.log(`❌ Port ${tryPort} busy, trying next port...`)\n            prismarineViewerInstance = null\n            continue\n          }\n        }\n\n        if (!viewerStarted) {\n          console.log('❌ Không thể khởi động prismarine-viewer trên bất kỳ port nào, dùng fallback')\n          throw new Error('All ports busy for prismarine-viewer')\n        }\n      } else {\n        console.log('❌ mineflayerViewer không khả dụng, sử dụng fallback')\n        throw new Error('mineflayerViewer not available')\n      }\n\n      // Keep bot view tracking for web interface\n      startBotViewTracking()\n      setupBotEnvironmentTracking()\n\n      console.log('✅ Real Prismarine Viewer setup hoàn tất trên port 3001!')\n    } catch (error) {\n      console.log('⚠️ Lỗi khởi động Real Prismarine Viewer:', error)\n      // Fallback: chỉ chạy basic tracking\n      startBotViewTracking()\n      setupBotEnvironmentTracking()\n    }\n  }\n\n  // Enhanced bot view tracking function\n  function startBotViewTracking() {\n    setInterval(() => {\n      if (bot && bot.entity) {\n        const pos = bot.entity.position\n        const viewData = {\n          position: pos,\n          health: bot.health,\n          food: bot.food,\n          yaw: bot.entity.yaw,\n          pitch: bot.entity.pitch,\n          gamemode: bot.game?.gameMode || 'unknown',\n          dimension: bot.game?.dimension || 'overworld',\n          inventory: getFullInventoryData(),\n          time: bot.time?.timeOfDay || 0,\n          weather: bot.isRaining ? 'Mưa' : 'Nắng'\n        }\n\n        // Update bot status với enhanced view data - silent update\n        updateBotStatus({\n          position: viewData.position,\n          health: viewData.health,\n          food: viewData.food,\n          status: `Tọa độ: ${Math.floor(pos.x)}, ${Math.floor(pos.y)}, ${Math.floor(pos.z)} | HP: ${viewData.health}/20 | Đồ ăn: ${viewData.food}/20`,\n          inventory: viewData.inventory,\n          gamemode: viewData.gamemode,\n          weather: viewData.weather\n        })\n\n        // Sync với prismarine-viewer để hiển thị real-time data\n        syncWithPrismarineViewer(viewData)\n      }\n    }, 5000) // Update mỗi 5 giây theo yêu cầu\n  }\n\n  // Function để lấy đầy đủ thông tin inventory bao gồm trang bị\n  function getFullInventoryData() {\n    try {\n      const items = bot.inventory?.items() || []\n      const inventory = items.map(item => ({\n        name: item.name,\n        displayName: item.displayName || item.name,\n        count: item.count,\n        slot: item.slot,\n        type: item.type\n      }))\n\n      // Lấy thông tin trang bị\n      const equipment = {\n        hand: bot.heldItem ? {\n          name: bot.heldItem.name,\n          displayName: bot.heldItem.displayName || bot.heldItem.name,\n          count: bot.heldItem.count\n        } : null,\n        helmet: bot.inventory.slots[5] ? {\n          name: bot.inventory.slots[5].name,\n          displayName: bot.inventory.slots[5].displayName || bot.inventory.slots[5].name,\n          count: bot.inventory.slots[5].count\n        } : null,\n        chestplate: bot.inventory.slots[6] ? {\n          name: bot.inventory.slots[6].name,\n          displayName: bot.inventory.slots[6].displayName || bot.inventory.slots[6].name,\n          count: bot.inventory.slots[6].count\n        } : null,\n        leggings: bot.inventory.slots[7] ? {\n          name: bot.inventory.slots[7].name,\n          displayName: bot.inventory.slots[7].displayName || bot.inventory.slots[7].name,\n          count: bot.inventory.slots[7].count\n        } : null,\n        boots: bot.inventory.slots[8] ? {\n          name: bot.inventory.slots[8].name,\n          displayName: bot.inventory.slots[8].displayName || bot.inventory.slots[8].name,\n          count: bot.inventory.slots[8].count\n        } : null,\n        offhand: bot.inventory.slots[45] ? {\n          name: bot.inventory.slots[45].name,\n          displayName: bot.inventory.slots[45].displayName || bot.inventory.slots[45].name,\n          count: bot.inventory.slots[45].count\n        } : null\n      }\n\n      return {\n        items: inventory,\n        equipment: equipment,\n        totalItems: items.length\n      }\n    } catch (error) {\n      console.log('Lỗi lấy inventory data:', error)\n      return {\n        items: [],\n        equipment: {},\n        totalItems: 0\n      }\n    }\n  }\n\n  // Function để sync data với prismarine-viewer\n  async function syncWithPrismarineViewer(viewData: any) {\n    try {\n      await fetch('http://localhost:3001/api/bot-viewer-sync', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          position: viewData.position,\n          health: viewData.health,\n          food: viewData.food,\n          status: `Tọa độ: ${Math.floor(viewData.position.x)}, ${Math.floor(viewData.position.y)}, ${Math.floor(viewData.position.z)} | HP: ${viewData.health}/20 | Đồ ăn: ${viewData.food}/20`,\n          inventory: viewData.inventory,\n          connected: true\n        })\n      })\n    } catch (error) {\n      // Silent fail để không spam console\n    }\n  }\n\n  // Thêm tracking environment chi tiết\n  function setupBotEnvironmentTracking() {\n    if (!bot) return\n\n    // Track các entities xung quanh\n    bot.on('entitySpawn', (entity) => {\n      if (entity.type === 'player') {\n        console.log(`👤 Player xuất hiện: ${entity.username || entity.displayName || 'Unknown'}`)\n      } else if (entity.type === 'mob') {\n        console.log(`🐾 Mob xuất hiện: ${entity.name || entity.displayName || 'Unknown'}`)\n      }\n    })\n\n    // Track block breaks/places - disabled to reduce spam\n    // bot.on('blockUpdate', (oldBlock, newBlock) => {\n    //   if (oldBlock && newBlock && oldBlock.type !== newBlock.type) {\n    //     console.log(`🧱 Block thay đổi tại ${newBlock.position}: ${oldBlock.name} → ${newBlock.name}`)\n    //   }\n    // })\n\n    // Track chat messages\n    bot.on('chat', (username, message) => {\n      console.log(`💬 [${username}]: ${message}`)\n    })\n  }\n\n  // Load plugins with error handling\n  try {\n    bot.loadPlugin(pathfinder)\n    bot.loadPlugin(pvp)\n    bot.loadPlugin(collectBlock)\n\n    // Load auto-eat plugin với kiểm tra\n    if (typeof autoEat === 'function') {\n      bot.loadPlugin(autoEat)\n      console.log('✅ Auto-eat plugin loaded successfully')\n    } else {\n      console.log('⚠️ Auto-eat plugin not available, skipping...')\n    }\n\n    console.log('✅ Plugins loaded successfully')\n  } catch (pluginError) {\n    console.log('⚠️ Warning loading plugins:', pluginError)\n  }\n\n  // Connection events\n  bot.on('login', () => {\n    console.log('🔑 Bot đang đăng nhập...')\n  })\n\n  bot.on('spawn', () => {\n    console.log('🎉 Bot đã spawn thành công!')\n    console.log(`🎨 Skin được áp dụng: ${BOT_CONFIG.skinUrl}`)\n    if (BOT_CONFIG.capeUrl) {\n      console.log(`🎪 Cape được áp dụng: ${BOT_CONFIG.capeUrl}`)\n    }\n    reconnectAttempts = 0 // Reset on successful connection\n\n    // Reset presence check failures on successful spawn\n    presenceCheckFailures = 0\n    lastPresenceCheck = Date.now()\n\n    // Đợi 2 giây cho bot ổn định trước khi setup\n    setTimeout(() => {\n      try {\n        const defaultMove = new Movements(bot)\n        bot.pathfinder.setMovements(defaultMove)\n\n        // Initialize compatibility shims\n        createManagerShims()\n\n        // Start các chức năng với delay\n        setTimeout(() => startStatusUpdates(), 1000)\n        setTimeout(() => startWebStatusUpdates(), 1500)\n        setTimeout(() => setupAutoEatPlugin(), 2000)\n        setTimeout(() => collectNearbyItems(), 3000)\n\n        // Xử lý respawn sau khi bot đã ổn định\n        setTimeout(() => handleRespawn(), 5000)\n\n        // Khởi động prismarine-viewer trên port 3001\n        setTimeout(() => setupPrismarineViewer(), 6000)\n\n        // Start monitoring player list to ensure bot is actually in server\n        setTimeout(() => startPlayerListMonitoring(), 7000)\n\n        console.log('✅ Bot setup hoàn tất và ổn định')\n\n        // Cập nhật bot status cho web interface\n        setBotConnected(true, bot)\n      } catch (error) {\n        console.log('⚠️ Lỗi setup bot sau spawn:', error)\n      }\n    }, 2000)\n  })\n\n  // Monitor player list to ensure bot is actually in the server\n  function startPlayerListMonitoring() {\n    let playerListCheckFailures = 0\n    const MAX_PLAYERLIST_FAILURES = 2\n\n    const playerListInterval = setInterval(() => {\n      if (!bot || !bot._client || bot._client.state !== 'play') {\n        clearInterval(playerListInterval)\n        return\n      }\n\n      try {\n        const playerList = Object.keys(bot.players || {})\n        const botInList = playerList.includes(bot.username) || playerList.some(name =>\n          name.toLowerCase() === bot.username.toLowerCase()\n        )\n\n        if (!botInList && playerList.length > 0) {\n          playerListCheckFailures++\n          console.log(`⚠️ Bot not found in player list (${playerListCheckFailures}/${MAX_PLAYERLIST_FAILURES})`)\n          console.log(`📋 Current players: [${playerList.join(', ')}]`)\n\n          if (playerListCheckFailures >= MAX_PLAYERLIST_FAILURES) {\n            console.log('❌ Bot not in server player list, triggering reconnect...')\n            clearInterval(playerListInterval)\n\n            // Force disconnect and reconnect\n            try {\n              bot._client.end()\n            } catch (e) {}\n\n            setTimeout(() => {\n              if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n                console.log('🚀 Reconnecting due to player list check failure...')\n                createBot()\n              }\n            }, 2000)\n            return\n          }\n        } else {\n          if (playerListCheckFailures > 0) {\n            console.log('✅ Bot found in player list, monitoring continues')\n            playerListCheckFailures = 0\n          }\n        }\n      } catch (error) {\n        console.log('⚠️ Player list monitoring error:', error.message)\n        playerListCheckFailures++\n      }\n    }, 15000) // Check every 15 seconds\n  }\n\n  bot.on('death', () => {\n    console.log('💀 Bot đã chết!')\n\n    // Thông báo qua Facebook Messenger\n    // botMessenger.notifyOwner('bot_died', `Bot đã chết tại vị trí ${Math.floor(bot.entity.position.x)}, ${Math.floor(bot.entity.position.y)}, ${Math.floor(bot.entity.position.z)}`)\n\n    // Lưu trạng thái hiện tại\n    lastPosition = bot.entity.position ? { ...bot.entity.position } : null\n\n    if (followingManager.getIsFollowing()) {\n      lastMode = 'following'\n      lastTargetPlayerName = followingManager.getTargetPlayerName() || ''\n    } else if (protectingManager.getIsProtecting()) {\n      lastMode = 'protecting'\n      lastTargetPlayerName = protectingManager.getTargetPlayerName() || ''\n    } else if (autoFarmManager.getIsAutoFarmActive()) {\n      lastMode = 'farming'\n    } else if (autoCropFarmerActive) {\n      lastMode = 'crop_farming'\n    } else if (autoFishingActive) {\n      lastMode = 'fishing'\n    // Mining mode removed\n    } else if (autoChestHuntingActive) {\n      lastMode = 'chest_hunting'\n    } else {\n      lastMode = 'idle'\n    }\n\n    console.log(`💾 Đã lưu trạng thái: ${lastMode}, target: ${lastTargetPlayerName}`)\n    bot.chat('💀 Tớ chết rồi! Sẽ quay lại ngay...')\n  })\n\n  bot.on('health', () => {\n    // Handle health updates silently\n  })\n\n  // Suppress deprecated physicTick warnings from plugins\n  const originalConsoleWarn = console.warn\n  console.warn = (...args) => {\n    const message = args.join(' ')\n    if (!message.includes('physicTick') && !message.includes('deprecated')) {\n      originalConsoleWarn.apply(console, args)\n    }\n  }\n\n  // Hàm trang bị KIẾM TỐINHẤT - BẮT BUỘC cho chiến đấu\n  function equipBestSwordForCombat() {\n    try {\n      // CHỈ TÌM KIẾM - ưu tiên tuyệt đối cho combat\n      const swords = bot.inventory.items().filter(item =>\n        item.name.includes('sword')\n      )\n\n      if (swords.length > 0) {\n        // Sort kiếm theo độ mạnh: netherite > diamond > iron > stone > wood\n        const bestSword = swords.sort((a, b) => {\n          const getSwordTier = (name: string) => {\n            if (name.includes('netherite')) return 10\n            if (name.includes('diamond')) return 8\n            if (name.includes('iron')) return 6\n            if (name.includes('stone')) return 4\n            if (name.includes('wooden') || name.includes('wood')) return 2\n            return 1\n          }\n          return getSwordTier(b.name) - getSwordTier(a.name)\n        })[0]\n\n        // BẮT BUỘC trang bị kiếm tốt nhất\n        if (!bot.heldItem || bot.heldItem.name !== bestSword.name) {\n          bot.equip(bestSword, 'hand').catch(() => {})\n          console.log(`⚔️ BẮT BUỘC trang bị kiếm: ${bestSword.name} cho combat`)\n          return true\n        }\n        return true\n      } else {\n        // Không có kiếm, trang bị rìu tốt nhất\n        const axes = bot.inventory.items().filter(item => item.name.includes('axe'))\n        if (axes.length > 0) {\n          const bestAxe = axes.sort((a, b) => {\n            const getAxeTier = (name: string) => {\n              if (name.includes('netherite')) return 10\n              if (name.includes('diamond')) return 8\n              if (name.includes('iron')) return 6\n              if (name.includes('stone')) return 4\n              if (name.includes('wooden') || name.includes('wood')) return 2\n              return 1\n            }\n            return getAxeTier(b.name) - getAxeTier(a.name)\n          })[0]\n\n          bot.equip(bestAxe, 'hand').catch(() => {})\n          console.log(`🪓 Trang bị rìu thay thế: ${bestAxe.name} cho combat`)\n          return true\n        }\n        console.log('⚠️ Không có kiếm hoặc rìu để combat!')\n        return false\n      }\n    } catch (error) {\n      console.log('❌ Lỗi trang bị kiếm combat:', error)\n      return false\n    }\n  }\n\n  // Hàm trang bị công cụ phù hợp khi đi theo (không combat)\n  function equipBestToolForFollowing() {\n    try {\n      // Khi đi theo, ưu tiên pickaxe > shovel > axe > sword\n      const tools = bot.inventory.items().filter(item =>\n        item.name.includes('pickaxe') ||\n        item.name.includes('shovel') ||\n        item.name.includes('axe') ||\n        item.name.includes('sword')\n      )\n\n      if (tools.length > 0) {\n        // Sắp xếp theo ưu tiên: pickaxe > shovel > axe > sword\n        const bestTool = tools.sort((a, b) => {\n          const getToolPriority = (name: string) => {\n            if (name.includes('pickaxe')) return 100\n            if (name.includes('shovel')) return 80\n            if (name.includes('axe')) return 60\n            if (name.includes('sword')) return 40\n            return 0\n          }\n\n          const getTier = (name: string) => {\n            if (name.includes('netherite')) return 10\n            if (name.includes('diamond')) return 8\n            if (name.includes('iron')) return 6\n            if (name.includes('stone')) return 4\n            if (name.includes('wooden') || name.includes('wood')) return 2\n            return 1\n          }\n\n          const priorityA = getToolPriority(a.name) + getTier(a.name)\n          const priorityB = getToolPriority(b.name) + getTier(b.name)\n          return priorityB - priorityA\n        })[0]\n\n        if (!bot.heldItem || bot.heldItem.name !== bestTool.name) {\n          bot.equip(bestTool, 'hand').catch(() => {})\n          console.log(`🔧 Trang bị công cụ theo dõi: ${bestTool.name}`)\n        }\n      }\n    } catch (error) {\n      console.log('Lỗi trang bị công cụ:', error)\n    }\n  }\n\n  // Bow functions removed\n\n  // Kiểm tra vật cản giữa bot và target (raycast) - FIXED VERSION\n  function hasLineOfSight(target: any): boolean {\n    try {\n      if (!target || !target.position) return false\n\n      const botPos = bot.entity.position\n      const targetPos = target.position\n\n      // Điều chỉnh vị trí kiểm tra: mắt bot và trung tâm target\n      const from = new Vec3(botPos.x, botPos.y + 1.6, botPos.z) // Mắt bot (1.6 blocks cao)\n      const to = new Vec3(targetPos.x, targetPos.y + 0.5, targetPos.z) // Trung tâm target\n\n      const distance = from.distanceTo(to)\n      if (distance < 2) return true // Quá gần thì luôn có line of sight\n\n      // Tính vector hướng\n      const direction = to.clone().subtract(from).normalize()\n\n      // Kiểm tra từng 0.5 block dọc theo đường\n      const steps = Math.floor(distance * 2)\n      for (let i = 1; i < steps; i++) {\n        const checkPoint = from.clone().add(direction.clone().scale(i * 0.5))\n        const block = bot.blockAt(checkPoint.floor())\n\n        // Kiểm tra block rắn cản đường\n        if (block && block.name !== 'air') {\n          // Cho phép bắn qua các block không rắn\n          const passableBlocks = [\n            'water', 'lava', 'grass', 'tall_grass', 'fern', 'large_fern',\n            'flower', 'dandelion', 'poppy', 'rose', 'vine', 'snow',\n            'snow_layer', 'torch', 'redstone_torch', 'lever', 'button',\n            'pressure_plate', 'tripwire', 'string', 'web', 'fire'\n          ]\n\n          const isPassable = passableBlocks.some(passable =>\n            block.name.includes(passable)\n          )\n\n          if (!isPassable && block.boundingBox === 'block') {\n            console.log(`🚫Vật cản: ${block.name} tại ${checkPoint.x.toFixed(1)}, ${checkPoint.y.toFixed(1)}, ${checkPoint.z.toFixed(1)}`)\n            return false\n          }\n        }\n      }\n\n      return true // Không có vật cản\n    } catch (error) {\n      console.log('⚠️ Lỗi kiểm tra line of sight:', error)\n      return true // Cho phép tấn công nếu có lỗi để tránh block hoàn toàn\n    }\n  }\n\n  // Hàm tấn công cận chiến SPAM CỰC NHANH - tấn công liên tục không ngừng\n  function meleeAttack(target: any, distance: number): boolean {\n    if (!target || !target.isValid || !target.position) return false\n\n    try {\n      // Ngắm mục tiêu trước khi tấn công cận chiến\n      const targetPos = target.position.clone()\n      targetPos.y += target.height * 0.5 // Ngắm vào trung tâm để chính xác hơn\n\n      // Đảm bảo không nhìn xuống đất trong cận chiến\n      const botEyeY = bot.entity.position.y + 1.6\n      if (targetPos.y < botEyeY - 0.8) {\n        targetPos.y = botEyeY - 0.5\n      }\n\n      // Ngắm cực nhanh\n      bot.lookAt(targetPos, false)\n\n      // Tấn công - giảm xuống để tránh spam\n      for (let i = 0; i < 3; i++) {\n        bot.attack(target)\n      }\n\n      // Bật sprint để tăng damage và tốc độ\n      bot.setControlState('sprint', true)\n\n      // Tấn công spam (đã loại bỏ log để tránh spam console)\n      return true\n    } catch (error) {\n      console.log('❌ Lỗi tấn công cận chiến:', error)\n      return false\n    }\n  }\n\n  async function equipBestArmor() {\n    try {\n      const armorSlots: {[key: string]: any} = {\n        head: null,\n        torso: null,\n        legs: null,\n        feet: null\n      }\n\n      // Material priority từ xịn đến cùi\n      const materialPriority = ['netherite', 'diamond', 'iron', 'gold', 'chainmail', 'leather']\n\n      for (const item of bot.inventory.items()) {\n        // Check helmet\n        if (item.name.includes('helmet')) {\n          if (!armorSlots.head) {\n            armorSlots.head = item\n          } else {\n            // Compare by material priority (safer than maxDurability)\n            const currentMaterial = materialPriority.findIndex(m => armorSlots.head.name.includes(m))\n            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))\n            if (newMaterial < currentMaterial || newMaterial === -1) {\n              armorSlots.head = item\n            }\n          }\n        }\n        // Check chestplate\n        else if (item.name.includes('chestplate')) {\n          if (!armorSlots.torso) {\n            armorSlots.torso = item\n          } else {\n            const currentMaterial = materialPriority.findIndex(m => armorSlots.torso.name.includes(m))\n            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))\n            if (newMaterial < currentMaterial || newMaterial === -1) {\n              armorSlots.torso = item\n            }\n          }\n        }\n        // Check leggings\n        else if (item.name.includes('leggings')) {\n          if (!armorSlots.legs) {\n            armorSlots.legs = item\n          } else {\n            const currentMaterial = materialPriority.findIndex(m => armorSlots.legs.name.includes(m))\n            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))\n            if (newMaterial < currentMaterial || newMaterial === -1) {\n              armorSlots.legs = item\n            }\n          }\n        }\n        // Check boots\n        else if (item.name.includes('boots')) {\n          if (!armorSlots.feet) {\n            armorSlots.feet = item\n          } else {\n            const currentMaterial = materialPriority.findIndex(m => armorSlots.feet.name.includes(m))\n            const newMaterial = materialPriority.findIndex(m => item.name.includes(m))\n            if (newMaterial < currentMaterial || newMaterial === -1) {\n              armorSlots.feet = item\n            }\n          }\n        }\n      }\n\n      // Equip armor với async/await để tránh lỗi\n      for (const [slot, item] of Object.entries(armorSlots)) {\n        if (item) {\n          try {\n            const destination = slot === 'torso' ? 'torso' : slot\n            await bot.equip(item, destination as any)\n          } catch (equipError) {\n            // Silent fail - giáp có thể đã được trang bị rồi\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Lỗi trang bị giáp:', error)\n    }\n  }\n\n  async function equipBestTool() {\n    try {\n      const pickaxes = bot.inventory.items().filter(item => item.name.includes('pickaxe'))\n\n      if (pickaxes.length > 0) {\n        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden']\n        let bestPickaxe = pickaxes[0]\n\n        for (const material of priority) {\n          const pickaxe = pickaxes.find(p => p.name.includes(material))\n          if (pickaxe) {\n            bestPickaxe = pickaxe\n            break\n          }\n        }\n\n        if (!bot.heldItem || bot.heldItem.name !== bestPickaxe.name) {\n          await bot.equip(bestPickaxe, 'hand')\n          console.log(`🔨 Trang bị ${bestPickaxe.name}`)\n        }\n        return true\n      } else {\n        console.log('Không có pickaxe nào để trang bị.')\n        return false\n      }\n    } catch (error) {\n      console.log('Lỗi trang bị tool:', error)\n      return false\n    }\n  }\n\n  function equipOffhand() {\n    try {\n      const totem = bot.inventory.items().find(item => item.name === 'totem_of_undying')\n      const shield = bot.inventory.items().find(item => item.name.includes('shield'))\n\n      if (totem) {\n        bot.equip(totem, 'off-hand').catch(() => {})\n        console.log(`✨ Bot đã trang bị Vật Tổ vào tay trái.`)\n      } else if (shield) {\n        bot.equip(shield, 'off-hand').catch(() => {})\n        console.log(`🛡️ Bot đã trang bị Khiên vào tay trái.`)\n      }\n    } catch (error) {\n      console.log('Lỗi trang bị offhand:', error)\n    }\n  }\n\n  // Helper function để kiểm tra có nên chặn hoạt động khi câu cá không\n  function isBlockedByFishing() {\n    return autoFishingActive && (autoEquipDisabled || autoItemCollectionDisabled)\n  }\n\n  // Xử lý respawn - quay lại vị trí cũ và tiếp tục chế độ\n  async function handleRespawn() {\n    // Chỉ xử lý nếu có trạng thái được lưu\n    if (lastMode === 'idle' || !lastPosition) {\n      return\n    }\n\n    console.log(`🔄 Bắt đầu khôi phục trạng thái: ${lastMode}`)\n\n    // Đợi 3 giây để bot ổn định sau khi respawn\n    setTimeout(async () => {\n      try {\n        // Kiểm tra quyền /tp nếu chưa biết\n        if (hasTpPermission === null) {\n          console.log('🔍 Kiểm tra quyền /tp...')\n          const currentPos = bot.entity.position\n          bot.chat(`/tp ${bot.username} ${Math.floor(currentPos.x)} ${Math.floor(currentPos.y + 1)} ${Math.floor(currentPos.z)}`)\n\n          // Kiểm tra sau 2 giây\n          setTimeout(() => {\n            const newPos = bot.entity.position\n            const moved = Math.abs(newPos.y - currentPos.y) > 0.5\n\n            if (moved) {\n              hasTpPermission = true\n              console.log('✅ Bot có quyền /tp')\n              // Thực hiện teleport về vị trí cũ\n              performRespawnTeleport()\n            } else {\n              hasTpPermission = false\n              tpFailCount++\n              console.log('❌ Bot không có quyền /tp')\n              bot.chat('🥺 Tớ không có quyền /tp để quay lại vị trí cũ. Dừng hoạt động!')\n              resetRespawnState()\n            }\n          }, 2000)\n        } else if (hasTpPermission === true) {\n          // Có quyền /tp, thực hiện ngay\n          performRespawnTeleport()\n        } else {\n          // Không có quyền /tp\n          tpFailCount++\n          if (tpFailCount >= 3) {\n            bot.chat('🥺 Tớ không có quyền /tp. Dừng tất cả hoạt động!')\n            resetRespawnState()\n            return\n          }\n          console.log('❌ Bỏ qua respawn vì không có quyền /tp')\n        }\n      } catch (error) {\n        console.log('❌ Lỗi khi kiểm tra quyền /tp:', error)\n        resetRespawnState()\n      }\n    }, 3000)\n  }\n\n  function performRespawnTeleport() {\n    if (!lastPosition) return\n\n    console.log(`🚀 Teleport về vị trí cũ: ${Math.floor(lastPosition.x)}, ${Math.floor(lastPosition.y)}, ${Math.floor(lastPosition.z)}`)\n    const tpCommand = `/tp ${bot.username} ${Math.floor(lastPosition.x)} ${Math.floor(lastPosition.y)} ${Math.floor(lastPosition.z)}`\n    bot.chat(tpCommand)\n\n    // Kiểm tra thành công sau 3 giây\n    setTimeout(() => {\n      const currentPos = bot.entity.position\n      const distance = Math.sqrt(\n        Math.pow(currentPos.x - lastPosition!.x, 2) +\n        Math.pow(currentPos.y - lastPosition!.y, 2) +\n        Math.pow(currentPos.z - lastPosition!.z, 2)\n      )\n\n      if (distance < 10) {\n        console.log('✅ Teleport thành công, khôi phục chế độ')\n        restorePreviousMode()\n      } else {\n        console.log('❌ Teleport thất bại, thử lại...')\n        tpFailCount++\n        if (tpFailCount < 3) {\n          setTimeout(() => performRespawnTeleport(), 2000)\n        } else {\n          console.log('❌ Teleport thất bại quá nhiều lần, dừng khôi phục')\n          resetRespawnState()\n        }\n      }\n    }, 3000)\n  }\n\n  function restorePreviousMode() {\n    console.log(`🔄 Khôi phục chế độ: ${lastMode}`)\n\n    switch (lastMode) {\n      case 'following':\n        if (lastTargetPlayerName) {\n          bot.chat(`🔄 Quay lại theo ${lastTargetPlayerName}!`)\n          followingManager.startFollowingPlayer(lastTargetPlayerName)\n        }\n        break\n\n      case 'protecting':\n        if (lastTargetPlayerName) {\n          bot.chat(`🔄 Quay lại bảo vệ ${lastTargetPlayerName}!`)\n          protectingManager.startProtectingPlayer(lastTargetPlayerName)\n        }\n        break\n\n      case 'farming':\n        bot.chat('🔄 Quay lại auto farm!')\n        autoFarmManager.startAutoFarmAll()\n        break\n\n      case 'crop_farming':\n        bot.chat('🔄 Quay lại auto crop farmer!')\n        startAutoCropFarmer()\n        break\n\n      case 'fishing':\n        bot.chat('🔄 Quay lại auto câu!')\n        fishingManager.startSmartAutoFishing()\n        break\n\n      // Mining mode removed\n\n      case 'chest_hunting':\n        bot.chat('🔄 Quay lại auto tìm rương!')\n        startAutoChestHunting()\n        break\n\n      default:\n        console.log('🔄 Không có chế độ để khôi phục')\n        break\n    }\n\n    // Reset trạng thái sau khi khôi phục\n    resetRespawnState()\n  }\n\n  function resetRespawnState() {\n    lastPosition = null\n    lastMode = 'idle'\n    lastTargetPlayerName = ''\n    tpFailCount = 0\n  }\n\n  // Hàm trang bị vũ khí tốt nhất\n  function equipBestWeapon() {\n    try {\n      // Tìm vũ khí tốt nhất theo thứ tự: sword > axe > bow\n      const weapons = bot.inventory.items().filter(item =>\n        item.name.includes('sword') ||\n        item.name.includes('axe') ||\n        item.name.includes('bow')\n      )\n\n      if (weapons.length > 0) {\n        // Sort theo độ mạnh\n        const bestWeapon = weapons.sort((a, b) => {\n          const getWeaponTier = (name: string) => {\n            if (name.includes('netherite')) return 100\n            if (name.includes('diamond')) return 80\n            if (name.includes('iron')) return 60\n            if (name.includes('stone')) return 40\n            if (name.includes('wooden') || name.includes('wood')) return 20\n            return 10\n          }\n\n          const getWeaponType = (name: string) => {\n            if (name.includes('sword')) return 1000\n            if (name.includes('axe')) return 800\n            if (name.includes('bow')) return 600\n            return 0\n          }\n\n          const scoreA = getWeaponType(a.name) + getWeaponTier(a.name)\n          const scoreB = getWeaponType(b.name) + getWeaponTier(b.name)\n          return scoreB - scoreA\n        })[0]\n\n        if (!bot.heldItem || bot.heldItem.name !== bestWeapon.name) {\n          bot.equip(bestWeapon, 'hand').catch(() => {})\n        }\n      }\n    } catch (error) {\n      console.log('Lỗi trang bị vũ khí:', error)\n    }\n  }\n\n  // Tự động trang bị định kỳ (chặn khi đang câu) - giảm frequency vì plugin tự xử lý\n  setInterval(() => {\n    // Không trang bị khi đang câu cá hoặc đang ăn\n    if (isBlockedByFishing() || isEating) {\n      return\n    }\n\n    equipBestWeapon()\n    equipBestArmor()\n    equipOffhand()\n  }, 15000) // Tăng lên 15 giây vì plugin tự xử lý việc ăn\n\n  // ------------------ Auto eat plugin ------------------\n  function setupAutoEatPlugin() {\n    console.log('🍽️ Khởi tạo Auto Eat Plugin - Chỉ ăn khi đói < 6 và an toàn!')\n\n    // Kiểm tra xem bot.autoEat có tồn tại không\n    if (!bot.autoEat) {\n      console.log('⚠️ Auto eat plugin không khả dụng, sử dụng manual eating')\n      autoEatPluginActive = false\n      setupManualEating()\n      return\n    }\n\n    console.log('✅ Auto eat plugin đã hoạt động!')\n    autoEatPluginActive = true\n\n    try {\n      // Cấu hình auto eat plugin\n      bot.autoEat.options = {\n        priority: 'foodPoints', // Ưu tiên theo điểm thức ăn\n        startAt: 6, // Bắt đầu ăn khi food < 6 (3 đùi)\n        bannedFood: [\n          // Loại bỏ thức ăn có hiệu ứng độc\n          'spider_eye', 'poisonous_potato', 'pufferfish', 'raw_chicken',\n          'rotten_flesh', 'suspicious_stew'\n        ],\n        // Chỉ ăn những thức ăn an toàn không gây hiệu ứng độc\n        allowedFood: [\n          'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',\n          'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',\n          'golden_apple', 'enchanted_golden_apple', 'cooked_mutton',\n          'cookie', 'melon_slice', 'sweet_berries', 'honey_bottle',\n          'milk_bucket', 'mushroom_stew', 'rabbit_stew', 'beetroot_soup'\n        ],\n        timeout: 3000 // Timeout 3 giây cho việc ăn\n      }\n\n      // Event listener khi bắt đầu ăn\n      bot.on('autoeat_started', (item: any) => {\n        console.log(`🍞 Auto eat bắt đầu ăn: ${item.name} - Food hiện tại: ${bot.food}/20`)\n        isEating = true\n      })\n\n      // Event listener khi ăn xong\n      bot.on('autoeat_finished', (item: any) => {\n        console.log(`✅ Auto eat hoàn thành: ${item.name} - Food hiện tại: ${bot.food}/20`)\n        isEating = false\n\n        // Trang bị lại công cụ mining sau khi ăn nếu đang mine\n        if (autoMiningActive) {\n          setTimeout(() => {\n            equipBestPickaxe()\n          }, 500)\n        } else if (!isBlockedByFishing()) {\n          setTimeout(() => {\n            equipBestWeapon()\n          }, 500)\n        }\n      })\n\n      // Event listener khi lỗi ăn\n      bot.on('autoeat_error', (error: any) => {\n        console.log('⚠️ Auto eat lỗi:', error.message)\n        isEating = false\n      })\n\n      // Kiểm tra mob xung quanh mỗi 2 giây - chỉ ăn khi an toàn\n      setInterval(() => {\n        if (!autoEatPluginActive || !bot.autoEat) return\n\n        const currentTime = Date.now()\n        if (currentTime - lastMobCheckTime < 2000) return // Chỉ check mỗi 2 giây\n        lastMobCheckTime = currentTime\n\n        const food = bot.food\n\n        // Chỉ kiểm tra khi thực sự cần ăn\n        if (food >= 6) {\n          // Đủ no, tắt auto eat\n          if (bot.autoEat.isEnabled && bot.autoEat.isEnabled()) {\n            bot.autoEat.disable()\n          }\n          return\n        }\n\n        // Quét mob xung quanh 4 blocks - chỉ khi không đang mine\n        if (!autoMiningActive) {\n          const nearbyMobs = Object.values(bot.entities).filter((entity: any) => {\n            if (!entity || !entity.position) return false\n            if (entity.type !== 'mob') return false\n            if (entity.name?.includes('villager') || entity.name?.includes('iron_golem')) return false\n\n            const distance = bot.entity.position.distanceTo(entity.position)\n            return distance <= 4\n          })\n\n          if (nearbyMobs.length === 0) {\n            // An toàn, bật auto eat\n            if (bot.autoEat.isEnabled && !bot.autoEat.isEnabled() && food < 6) {\n              bot.autoEat.enable()\n              console.log('🍽️ Vùng an toàn - Bật auto eat (Food:', food, '/20)')\n            }\n          } else {\n            // Có mob gần, tắt auto eat để tập trung chiến đấu\n            if (bot.autoEat.isEnabled && bot.autoEat.isEnabled()) {\n              bot.autoEat.disable()\n              console.log('⚔️ Có mob gần - Tạm tắt auto eat để combat')\n            }\n          }\n        } else {\n          // Đang mine - luôn cho phép ăn khi cần\n          if (bot.autoEat.isEnabled && !bot.autoEat.isEnabled() && food < 6) {\n            bot.autoEat.enable()\n            console.log('⛏️ Mine mode - Bật auto eat (Food:', food, '/20)')\n          }\n        }\n      }, 2000) // Check mỗi 2 giây\n\n      console.log('🍽️ Auto eat plugin setup hoàn tất!')\n    } catch (error) {\n      console.log('❌ Lỗi setup auto eat plugin:', error.message)\n      autoEatPluginActive = false\n      setupManualEating()\n    }\n  }\n\n  // Backup manual eating system\n  function setupManualEating() {\n    console.log('🍽️ Khởi tạo Manual Eating System')\n\n    setInterval(() => {\n      if (autoEatPluginActive || isEating) return\n\n      const food = bot.food\n      if (food < 6) { // Chỉ ăn khi đói < 6\n        const safeFood = bot.inventory.items().find(item => {\n          const name = item.name.toLowerCase()\n          const safeItems = [\n            'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',\n            'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',\n            'golden_apple', 'enchanted_golden_apple', 'cooked_mutton',\n            'cookie', 'melon_slice', 'sweet_berries'\n          ]\n          return safeItems.some(safe => name.includes(safe))\n        })\n\n        if (safeFood) {\n          isEating = true\n          console.log(`🍞 Manual eating: ${safeFood.name}`)\n\n          bot.equip(safeFood, 'hand').then(() => {\n            bot.consume().then(() => {\n              console.log(`✅ Đã ăn ${safeFood.name}`)\n              isEating = false\n\n              // Trang bị lại công cụ sau khi ăn\n              if (autoMiningActive) {\n                setTimeout(() => equipBestPickaxe(), 500)\n              } else if (!isBlockedByFishing()) {\n                setTimeout(() => equipBestWeapon(), 500)\n              }\n            }).catch(() => {\n              isEating = false\n            })\n          }).catch(() => {\n            isEating = false\n          })\n        }\n      }\n    }, 3000) // Check mỗi 3 giây\n  }\n\n  // Hàm tắt auto eat plugin\n  function disableAutoEatPlugin() {\n    if (autoEatPluginActive && bot.autoEat) {\n      bot.autoEat.disable()\n      autoEatPluginActive = false\n      console.log('⏹️ Auto eat plugin đã tắt')\n    }\n  }\n\n  // ------------------ Nhặt item ------------------\n  let itemCollectionDisabled = false // Biến để tắt nhặt đồ khi dừng\n\n  function collectNearbyItems() {\n    setInterval(() => {\n      // Chặn nhặt đồ khi đang câu cá hoặc khi bị disabled\n      if (isBlockedByFishing() || itemCollectionDisabled) {\n        return\n      }\n\n      try {\n        const entities = Object.values(bot.entities)\n        for (const entity of entities) {\n          if (entity.name === 'item' && entity.position && bot.entity.position.distanceTo(entity.position) < 5) {\n            bot.lookAt(entity.position, true).catch(() => {})\n            bot.collectBlock.collect(entity).catch(() => {})\n          }\n        }\n      } catch (error) {\n        // Ignore errors\n      }\n    }, 2000)\n  }\n\n  // ============= ITEM TRACKING SYSTEM =============\n  // Map để lưu thông tin item entities khi chúng spawn\n  const itemEntityMap = new Map<number, {\n    id: number,\n    count: number,\n    name: string,\n    displayName: string,\n    spawnTime: number\n  }>()\n\n  // Theo dõi khi item entities spawn để lưu metadata\n  bot.on('entitySpawn', (entity: any) => {\n    // Chỉ quan tâm đến item entities\n    if (entity.name === 'item' && entity.metadata) {\n      try {\n        // Lấy thông tin item từ metadata\n        const itemStack = entity.metadata.item\n        if (itemStack && itemStack.itemId !== undefined) {\n          // Tra cứu tên item từ registry bằng itemId\n          const itemInfo = bot.registry.items[itemStack.itemId]\n          if (itemInfo) {\n            // Lưu vào Map với entity ID làm key\n            itemEntityMap.set(entity.id, {\n              id: itemStack.itemId,\n              count: itemStack.itemCount || 1,\n              name: itemInfo.name,\n              displayName: itemInfo.displayName || itemInfo.name,\n              spawnTime: Date.now()\n            })\n\n            console.log(`📋 Item spawned: ${itemInfo.name} x${itemStack.itemCount || 1} (entity ${entity.id})`)\n          }\n        }\n      } catch (error) {\n        // Bỏ qua lỗi parsing metadata\n      }\n    }\n  })\n\n  // Cleanup Map định kỳ để tránh memory leak (xóa items cũ hơn 60 giây)\n  setInterval(() => {\n    const now = Date.now()\n    for (const [entityId, itemData] of itemEntityMap.entries()) {\n      if (now - itemData.spawnTime > 60000) { // 60 giây\n        itemEntityMap.delete(entityId)\n      }\n    }\n  }, 30000) // Cleanup mỗi 30 giây\n\n  // Track khi bot nhặt item - ENHANCED VERSION\n  bot.on('playerCollect', (collector: any, collected: any) => {\n    if (collector.username === bot.username) {\n      let itemName = 'Unknown item'\n      let itemCount = 1\n\n      // PHƯƠNG PHÁP 1: Lấy từ Map đã lưu (ưu tiên cao nhất)\n      if (collected.id && itemEntityMap.has(collected.id)) {\n        const itemData = itemEntityMap.get(collected.id)!\n        itemName = itemData.displayName || itemData.name\n        itemCount = itemData.count\n\n        // Xóa khỏi Map sau khi sử dụng\n        itemEntityMap.delete(collected.id)\n\n        console.log(`🎁 Bot đã nhận: ${itemName} x${itemCount} (từ Map)`)\n        return\n      }\n\n      // PHƯƠNG PHÁP 2: Thử lấy từ metadata hiện tại\n      if (collected.metadata && collected.metadata.item) {\n        const itemStack = collected.metadata.item\n        if (itemStack.itemId !== undefined) {\n          const itemInfo = bot.registry.items[itemStack.itemId]\n          if (itemInfo) {\n            itemName = itemInfo.displayName || itemInfo.name\n            itemCount = itemStack.itemCount || 1\n            console.log(`🎁 Bot đã nhận: ${itemName} x${itemCount} (từ metadata)`)\n            return\n          }\n        }\n      }\n\n      // PHƯƠNG PHÁP 3: Fallback methods\n      if (collected.metadata && collected.metadata.itemName) {\n        itemName = collected.metadata.itemName\n      } else if (collected.name && collected.name !== 'item') {\n        itemName = collected.name\n      } else if (collected.metadata && collected.metadata.itemId) {\n        const itemById = bot.registry.items[collected.metadata.itemId]\n        if (itemById) {\n          itemName = itemById.displayName || itemById.name\n        }\n      }\n\n      // Làm sạch tên item (bỏ minecraft: prefix nếu có)\n      if (itemName.includes(':')) {\n        itemName = itemName.split(':').pop() || itemName\n      }\n\n      // Log với tên đã được cải thiện\n      console.log(`🎁 Bot đã nhận: ${itemName} x${itemCount} (fallback)`)\n    }\n  })\n\n  // Backup method: Listen for inventory changes để track items được nhặt\n  bot.on('windowUpdate', (slot: number, oldItem: any, newItem: any) => {\n    // Chỉ track khi có item mới được thêm vào inventory\n    if (newItem && !oldItem && slot >= 9 && slot <= 44) { // Slots của main inventory\n      let itemName = newItem.name || 'unknown_item'\n\n      // Cải thiện tên hiển thị\n      if (newItem.displayName) {\n        itemName = newItem.displayName\n      } else if (newItem.name) {\n        // Convert technical name thành display name\n        itemName = newItem.name.replace(/_/g, ' ')\n          .split(' ')\n          .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ')\n      }\n\n      console.log(`📦 Inventory updated: +${itemName} x${newItem.count} (slot ${slot})`)\n    }\n  })\n\n  // ------------------ Random Status Updates ------------------\n  function startStatusUpdates() {\n    setInterval(() => {\n      // Removed flirting, now only provides status updates when needed\n      if (Math.random() < 0.1) { // 10% chance every 30s for status\n        const statusMessages = [\n          \"🤖 Tớ đang hoạt động bình thường!\",\n          \"⚡ Hệ thống bot stable!\",\n          \"🔋 Bot ready cho commands!\",\n          \"🌟 Mọi thứ OK!\"\n        ]\n        const randomMessage = statusMessages[Math.floor(Math.random() * statusMessages.length)]\n        console.log(`Status: ${randomMessage}`)\n      }\n    }, 30000) // 30 giây một lần\n  }\n\n  // Function để cập nhật web status real-time - silent mode\n  function startWebStatusUpdates() {\n    setInterval(() => {\n      if (bot && bot.entity) {\n        // Determine current mode\n        let currentMode = 'idle';\n        let currentStatus = 'Đang chờ lệnh';\n\n        if (isFollowing) {\n          currentMode = 'following';\n          currentStatus = `Đang theo ${targetPlayer?.username || 'player'}`;\n        } else if (isProtecting) {\n          currentMode = 'protecting';\n          currentStatus = `Đang bảo vệ ${targetPlayer?.username || 'player'}`;\n        } else if (autoFarmActive) {\n          currentMode = 'autofarming';\n          currentStatus = 'Đang auto farm monsters';\n        } else if (autoCropFarmerActive) {\n          currentMode = 'crop_farming';\n          currentStatus = 'Đang auto crop farmer';\n        } else if (autoFishingActive) {\n          currentMode = 'fishing';\n          currentStatus = 'Đang câu cá';\n        // Mining status removed\n        } else if (autoMiningActive) {\n          currentMode = 'mining';\n          currentStatus = `Đang đào ${targetOreType}`;\n        } else if (autoChestHuntingActive) {\n          currentMode = 'chest_hunting';\n          currentStatus = 'Đang tìm rương';\n        }\n\n        // Get nearby entities\n        const nearbyMobs = Object.values(bot.entities)\n          .filter(entity => entity.type === 'mob' && entity.position)\n          .filter(entity => bot.entity.position.distanceTo(entity.position) < 10)\n          .map(entity => ({\n            type: entity.name || 'unknown',\n            distance: Math.round(bot.entity.position.distanceTo(entity.position) * 10) / 10\n          }))\n          .slice(0, 5); // Limit to 5 entities\n\n        const currentPosition = {\n          x: Math.round(bot.entity.position.x),\n          y: Math.round(bot.entity.position.y),\n          z: Math.round(bot.entity.position.z)\n        };\n\n        // Silent update bot status for web interface (no console logs)\n        updateBotStatus({\n          connected: true,\n          health: bot.health,\n          food: bot.food,\n          position: currentPosition,\n          mode: currentMode,\n          status: currentStatus,\n          nearbyMobs: nearbyMobs,\n          equipment: {\n            weapon: bot.heldItem?.name || null,\n            armor: [] // Could be expanded later\n          },\n          targetPlayer: targetPlayer?.username || null,\n          lastActivity: new Date().toLocaleString('vi-VN')\n        });\n\n        // Đồng bộ với Prismarine Viewer mỗi 10 giây để giảm spam\n        if (Date.now() % 10000 < 2000) {\n          const viewData = {\n            position: currentPosition,\n            health: bot.health,\n            food: bot.food,\n            inventory: getFullInventoryData()\n          };\n\n          syncWithPrismarineViewer(viewData);\n        }\n      }\n    }, 5000) // Sync mỗi 5 giây để cân bằng giữa real-time và performance\n  }\n\n  // ------------------ SMART AUTO FISHING ------------------\n  // Biến tracking cho smart auto fishing\n  let isFishing = false\n  let fishingInterval: NodeJS.Timeout | null = null\n  let currentHook: any = null\n  let hookCheckInterval: NodeJS.Timeout | null = null\n  let fishingStartTime = 0\n  let hasFishBitten = false\n  let lastHookPosition: any = null\n\n  // Alias để tương thích với lệnh chat cũ\n  startSmartAutoFishing = function() {\n    // Dừng các hoạt động khác TRƯỚC khi bắt đầu câu\n    stopFollowing()\n    stopProtecting()\n    autoFarmActive = false\n\n    // Kích hoạt chế độ câu cá thông minh\n    autoFishingActive = true\n    autoItemCollectionDisabled = true  // Tạm dừng nhặt đồ\n    autoEquipDisabled = true           // Tạm dừng tự động trang bị\n    itemCollectionDisabled = false     // Bật lại nhặt đồ cho fishing\n\n    isFishing = false\n    currentHook = null\n    bobberThrowCount = 0 // Reset đếm âm thanh fishing_bobber.throw cho lần câu này\n\n    bot.chat('🎣 Bắt đầu auto câu thông minh! Tớ chỉ cầm cần câu thôi nè~ ✨')\n    console.log('🎣 Smart Auto Fishing - Activated')\n\n    if (fishingInterval) {\n      clearInterval(fishingInterval)\n    }\n\n    fishingInterval = setInterval(async () => {\n      if (!autoFishingActive) {\n        clearInterval(fishingInterval!)\n        fishingInterval = null\n        return\n      }\n\n      // Nếu đang câu thì không làm gì cả, chỉ đợi\n      if (isFishing) {\n        return\n      }\n\n      try {\n        // BƯỚC 1: Kiểm tra cần câu\n        const fishingRod = bot.inventory.items().find(item => item.name.includes('fishing_rod'))\n\n        if (!fishingRod) {\n          bot.chat('🥺 Không có cần câu! Cần cần câu để hoạt động nè!')\n          stopSmartAutoFishing()\n          return\n        }\n\n        // BƯỚC 2: Chỉ cầm cần câu - bỏ tất cả đồ khác\n        if (!bot.heldItem || !bot.heldItem.name.includes('fishing_rod')) {\n          await bot.equip(fishingRod, 'hand')\n          console.log('🎣 Chỉ cầm cần câu:', fishingRod.name)\n          await new Promise(resolve => setTimeout(resolve, 1200))\n        }\n\n        // BƯỚC 3: Tìm nước để câu\n        const waterBlock = bot.findBlock({\n          matching: (block) => block && (block.name === 'water'),\n          maxDistance: 20,\n          useExtraInfo: true\n        })\n\n        if (waterBlock) {\n          // Di chuyển đến gần nước nếu cần\n          if (bot.entity.position.distanceTo(waterBlock.position) > 5) {\n            const movements = new Movements(bot)\n            movements.allowSprinting = true\n            bot.pathfinder.setMovements(movements)\n            const nearWaterGoal = new goals.GoalNear(waterBlock.position.x, waterBlock.position.y, waterBlock.position.z, 4)\n            bot.pathfinder.setGoal(nearWaterGoal)\n            await new Promise(resolve => setTimeout(resolve, 2000))\n            bot.pathfinder.setGoal(null)\n          }\n\n          // BƯỚC 4: Thả câu xuống nước\n          await bot.lookAt(waterBlock.position.offset(0.5, 0.5, 0.5), true)\n          await new Promise(resolve => setTimeout(resolve, 400))\n\n          console.log('🎣 Thả cần xuống nước!')\n          isFishing = true\n          currentHook = null\n          bobberThrowCount = 0 // Reset đếm âm thanh fishing_bobber.throw cho lần câu này\n          bot.activateItem() // Thả phao\n\n          // BƯỚC 5: Setup event listeners cho fishing\n          setupFishingEventListeners()\n\n          // BƯỚC 6: Đợi 4 giây trước khi theo dõi\n          setTimeout(() => {\n            if (!autoFishingActive || !isFishing) return\n\n            // Tìm fishing hook entity với nhiều lần thử\n            let attempts = 0\n            const maxAttempts = 10\n            const findHook = () => {\n              attempts++\n              currentHook = Object.values(bot.entities).find(entity =>\n                (entity.name === 'fishing_bobber' || entity.name === 'fishing_hook') &&\n                entity.position &&\n                bot.entity.position.distanceTo(entity.position) < 15\n              )\n\n              if (currentHook) {\n                console.log('✅ Đã tìm thấy phao, bắt đầu theo dõi chuyển động...')\n                startSmartHookWatcher()\n              } else if (attempts < maxAttempts) {\n                console.log(`⚠️ Không thấy phao, thử lại... (${attempts}/${maxAttempts})`)\n                setTimeout(findHook, 500) // Thử lại sau 0.5 giây\n              } else {\n                console.log('❌ Không thể tìm thấy phao sau nhiều lần thử, thả cần lại')\n                isFishing = false\n              }\n            }\n            findHook()\n          }, 4000) // Đợi 4 giây như yêu cầu trước khi theo dõi\n\n        } else {\n          bot.chat('🥺 Không tìm thấy nước gần! Cần tìm ao, sông hoặc biển~')\n          stopSmartAutoFishing()\n        }\n\n      } catch (error) {\n        console.log('❌ Lỗi smart fishing:', error)\n        bot.chat('😵 Có lỗi khi câu cá! Thử lại sau~')\n        isFishing = false\n      }\n    }, 6000) // Kiểm tra mỗi 6 giây\n  }\n\n  // Alias để tương thích với code cũ\n  function startAutoFishing() {\n    return startSmartAutoFishing()\n  }\n\n  // Hàm theo dõi fishing hook metadata - ƯU TIÊN SỐ 1\n  let lastHookMetadata: any = null\n\n  // Hệ thống phát hiện cá cắn thông minh - FIXED VERSION\n  let fishingIndicators = {\n    particleCount: 0,\n    velocityDetections: 0,\n    positionChanges: 0,\n    strongMovements: 0,\n    lastResetTime: Date.now()\n  }\n\n  function startSmartHookWatcher() {\n    if (hookCheckInterval) {\n      clearInterval(hookCheckInterval)\n    }\n\n    fishingStartTime = Date.now()\n    hasFishBitten = false\n    lastHookPosition = currentHook.position ? { ...currentHook.position } : null\n\n    // Reset indicators khi bắt đầu fishing mới\n    fishingIndicators = {\n      particleCount: 0,\n      velocityDetections: 0,\n      positionChanges: 0,\n      strongMovements: 0,\n      lastResetTime: Date.now()\n    }\n\n    console.log('🎣 Bắt đầu smart hook watcher, đợi 6 giây trước khi phát hiện...')\n\n    hookCheckInterval = setInterval(() => {\n      if (!autoFishingActive || !isFishing || hasFishBitten) {\n        if (hookCheckInterval) {\n          clearInterval(hookCheckInterval)\n          hookCheckInterval = null\n        }\n        return\n      }\n\n      const currentTime = Date.now()\n      const fishingDuration = currentTime - fishingStartTime\n\n      // Tìm hook entity hiện tại\n      const hookEntity = Object.values(bot.entities).find(entity =>\n        entity.id === currentHook.id &&\n        (entity.name === 'fishing_bobber' || entity.name === 'fishing_hook')\n      )\n\n      if (!hookEntity) {\n        // Hook biến mất = đã câu được cá (chỉ sau 6 giây)\n        if (fishingDuration > 6000) {\n          console.log('🐟 PHAO BIẾN MẤT - ĐÃ CÂU ĐƯỢC CÁ!')\n          hasFishBitten = true\n          handleSmartFishCaught()\n        }\n        return\n      }\n\n      // CHỈ BẮT ĐẦU PHÁT HIỆN SAU 6 GIÂY ĐỂ TRÁNH GIẬT CẦN SỚM\n      if (fishingDuration < 6000) {\n        // Cập nhật vị trí để chuẩn bị\n        if (hookEntity.position) {\n          lastHookPosition = { ...hookEntity.position }\n        }\n        return\n      }\n\n      // PHƯƠNG PHÁP 1: Theo dõi chuyển động Y (phao bị kéo xuống)\n      if (hookEntity.position && lastHookPosition) {\n        const yChange = lastHookPosition.y - hookEntity.position.y // Dương = phao chìm xuống\n        const distanceMoved = Math.sqrt(\n          (hookEntity.position.x - lastHookPosition.x) ** 2 +\n          (hookEntity.position.y - lastHookPosition.y) ** 2 +\n          (hookEntity.position.z - lastHookPosition.z) ** 2\n        )\n\n        // Log debug mỗi 2 giây (bớt spam)\n        if (fishingDuration % 2000 < 100) {\n          console.log(`🎣 DEBUG: Y: ${yChange.toFixed(3)}, Dist: ${distanceMoved.toFixed(3)}, Time: ${(fishingDuration/1000).toFixed(1)}s, Sounds: ${bobberThrowCount}`)\n        }\n\n        // ĐẾM CÁC DẤU HIỆU CÁ CẮN (chỉ sau 6 giây) - THÔNG SỐ TỐI ƯU\n\n        // ĐIỀU KIỆN 1: Âm thanh fishing_bobber.throw lần 2 + chuyển động thật (ngưỡng cá cắn)\n        if (bobberThrowCount >= 2 && (yChange > 0.25 || distanceMoved > 0.25)) {\n          console.log(`🐟 ÂM THANH LẦN 2 + CÁ CẮN THẬT! Y: ${yChange.toFixed(3)}, D: ${distanceMoved.toFixed(3)}`)\n          handleSmartFishCaught()\n          return\n        }\n\n        // ĐIỀU KIỆN 2: Chuyển động cực mạnh (chắc chắn có cá) - Ngưỡng gần như chắc chắn\n        if (yChange > 0.40 || distanceMoved > 0.40) {\n          console.log(`🐟 CHUYỂN ĐỘNG CỰC MẠNH! Y: ${yChange.toFixed(3)}, Distance: ${distanceMoved.toFixed(3)}`)\n          handleSmartFishCaught()\n          return\n        }\n      }\n\n      // PHƯƠNG PHÁP 2: Velocity detection - THÔNG SỐ TỐI ƯU\n      if (hookEntity.velocity && fishingDuration > 6000) {\n        const velocityMagnitude = Math.sqrt(\n          hookEntity.velocity.x ** 2 +\n          hookEntity.velocity.y ** 2 +\n          hookEntity.velocity.z ** 2\n        )\n\n        // Chỉ đếm velocity trên ngưỡng nhiễu (>0.05)\n        if (velocityMagnitude > 0.05) {\n          fishingIndicators.velocityDetections++\n        }\n\n        // Velocity cá cắn + âm thanh (ngưỡng tối ưu >0.25)\n        if (velocityMagnitude > 0.25 && bobberThrowCount >= 2) {\n          console.log(`🐟 VELOCITY CÁ CẮN + ÂM THANH! V: ${velocityMagnitude.toFixed(3)}`)\n          handleSmartFishCaught()\n          return\n        }\n\n        // Velocity gần như chắc chắn (>0.40)\n        if (velocityMagnitude > 0.40) {\n          console.log(`🐟 VELOCITY CHẮC CHẮN! V: ${velocityMagnitude.toFixed(3)}`)\n          handleSmartFishCaught()\n          return\n        }\n      }\n\n      // Cập nhật vị trí cuối của phao\n      if (hookEntity.position) {\n        lastHookPosition = { ...hookEntity.position }\n      }\n\n      // HỆ THỐNG DỰ PHÒNG - CHỈ KÍCH HOẠT MUỘN HƠN\n      const totalIndicators = fishingIndicators.particleCount + fishingIndicators.velocityDetections + fishingIndicators.positionChanges\n\n      // DỰ PHÒNG 1: Sau 10 giây + nhiều dấu hiệu mạnh\n      if (fishingDuration > 10000 && fishingIndicators.strongMovements >= 5) {\n        console.log(`🐟 DỰ PHÒNG (10s): Strong movements: ${fishingIndicators.strongMovements}`)\n        handleSmartFishCaught()\n        return\n      }\n\n      // DỰ PHÒNG 2: Sau 15 giây + có dấu hiệu + âm thanh\n      if (fishingDuration > 15000 && totalIndicators >= 10 && bobberThrowCount >= 1) {\n        console.log(`🐟 DỰ PHÒNG (15s): Total: ${totalIndicators}, Sounds: ${bobberThrowCount}`)\n        handleSmartFishCaught()\n        return\n      }\n\n      // Timeout sau 25 giây (giảm từ 30 giây)\n      if (fishingDuration > 25000) {\n        console.log('⏰ Timeout 25s - rút cần và thả lại')\n        try {\n          bot.activateItem()\n          console.log('🎣 Đã rút cần timeout')\n        } catch (error) {\n          console.log('❌ Lỗi rút cần timeout:', error)\n        }\n        isFishing = false\n        currentHook = null\n        bobberThrowCount = 0\n        setTimeout(() => {\n          if (autoFishingActive && !isFishing) {\n            console.log('🎣 Thả cần mới sau timeout...')\n          }\n        }, 1000)\n      }\n\n    }, 100) // Tăng interval từ 30ms lên 100ms để giảm load\n  }\n\n  // Setup fishing event listeners để backup detection\n  function setupFishingEventListeners() {\n    console.log('🎣 Setting up fishing event listeners...')\n\n    // Clear tất cả sound listeners cũ trước khi thêm mới\n    bot.removeAllListeners('soundEffectHeard')\n    bot.removeAllListeners('particle')\n    console.log('🧹 Đã xóa tất cả sound listeners cũ')\n\n    // Listen for sound effects\n    const soundListener = (sound: any, position: any) => {\n      if (!autoFishingActive || !isFishing || hasFishBitten) return\n\n      const fishingDuration = Date.now() - fishingStartTime\n      if (fishingDuration < 4000) return // Chỉ listen sau 4 giây\n\n      // Console để debug âm thanh (nhưng không log fishing_bobber.throw để giảm spam)\n      if (!sound.includes('entity.fishing_bobber.throw') &&\n          !sound.includes('.step') &&\n          !sound.includes('.converted') &&\n          !sound.includes('.aggro')) {\n        console.log(`🔊 Heard sound: ${sound}, position:`, position)\n      }\n\n      // Đếm số lần âm thanh fishing_bobber.throw xuất hiện\n      if (sound.includes('entity.fishing_bobber.throw')) {\n        bobberThrowCount++\n        console.log(`🎣 Âm thanh fishing_bobber.throw lần ${bobberThrowCount}`)\n\n        // Chỉ rút cần khi âm thanh này xuất hiện lần thứ 2 (cá cắn thật)\n        if (bobberThrowCount === 2) {\n          console.log('🐟 SOUND DETECTION - CÁ CẮN THẬT! (Lần 2)')\n          handleSmartFishCaught()\n        }\n        return // Thoát khỏi function sau khi xử lý\n      }\n\n      // Bỏ qua các âm thanh khác không liên quan\n      if (sound.includes('entity.fishing_bobber.retrieve') ||\n          sound.includes('.step') ||\n          sound.includes('.aggro') ||\n          sound.includes('.converted') ||\n          sound.includes('.break')) {\n        return\n      }\n\n      // Phương pháp dự phòng: Chỉ phát hiện âm thanh water splash thực sự từ cá cắn\n      if (sound && (sound.includes('entity.generic.splash') ||\n                   sound.includes('block.water.ambient') ||\n                   sound.includes('entity.bobber.splash'))) {\n        console.log('🐟 BACKUP SOUND DETECTION - CÁ CẮN!')\n        handleSmartFishCaught()\n      }\n    }\n\n    // Listen for particles near fishing hook - CHỈ ĐỂ THEO DÕI, KHÔNG RÚT CẦN\n    const particleListener = (particle: any) => {\n      if (!autoFishingActive || !isFishing || hasFishBitten) return\n      if (!currentHook) return\n\n      const fishingDuration = Date.now() - fishingStartTime\n      if (fishingDuration < 4000) return\n\n      // Check if particle is near fishing hook\n      if (particle.position && currentHook.position) {\n        const distance = Math.sqrt(\n          (particle.position.x - currentHook.position.x) ** 2 +\n          (particle.position.y - currentHook.position.y) ** 2 +\n          (particle.position.z - currentHook.position.z) ** 2\n        )\n\n        if (distance < 3) {\n          // CHỈ LOG ĐỂ THEO DÕI - KHÔNG RÚT CẦN\n          if (particle.name && (particle.name.includes('splash') || particle.name.includes('fishing'))) {\n            console.log(`🌊 Particle ${particle.name} gần phao (${distance.toFixed(2)}m) - chờ âm thanh...`)\n          }\n        }\n      }\n    }\n\n    // Thêm listeners\n    bot.on('soundEffectHeard', soundListener)\n    bot.on('particle', particleListener)\n\n    // Lưu references để cleanup sau này (sẽ được cleanup trong stopSmartAutoFishing)\n    // Listeners sẽ được remove bằng removeAllListeners khi setup lại\n  }\n\n  function handleSmartFishCaught() {\n    if (!isFishing) return\n    if (hasFishBitten) return // Tránh xử lý trùng lặp\n\n    hasFishBitten = true\n\n    // Dừng timer theo dõi ngay lập tức\n    if (hookCheckInterval) {\n      clearInterval(hookCheckInterval)\n      hookCheckInterval = null\n    }\n\n    console.log('🎣 Phát hiện cá cắn! Đang rút cần...')\n\n    // Rút cần NGAY LẬP TỨC - không delay, không chat spam\n    try {\n      // Đảm bảo bot đang cầm cần câu\n      const fishingRod = bot.inventory.items().find(item => item.name.includes('fishing_rod'))\n      if (fishingRod && (!bot.heldItem || !bot.heldItem.name.includes('fishing_rod'))) {\n        bot.equip(fishingRod, 'hand').then(() => {\n          // Rút cần sau khi trang bị\n          bot.activateItem()\n          console.log('🎣 Đã rút cần sau khi trang bị!')\n          // Chat chỉ 1 lần khi thành công\n          bot.chat('🎣 Câu thành công! ✨')\n        }).catch(err => {\n          console.log('Lỗi trang bị cần khi rút:', err)\n          bot.activateItem() // Thử rút dù sao\n          bot.chat('🎣 Câu thành công! ✨')\n        })\n      } else {\n        // Đã cầm cần câu rồi, rút ngay\n        bot.activateItem()\n        console.log('🎣 Đã rút cần!')\n        // Chat chỉ 1 lần khi thành công\n        bot.chat('🎣 Câu thành công! ✨')\n      }\n    } catch (error) {\n      console.log('❌ Lỗi khi rút cần:', error)\n      // Thử rút lần nữa\n      setTimeout(() => {\n        try {\n          bot.activateItem()\n          console.log('🎣 Thử rút cần lần 2')\n          bot.chat('🎣 Câu thành công! ✨')\n        } catch (e) {\n          console.log('❌ Không thể rút cần:', e)\n        }\n      }, 200)\n    }\n\n    // Reset trạng thái\n    isFishing = false\n    currentHook = null\n    lastHookPosition = null\n    bobberThrowCount = 0 // Reset đếm âm thanh fishing_bobber.throw cho lần câu tiếp theo\n\n    // Reset để câu tiếp - không có chat thêm\n    setTimeout(() => {\n      hasFishBitten = false\n      fishingStartTime = 0\n      lastHookPosition = null\n      console.log('🎣 Sẵn sàng câu tiếp...')\n    }, 1000)\n  }\n\n  // Alias để tương thích với code cũ\n  function handleFishCaught() {\n    return handleSmartFishCaught()\n  }\n\n  stopSmartAutoFishing = function() {\n    autoFishingActive = false\n    autoItemCollectionDisabled = false  // Bật lại nhặt đồ\n    autoEquipDisabled = false           // Bật lại tự động trang bị\n\n    isFishing = false\n    hasFishBitten = false\n    bobberThrowCount = 0 // Reset đếm âm thanh fishing_bobber.throw\n\n    if (fishingInterval) {\n      clearInterval(fishingInterval)\n      fishingInterval = null\n    }\n\n    if (hookCheckInterval) {\n      clearInterval(hookCheckInterval)\n      hookCheckInterval = null\n    }\n\n    currentHook = null\n    lastHookPosition = null\n\n    // Chỉ chat khi được gọi trực tiếp, không chat khi dừng tất cả\n    if (!arguments[0]) { // Không có parameter silent\n      bot.chat('🎣 Dừng auto câu! Các chức năng khác hoạt động lại~')\n    }\n    console.log('⏹️ Smart Auto Fishing - Deactivated')\n    console.log('✅ Auto item collection: Enabled')\n    console.log('✅ Auto equipment: Enabled')\n  }\n\n  // Alias để tương thích với code cũ\n  function stopAutoFishing() {\n    return stopSmartAutoFishing()\n  }\n\n  // ------------------ AUTO MINING REMOVED ------------------\n  // Chức năng auto mining đã được loại bỏ hoàn toàn\n\n  // ------------------ AUTO CHEST HUNTING REMOVED ------------------\n  // Chức năng auto tìm rương đã được xóa bỏ hoàn toàn\n\n  // ------------------ SMART AUTO BUILD - PHIÊN BÊN MỚI ------------------\n  let autoBuildActive = false\n  let currentBuildProject: any = null\n  let buildProgress = 0\n\n  // Danh sách thiết kế có sẵn tối ưu\n  const quickBuilds: { [key: string]: any } = {\n    'nhà nhỏ': {\n      name: 'Ngôi nhà nhỏ xinh',\n      size: '7x7x4',\n      blocks: [\n        // Y=0: Nền\n        [\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks']\n        ],\n        // Y=1: Tường\n        [\n          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','oak_door','air','air','air','air','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs']\n        ],\n        // Y=2: Tường + cửa sổ\n        [\n          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','glass','air','air','air','glass','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','air','air','air','air','air','oak_logs'],\n          ['oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs','oak_logs']\n        ],\n        // Y=3: Mái\n        [\n          ['air','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','air'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks'],\n          ['air','oak_planks','oak_planks','oak_planks','oak_planks','oak_planks','air']\n        ]\n      ],\n      materials: { 'oak_planks': 40, 'oak_logs': 30, 'oak_door': 1, 'glass': 2 }\n    },\n\n    'tháp nhỏ': {\n      name: 'Tháp quan sát',\n      size: '5x5x8',\n      blocks: Array.from({length: 8}, (_, y) => {\n        if (y === 0) {\n          // Nền\n          return Array.from({length: 5}, () => Array(5).fill('stone_bricks'))\n        } else if (y < 7) {\n          // Tường tháp\n          const layer = Array.from({length: 5}, () => Array(5).fill('air'))\n          for (let x = 0; x < 5; x++) {\n            layer[0][x] = 'stone_bricks'\n            layer[4][x] = 'stone_bricks'\n            layer[x][0] = 'stone_bricks'\n            layer[x][4] = 'stone_bricks'\n          }\n          // Cửa ở tầng 1\n          if (y === 1) layer[2][0] = 'oak_door'\n          // Cửa sổ\n          if (y === 3 || y === 5) {\n            layer[0][2] = 'glass'\n            layer[4][2] = 'glass'\n            layer[2][0] = 'glass'\n            layer[2][4] = 'glass'\n          }\n          return layer\n        } else {\n          // Mái tháp\n          return Array.from({length: 5}, () => Array(5).fill('dark_oak_planks'))\n        }\n      }),\n      materials: { 'stone_bricks': 60, 'dark_oak_planks': 25, 'oak_door': 1, 'glass': 8 }\n    },\n\n    'cầu': {\n      name: 'Cây cầu gỗ',\n      size: '15x3x2',\n      blocks: [\n        // Y=0: Nền cầu\n        Array.from({length: 3}, () => Array.from({length: 15}, () => 'oak_planks')),\n        // Y=1: Lan can\n        Array.from({length: 3}, (x) =>\n          Array.from({length: 15}, (z) => {\n            if (x === 0 || x === 2) return 'oak_fence'\n            return 'air'\n          })\n        )\n      ],\n      materials: { 'oak_planks': 45, 'oak_fence': 30 }\n    }\n  }\n\n  startSmartAutoBuild = async function(buildType: string) {\n    if (autoBuildActive) {\n      bot.chat('🏗️ Đang xây công trình khác rồi!')\n      return\n    }\n\n    // Dừng các hoạt động khác\n    stopFollowing()\n    stopProtecting()\n    if (autoFishingActive) stopAutoFishing()\n    autoFarmActive = false\n\n    const lowerType = buildType.toLowerCase()\n    let selectedBuild = null\n\n    // KIỂM TRA CHẾĐỘ SÁNG TẠO AI\n    if (lowerType.includes('tự do') || lowerType.includes('sáng tạo') || lowerType.includes('ai')) {\n      bot.chat('🤖 Chế độ AI sáng tạo! Tớ sẽ thiết kế theo ý tưởng của cậu!')\n\n      // Lấy mô tả từ lệnh\n      const description = buildType.replace(/tự do|sáng tạo|ai/gi, '').trim()\n\n      if (!description) {\n        bot.chat('🤔 Cậu muốn tớ thiết kế gì? VD: \"auto xây tự do lâu đài nhỏ\"')\n        return\n      }\n\n      // Tạo thiết kế AI dựa trên mô tả\n      selectedBuild = await generateAIBuildDesign(description)\n\n      if (!selectedBuild) {\n        bot.chat('😵 Tớ không thể thiết kế theo ý tưởng đó, thử mô tả khác nhé!')\n        return\n      }\n    } else {\n      // Tìm thiết kế có sẵn\n      for (const [key, build] of Object.entries(quickBuilds)) {\n        if (lowerType.includes(key) || key.includes(lowerType)) {\n          selectedBuild = build\n          break\n        }\n      }\n\n      if (!selectedBuild) {\n        bot.chat('🤔 Tớ chưa biết xây loại đó. Thử: nhà nhỏ, tháp nhỏ, cầu')\n        bot.chat('🔧 Hoặc dùng \"auto xây tự do [mô tả]\" để AI thiết kế!')\n        return\n      }\n    }\n\n    autoBuildActive = true\n    currentBuildProject = selectedBuild\n    buildProgress = 0\n\n    bot.chat(`🏗️ Bắt đầu xây ${selectedBuild.name}!`)\n    bot.chat(`📏 Kích thước: ${selectedBuild.size}`)\n\n    try {\n      // Chuẩn bị materials\n      await prepareSmartBuildMaterials(selectedBuild.materials)\n\n      // Bắt đầu xây\n      const buildPos = {\n        x: Math.floor(bot.entity.position.x + 3),\n        y: Math.floor(bot.entity.position.y),\n        z: Math.floor(bot.entity.position.z + 3)\n      }\n\n      await executeSmartBuild(selectedBuild.blocks, buildPos)\n\n    } catch (error) {\n      console.log('❌ Lỗi smart auto build:', error)\n      bot.chat('😵 Có lỗi khi xây! Thử lại nhé!')\n      autoBuildActive = false\n    }\n  }\n\n  // HÀM AI SÁNG TẠO THIẾT KẾ XÂY DỰNG\n  async function generateAIBuildDesign(description: string): Promise<any | null> {\n    try {\n      bot.chat(`🧠 AI đang thiết kế \"${description}\"... Chờ tí nhé!`)\n      console.log(`🤖 AI Creative Build: Designing \"${description}\"`)\n\n      // Phân tích mô tả để tạo thiết kế thông minh\n      let buildCategory = 'house'\n      let sizeMultiplier = 1\n      let height = 4\n      let width = 7\n      let length = 7\n\n      if (description.toLowerCase().includes('lâu đài') || description.toLowerCase().includes('castle')) {\n        buildCategory = 'castle'\n        sizeMultiplier = 2\n        height = 8\n        width = 12\n        length = 12\n      } else if (description.toLowerCase().includes('tháp') || description.toLowerCase().includes('tower')) {\n        buildCategory = 'tower'\n        height = 10\n        width = 5\n        length = 5\n      } else if (description.toLowerCase().includes('cầu') || description.toLowerCase().includes('bridge')) {\n        buildCategory = 'bridge'\n        height = 2\n        width = 3\n        length = 15\n      } else if (description.toLowerCase().includes('nhà thờ') || description.toLowerCase().includes('church')) {\n        buildCategory = 'church'\n        height = 6\n        width = 9\n        length = 12\n      } else if (description.toLowerCase().includes('kho') || description.toLowerCase().includes('warehouse')) {\n        buildCategory = 'warehouse'\n        height = 4\n        width = 10\n        length = 15\n      }\n\n      //Xác định kích thước\n      if (description.toLowerCase().includes('nhỏ') || description.toLowerCase().includes('mini')) {\n        sizeMultiplier = 0.7\n      } else if (description.toLowerCase().includes('lớn') || description.toLowerCase().includes('big') || description.toLowerCase().includes('khổng lồ')) {\n        sizeMultiplier = 1.5\n      }\n\n      width = Math.floor(width * sizeMultiplier)\n      length = Math.floor(length * sizeMultiplier)\n      height = Math.floor(height * sizeMultiplier)\n\n      // Chọn vật liệu dựa trên mô tả\n      let primaryMaterial = 'oak_planks'\n      let secondaryMaterial = 'oak_logs'\n      let roofMaterial = 'dark_oak_planks'\n\n      if (description.toLowerCase().includes('đá') || description.toLowerCase().includes('stone')) {\n        primaryMaterial = 'stone_bricks'\n        secondaryMaterial = 'stone'\n        roofMaterial = 'stone_brick_stairs'\n      } else if (description.toLowerCase().includes('gỗ') || description.toLowerCase().includes('wood')) {\n        primaryMaterial = 'oak_planks'\n        secondaryMaterial = 'oak_logs'\n      } else if (description.toLowerCase().includes('gạch') || description.toLowerCase().includes('brick')) {\n        primaryMaterial = 'bricks'\n        secondaryMaterial = 'stone_bricks'\n      }\n\n      // TẠO THIẾT KẾ THÔNG MINH\n      const blocks = generateSmartStructure(buildCategory, width, length, height, primaryMaterial, secondaryMaterial, roofMaterial)\n\n      // Tính toán vật liệu cần thiết\n      const materials = calculateMaterials(blocks, primaryMaterial, secondaryMaterial, roofMaterial)\n\n      const aiDesign = {\n        name: `${description} (AI thiết kế)`,\n        size: `${width}x${length}x${height}`,\n        blocks: blocks,\n        materials: materials,\n        isAIGenerated: true\n      }\n\n      bot.chat(`✨ AI đã thiết kế xong! Kích thước: ${width}x${length}x${height}`)\n      console.log(`🤖 AI Design complete: ${width}x${length}x${height}`)\n\n      return aiDesign\n\n    } catch (error) {\n      console.log('❌ Lỗi AI creative build:', error)\n      bot.chat('😵 AI gặp lỗi khi thiết kế, dùng mẫu có sẵn nhé!')\n      return quickBuilds['nhà nhỏ'] // Fallback\n    }\n  }\n\n  // HÀM TẠO CẤU TRÚC THÔNG MINH\n  function generateSmartStructure(category: string, width: number, length: number, height: number, primary: string, secondary: string, roof: string): any[] {\n    const blocks: any[] = []\n\n    for (let y = 0; y < height; y++) {\n      const layer: any[][] = []\n\n      for (let x = 0; x < width; x++) {\n        const row: any[] = []\n\n        for (let z = 0; z < length; z++) {\n          let blockType = 'air'\n\n          if (y === 0) {\n            // Nền\n            blockType = primary\n          } else if (y === height - 1) {\n            // Mái\n            if (category === 'castle') {\n              blockType = x === 0 || x === width-1 || z === 0 || z === length-1 ? secondary : 'air'\n            } else {\n              blockType = roof\n            }\n          } else {\n            // Tường\n            if (x === 0 || x === width-1 || z === 0 || z === length-1) {\n              blockType = secondary\n\n              // Cửa ở tầng 1\n              if (y === 1 && x === Math.floor(width/2) && z === 0) {\n                blockType = 'oak_door'\n              }\n\n              // Cửa sổ ở tầng 2+\n              if (y >= 2 && ((x === 0 || x === width-1) && z % 3 === 1) ||\n                           ((z === 0 || z === length-1) && x % 3 === 1)) {\n                blockType = 'glass'\n              }\n            } else {\n              blockType = 'air'\n            }\n          }\n\n          row.push(blockType)\n        }\n        layer.push(row)\n      }\n      blocks.push(layer)\n    }\n\n    return blocks\n  }\n\n  // HÀM TÍNH TOÁN VẬT LIỆU\n  function calculateMaterials(blocks: any[], primary: string, secondary: string, roof: string): {[key: string]: number} {\n    const materials: {[key: string]: number} = {}\n\n    for (const layer of blocks) {\n      for (const row of layer) {\n        for (const block of row) {\n          if (block !== 'air') {\n            materials[block] = (materials[block] || 0) + 1\n          }\n        }\n      }\n    }\n\n    // Làm tròn lên và thêm 20% buffer\n    Object.keys(materials).forEach(material => {\n      materials[material] = Math.ceil(materials[material] * 1.2)\n    })\n\n    return materials\n  }\n\n  async function prepareSmartBuildMaterials(materials: {[key: string]: number}) {\n    bot.chat('📦 Chuẩn bị vật liệu xây dựng...')\n\n    // Material mapping để convert tên\n    const materialMap: {[key: string]: string} = {\n      'oak_logs': 'oak_log',\n      'oak_planks': 'oak_planks',\n      'stone_bricks': 'stone_bricks',\n      'dark_oak_planks': 'dark_oak_planks',\n      'oak_door': 'oak_door',\n      'oak_fence': 'oak_fence',\n      'glass': 'glass'\n    }\n\n    for (const [material, amount] of Object.entries(materials)) {\n      const mcItem = materialMap[material] || material\n      const stacks = Math.ceil(amount / 64)\n\n      for (let i = 0; i < stacks; i++) {\n        bot.chat(`/give ${bot.username} ${mcItem} 64`)\n        await new Promise(resolve => setTimeout(resolve, 50))\n      }\n    }\n\n    bot.chat('✅ Đã chuẩn bị xong vật liệu!')\n  }\n\n  async function executeSmartBuild(blocks: any[], buildPos: {x: number, y: number, z: number}) {\n    let totalBlocks = 0\n    let placedBlocks = 0\n\n    // Đếm tổng số blocks\n    for (const layer of blocks) {\n      for (const row of layer) {\n        for (const block of row) {\n          if (block !== 'air') totalBlocks++\n        }\n      }\n    }\n\n    bot.chat(`🔨 Bắt đầu xây ${totalBlocks} blocks!`)\n\n    for (let y = 0; y < blocks.length; y++) {\n      const layer = blocks[y]\n\n      for (let x = 0; x < layer.length; x++) {\n        const row = layer[x]\n\n        for (let z = 0; z < row.length; z++) {\n          const blockType = row[z]\n\n          if (blockType === 'air' || !autoBuildActive) continue\n\n          const pos = {\n            x: buildPos.x + x,\n            y: buildPos.y + y,\n            z: buildPos.z + z\n          }\n\n          try {\n            // Kiểm tra và xử lý block cũ\n            const existingBlock = bot.blockAt(new Vec3(pos.x, pos.y, pos.z))\n            if (existingBlock && existingBlock.name !== 'air') {\n              console.log(`🔨 Đào block cũ ${existingBlock.name} tại ${pos.x},${pos.y},${pos.z}`)\n\n              // Đào block cũ trước khi đặt block mới\n              try {\n                await bot.dig(existingBlock)\n                console.log(`✅ Đã đào xong ${existingBlock.name}`)\n                await new Promise(resolve => setTimeout(resolve, 300))\n              } catch (digError) {\n                console.log(`❌ Không thể đào ${existingBlock.name}, bỏ qua vị trí này`)\n                continue\n              }\n            }\n\n            // Di chuyển đến gần vị trí với timeout ngắn hơn\n            const distance = bot.entity.position.distanceTo(new Vec3(pos.x, pos.y, pos.z))\n            if (distance > 4) {\n              const goal = new goals.GoalNear(pos.x, pos.y, pos.z, 2)\n              bot.pathfinder.setGoal(goal)\n              await new Promise(resolve => setTimeout(resolve, 800))\n            }\n\n            // Tìm và trang bị block\n            const itemMap: {[key: string]: string} = {\n              'oak_logs': 'oak_log',\n              'oak_planks': 'oak_planks',\n              'stone_bricks': 'stone_bricks',\n              'dark_oak_planks': 'dark_oak_planks',\n              'oak_door': 'oak_door',\n              'oak_fence': 'oak_fence',\n              'glass': 'glass'\n            }\n\n            const itemName = itemMap[blockType] || blockType\n            const item = bot.inventory.items().find(i => i.name === itemName)\n\n            if (!item) {\n              console.log(`⚠️ Không có ${itemName}`)\n              continue\n            }\n\n            await bot.equip(item, 'hand')\n\n            // Tìm vị trí đặt block tốt nhất\n            const possibleTargetBlocks = [\n              bot.blockAt(new Vec3(pos.x, pos.y - 1, pos.z)),     // Dưới\n              bot.blockAt(new Vec3(pos.x + 1, pos.y, pos.z)),     // Bên phải\n              bot.blockAt(new Vec3(pos.x - 1, pos.y, pos.z)),     // Bên trái\n              bot.blockAt(new Vec3(pos.x, pos.y, pos.z + 1)),     // Phía sau\n              bot.blockAt(new Vec3(pos.x, pos.y, pos.z - 1))      // Phía trước\n            ].filter(block => block && block.name !== 'air')\n\n            let placeSuccess = false\n\n            // Thử đặt block vào các hướng khác nhau\n            for (let targetBlock of possibleTargetBlocks) {\n              if (!targetBlock) continue\n\n              // Thử 3 lần cho mỗi hướng\n              for (let attempt = 0; attempt < 3; attempt++) {\n                try {\n                  // Tính vector hướng đặt\n                  const targetPos = targetBlock.position\n                  const placeVector = new Vec3(\n                    pos.x - targetPos.x,\n                    pos.y - targetPos.y,\n                    pos.z - targetPos.z\n                  )\n\n                  await Promise.race([\n                    bot.placeBlock(targetBlock, placeVector),\n                    new Promise((_, reject) =>\n                      setTimeout(() => reject(new Error('Place timeout')), 2500)\n                    )\n                  ])\n\n                  placeSuccess = true\n                  console.log(`✅ Đã đặt ${blockType} tại ${pos.x},${pos.y},${pos.z}`)\n                  break\n                } catch (retryError) {\n                  if (attempt === 0) {\n                    console.log(`⚠️ Thử lại đặt ${blockType} (lần ${attempt + 1})`)\n                    await new Promise(resolve => setTimeout(resolve, 400))\n                  }\n                }\n              }\n\n              if (placeSuccess) break // Thoát khỏi loop target blocks nếu thành công\n            }\n\n            if (placeSuccess) {\n              placedBlocks++\n              // Report progress mỗi 5 blocks để giảm spam\n              if (placedBlocks % 5 === 0) {\n                const progress = Math.round((placedBlocks / totalBlocks) * 100)\n                bot.chat(`🏗️ Tiến độ: ${progress}% (${placedBlocks}/${totalBlocks})`)\n              }\n            } else {\n              console.log(`❌ Không thể đặt ${blockType} tại ${pos.x},${pos.y},${pos.z} sau nhiều lần thử`)\n            }\n\n            // Tăng delay giữa các block để server xử lý\n            await new Promise(resolve => setTimeout(resolve, 200))\n\n          } catch (error) {\n            console.log(`⚠️ Lỗi đặt ${blockType} tại ${pos.x},${pos.y},${pos.z}:`, error.message || error)\n          }\n        }\n      }\n    }\n\n    // Kiểm tra hoàn thành thực sự\n    const completionPercentage = Math.round((placedBlocks / totalBlocks) * 100)\n\n    if(completionPercentage >= 80) {\n      // Hoàn thành thành công (>=80%)\n      autoBuildActive = false\n      currentBuildProject = null\n      bot.chat('🎉 Xây xong rồi! Đẹp không nè? ✨')\n      bot.chat(`📊 Kết quả tuyệt vời: ${placedBlocks}/${totalBlocks} blocks (${completionPercentage}%)`)\n      console.log('✅ Smart Auto Build completed successfully')\n    } else if (completionPercentage >= 50) {\n      // Hoàn thành một phần (50-79%)\n      autoBuildActive = false\n      currentBuildProject = null\n      bot.chat('🏗️ Xây được một phần rồi! Có thể cần dọn dẹp thêm!')\n      bot.chat(`📊 Kết quả: ${placedBlocks}/${totalBlocks} blocks (${completionPercentage}%)`)\n      bot.chat('💡 Tip: Chọn vùng phẳng hơn để xây dựng tốt hơn!')\n      console.log('⚠️ Smart Auto Build partially completed')\n    } else {\n      // Hoàn thành kém (<50%)\n      autoBuildActive = false\n      currentBuildProject = null\n      bot.chat('😅 Xây không được bao nhiêu do địa hình khó!')\n      bot.chat(`📊 Chỉ xây được: ${placedBlocks}/${totalBlocks} blocks (${completionPercentage}%)`)\n      bot.chat('💡 Tip: Tìm vùng phẳng, không có cây cỏ để xây nhé!')\n      console.log('❌ Smart Auto Build completion rate too low')\n    }\n  }\n\n  async function startSmartAutoBuildWithClear(buildType: string) {\n    if (autoBuildActive) {\n      bot.chat('🏗️ Đang xây công trình khác rồi!')\n      return\n    }\n\n    // Dừng các hoạt động khác\n    stopFollowing()\n    stopProtecting()\n    if (autoFishingActive) stopAutoFishing()\n    autoFarmActive = false\n\n    bot.chat('🌱 Sẽ dọn phẳng khu vực trước khi xây!')\n    console.log('🌱 Starting auto build with terrain clearing')\n\n    // Tìm thiết kế\n    const lowerType = buildType.toLowerCase()\n    let selectedBuild = null\n\n    for (const [key, build] of Object.entries(quickBuilds)) {\n      if (lowerType.includes(key) || key.includes(lowerType)) {\n        selectedBuild = build\n        break\n      }\n    }\n\n    if (!selectedBuild) {\n      selectedBuild = quickBuilds['nhà nhỏ'] // Default\n    }\n\n    autoBuildActive = true\n    currentBuildProject = selectedBuild\n\n    //Xác định khu vực xây dựng\n    const buildPos = {\n      x: Math.floor(bot.entity.position.x + 3),\n      y: Math.floor(bot.entity.position.y),\n      z: Math.floor(bot.entity.position.z + 3)\n    }\n\n    try {\n      // BƯỚC 1: Clear terrain trước\n      await clearBuildTerrain(selectedBuild.blocks, buildPos)\n\n      // BƯỚC 2: Chuẩn bị materials\n      await prepareSmartBuildMaterials(selectedBuild.materials)\n\n      // BƯỚC 3: Bắt đầu xây trên terrain đã được clear\n      await executeSmartBuild(selectedBuild.blocks, buildPos)\n\n    } catch (error) {\n      console.log('❌ Lỗi smart auto build with clear:', error)\n      bot.chat('😵 Có lỗi khi xây! Thử lại nhé~')\n      autoBuildActive = false\n    }\n  }\n\n  async function clearBuildTerrain(blocks: any[], buildPos: {x: number, y: number, z: number}) {\n    bot.chat('🌿 Bắt đầu dọn dẹp địa hình...')\n\n    // Tính toán kích thước khu vực\n    const sizeX = blocks[0]?.length || 7\n    const sizeZ = blocks[0]?.[0]?.length || 7\n    const sizeY = blocks.length\n\n    let clearedBlocks = 0\n\n    // Clear từ trên xuống dưới và mở rộng 1 block xung quanh\n    for (let y = buildPos.y + sizeY; y >= buildPos.y - 1; y--) {\n      for (let x = buildPos.x - 1; x <= buildPos.x + sizeX; x++) {\n        for (let z = buildPos.z - 1; z <= buildPos.z + sizeZ; z++) {\n          if (!autoBuildActive) return // Dừng nếu bị cancel\n\n          try {\n            const blockToClear = bot.blockAt(new Vec3(x, y, z))\n\n            if (blockToClear && blockToClear.name !== 'air' &&\n                blockToClear.name !== 'bedrock' && blockToClear.name !== 'barrier') {\n\n              // Di chuyển đến gần nếu cần\n              const distance = bot.entity.position.distanceTo(new Vec3(x, y, z))\n              if (distance > 4) {\n                const goal = new goals.GoalNear(x, y, z, 3)\n                bot.pathfinder.setGoal(goal)\n                await new Promise(resolve => setTimeout(resolve, 600))\n              }\n\n              // Đào block\n              await bot.dig(blockToClear)\n              clearedBlocks++\n\n              if (clearedBlocks % 10 === 0) {\n                bot.chat(`🌿 Đã dọn ${clearedBlocks} blocks...`)\n              }\n\n              await new Promise(resolve => setTimeout(resolve, 150))\n            }\n          } catch (error) {\n            // Bỏ qua lỗi clear terrain\n            console.log(`⚠️ Bỏ qua block tại ${x},${y},${z}:`, error.message)\n          }\n        }\n      }\n    }\n\n    bot.chat(`✅ Đã dọn phẳng ${clearedBlocks} blocks! Bắt đầu xây dựng!`)\n    console.log(`✅ Terrain cleared: ${clearedBlocks} blocks`)\n  }\n\n  stopSmartAutoBuild = function() {\n    autoBuildActive = false\n    currentBuildProject = null\n    buildProgress = 0\n    bot.pathfinder.setGoal(null)\n\n    // Chỉ chat khi được gọi trực tiếp\n    if (!arguments[0]) { // Không có parameter silent\n      bot.chat('🛑 Dừng xây!')\n    }\n    console.log('⏹️ Smart Auto Build - Deactivated')\n  }\n\n  // ------------------ AUTO CHEST HUNTING - NEW IMPLEMENTATION (Per User Requirements) ------------------\n  // Main function to start auto chest hunting\n  startAutoChestHunting = async function() {\n    // 1. Kiểm tra pickaxe trước khi bắt đầu\n    const hasPickaxe = bot.inventory.items().some(item => item.name.includes('pickaxe'))\n    \n    if (!hasPickaxe) {\n      bot.chat('🥺 Không có pickaxe! Không thể tìm rương!')\n      console.log('❌ No pickaxe found, stopping all actions')\n      stopAll()\n      return\n    }\n\n    // Stop other activities\n    stopFollowing()\n    stopProtecting()\n    if (autoFishingActive) stopSmartAutoFishing()\n    autoFarmActive = false\n    if (autoMiningActive) stopAutoMining(true)\n\n    autoChestHuntingActive = true\n    bot.chat('📦 Bắt đầu auto tìm rương! Tớ sẽ quét trong phạm vi 200 blocks...')\n    console.log('📦 Auto Chest Hunting - Activated (200 block radius)')\n\n    // Clear existing interval if any\n    if (chestHuntingInterval) clearInterval(chestHuntingInterval)\n\n    chestHuntingInterval = setInterval(async () => {\n      if (!autoChestHuntingActive) {\n        clearInterval(chestHuntingInterval!)\n        chestHuntingInterval = null\n        return\n      }\n\n      try {\n        // Execute chest hunting cycle (similar to mining cycle)\n        await executeChestHuntingCycle()\n      } catch (error) {\n        console.log('❌ Lỗi auto chest hunting:', error)\n        bot.pathfinder.setGoal(null)\n      }\n    }, 2000) // Kiểm tra mỗi 2 giây như yêu cầu\n  }\n\n  // Hàm thực hiện một chu kỳ tìm rương theo yêu cầu user\n  async function executeChestHuntingCycle() {\n    // Check if chest hunting is still active\n    if (!autoChestHuntingActive) {\n      console.log('⏹️ Chest hunting stopped, exiting cycle')\n      return\n    }\n\n    // Bỏ qua nếu đang di chuyển đến rương\n    if (isCurrentlyApproachingChest) {\n      return\n    }\n\n    // Tìm block rương - sử dụng bot.findBlock() như auto mine\n    const chestBlock = bot.findBlock({\n      matching: (block: any) => {\n        if (!block) return false\n        // Chỉ tìm rương ở y < 40 theo yêu cầu user\n        if (block.position.y >= 40) return false\n        // Tìm các loại rương trong Minecraft\n        return block.name.includes('chest') || \n               block.name.includes('barrel') || \n               block.name.includes('shulker_box')\n      },\n      maxDistance: 200, // Phạm vi 200 blocks theo yêu cầu user\n      useExtraInfo: true,\n      count: 1\n    })\n\n    if (chestBlock) {\n      console.log(`📦 Tìm thấy ${chestBlock.name} tại (${chestBlock.position.x}, ${chestBlock.position.y}, ${chestBlock.position.z})`)\n      \n      // Chat tọa độ rương\n      bot.chat(`📦 Tìm thấy rương tại (${chestBlock.position.x}, ${chestBlock.position.y}, ${chestBlock.position.z})!`)\n      \n      // Di chuyển đến rương sử dụng logic như auto mine\n      await approachChestTarget(chestBlock)\n      \n    } else {\n      console.log('🔍 Không tìm thấy rương trong phạm vi 200 blocks, khám phá thêm...')\n      // Di chuyển ngẫu nhiên để tìm kiếm\n      if (Math.random() < 0.3) {\n        const distance = 30 + Math.random() * 20\n        const angle = Math.random() * Math.PI * 2\n        const currentPos = bot.entity.position\n        \n        const targetX = currentPos.x + Math.cos(angle) * distance\n        const targetZ = currentPos.z + Math.sin(angle) * distance\n        \n        const movements = new Movements(bot)\n        movements.canDig = true\n        bot.pathfinder.setMovements(movements)\n        \n        const goal = new goals.GoalXZ(targetX, targetZ)\n        bot.pathfinder.setGoal(goal)\n        \n        await new Promise(resolve => setTimeout(resolve, 2000))\n      }\n    }\n  }\n\n  // Di chuyển đến rương sử dụng logic như auto mine\n  async function approachChestTarget(chestBlock: any) {\n    if (!autoChestHuntingActive) return\n\n    try {\n      isCurrentlyApproachingChest = true\n      currentChestTarget = chestBlock\n\n      const distance = bot.entity.position.distanceTo(chestBlock.position)\n\n      // Di chuyển gần target - sử dụng logic như auto mine\n      if (distance > 3) {\n        console.log(`🚶 Di chuyển đến rương (${Math.round(distance)} blocks away)`)\n\n        // Dừng pathfinding trước với error handling\n        try {\n          bot.pathfinder.setGoal(null)\n        } catch (err) {\n          // Ignore pathfinder stop errors\n        }\n        await new Promise(resolve => setTimeout(resolve, 200))\n\n        // Thiết lập pathfinder với error handling\n        try {\n          const movements = new Movements(bot)\n          movements.canDig = true\n          movements.digCost = 1\n          movements.allow1by1towers = true\n          movements.allowParkour = true\n          movements.allowSprinting = true\n          movements.blocksCantBreak.clear()\n          movements.blocksCantBreak.add(bot.registry.blocksByName.bedrock?.id || 0)\n          movements.blocksCantBreak.add(bot.registry.blocksByName.barrier?.id || 0)\n          bot.pathfinder.setMovements(movements)\n\n          // Di chuyển đến gần rương (3 blocks)\n          const goal = new goals.GoalNear(chestBlock.position.x, chestBlock.position.y, chestBlock.position.z, 3)\n          bot.pathfinder.setGoal(goal)\n        } catch (pathErr) {\n          console.log('⚠️ Lỗi thiết lập pathfinder, bỏ qua và tiếp tục')\n        }\n\n        // Kiểm tra liên tục mỗi 2 giây nếu bot cách rương 3 blocks\n        let checkCount = 0\n        const maxChecks = 30 // Tối đa 60 giây (30 * 2s)\n        \n        while (autoChestHuntingActive && checkCount < maxChecks) {\n          await new Promise(resolve => setTimeout(resolve, 2000)) // Kiểm tra mỗi 2 giây\n          \n          try {\n            const currentDistance = bot.entity.position.distanceTo(chestBlock.position)\n            console.log(`📏 Khoảng cách đến rương: ${currentDistance.toFixed(1)} blocks`)\n            \n            if (currentDistance <= 3) {\n              console.log('✅ Đã đến gần rương (≤3 blocks), dừng tất cả hành động')\n              bot.chat('📦 Đã đến rương rồi!')\n              \n              // Dừng tất cả hành động khi cách rương 3 blocks\n              stopAll()\n              return\n            }\n          } catch (distErr) {\n            console.log('⚠️ Không thể tính khoảng cách, bỏ qua')\n          }\n          \n          checkCount++\n        }\n\n        // Timeout nếu không đến được\n        if (checkCount >= maxChecks) {\n          console.log('⏰ Timeout khi di chuyển đến rương')\n          bot.chat('🥺 Không thể đến rương!')\n          stopAll()\n          return\n        }\n\n      } else {\n        // Đã ở gần rương rồi, dừng ngay\n        console.log('✅ Đã ở gần rương (≤3 blocks)')\n        bot.chat('📦 Đã đến rương rồi!')\n        stopAll()\n      }\n\n    } catch (error) {\n      const errorMsg = error?.message || error?.toString() || 'Unknown error'\n      console.log('❌ Lỗi approach chest:', errorMsg)\n      stopAll()\n    } finally {\n      isCurrentlyApproachingChest = false\n      currentChestTarget = null\n      \n      // Đảm bảo dừng pathfinder\n      try {\n        bot.pathfinder.setGoal(null)\n      } catch (err) {\n        // Ignore cleanup errors\n      }\n    }\n  }\n\n  // Function to stop auto chest hunting\n  stopAutoChestHunting = function() {\n    console.log('⏹️ Stopping auto chest hunting...')\n    autoChestHuntingActive = false\n    isCurrentlyApproachingChest = false\n    currentChestTarget = null\n\n    if (chestHuntingInterval) {\n      clearInterval(chestHuntingInterval)\n      chestHuntingInterval = null\n    }\n\n    bot.pathfinder.setGoal(null)\n    \n    // Reset control states\n    try {\n      bot.setControlState('forward', false)\n      bot.setControlState('back', false)\n      bot.setControlState('left', false)\n      bot.setControlState('right', false)\n      bot.setControlState('sprint', false)\n    } catch (error) {\n      // Ignore control state errors\n    }\n\n    bot.chat('🛑 Dừng auto tìm rương.')\n    console.log('⏹️ Auto Chest Hunting - Deactivated')\n  }\n\n  // ------------------ PVP SYSTEM - NEW IMPLEMENTATION ------------------\n  \n  // Helper: Trang bị sword tốt nhất\n  async function equipBestSword(): Promise<boolean> {\n    try {\n      const swords = bot.inventory.items().filter(item => \n        item.name.includes('sword')\n      )\n\n      if (swords.length > 0) {\n        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden', 'wood']\n        let bestSword = null\n\n        for (const material of priority) {\n          const sword = swords.find(s => s.name.includes(material))\n          if (sword) {\n            bestSword = sword\n            break\n          }\n        }\n\n        if (!bestSword) bestSword = swords[0]\n\n        if (!bot.heldItem || bot.heldItem.name !== bestSword.name) {\n          await bot.equip(bestSword, 'hand')\n          console.log(`⚔️ Trang bị ${bestSword.name}`)\n        }\n        return true\n      }\n      return false\n    } catch (error) {\n      console.log('❌ Lỗi trang bị sword:', error?.message || error)\n      return false\n    }\n  }\n\n  // Helper: Check và ăn golden apple nếu có\n  async function eatGoldenAppleIfAvailable(): Promise<boolean> {\n    try {\n      const goldenApple = bot.inventory.items().find(item => \n        item.name.includes('golden_apple')\n      )\n\n      if (goldenApple) {\n        console.log('🍎 Ăn táo vàng ngay!')\n        await bot.equip(goldenApple, 'hand')\n        await bot.consume()\n        // Trang bị lại sword\n        await equipBestSword()\n        return true\n      }\n      return false\n    } catch (error) {\n      console.log('⚠️ Lỗi ăn táo vàng:', error?.message || error)\n      return false\n    }\n  }\n\n  // Helper: Ăn thức ăn để hồi máu - với cooldown log\n  async function eatFoodToHeal(): Promise<boolean> {\n    try {\n      const safeFood = bot.inventory.items().find(item => {\n        const name = item.name.toLowerCase()\n        const safeItems = [\n          'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',\n          'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',\n          'cooked_mutton', 'cookie', 'melon_slice', 'sweet_berries'\n        ]\n        return safeItems.some(safe => name.includes(safe))\n      })\n\n      if (safeFood) {\n        // Chỉ log mỗi 5 giây để giảm spam\n        const now = Date.now()\n        if (!lastEatTime || now - lastEatTime > 5000) {\n          console.log(`🍖 Ăn ${safeFood.name} để hồi máu`)\n          lastEatTime = now\n        }\n        \n        await bot.equip(safeFood, 'hand')\n        await bot.consume()\n        // Trang bị lại sword\n        await equipBestSword()\n        return true\n      }\n      return false\n    } catch (error) {\n      // Chỉ log lỗi quan trọng, bỏ qua \"Food is full\"\n      const errorMsg = error?.message || error?.toString() || ''\n      if (!errorMsg.includes('Food is full') && !errorMsg.includes('Consuming cancelled')) {\n        console.log('⚠️ Lỗi ăn thức ăn:', errorMsg)\n      }\n      return false\n    }\n  }\n\n  // Main PVP function - Standard\n  startPvP = async function(targetName: string) {\n    // Dừng các hoạt động khác\n    stopFollowing()\n    stopProtecting()\n    if (autoFishingActive) stopSmartAutoFishing()\n    if (autoFarmActive) stopAutoFarm()\n    if (autoMiningActive) stopAutoMining(true)\n    if (autoChestHuntingActive) stopAutoChestHunting()\n\n    // Validate player name trước khi bắt đầu PVP\n    const allPlayers = Object.keys(bot.players)\n    console.log(`📋 Kiểm tra player \"${targetName}\" trong danh sách: [${allPlayers.join(', ')}]`)\n    \n    // Tìm player với nhiều phương pháp\n    let validatedName = targetName\n    \n    // Phương pháp 1: Tìm chính xác\n    if (!bot.players[targetName]) {\n      // Phương pháp 2: Tìm không phân biệt hoa thường\n      const foundName = allPlayers.find(name => \n        name.toLowerCase() === targetName.toLowerCase()\n      )\n      \n      if (foundName) {\n        validatedName = foundName\n        console.log(`✅ Đã tìm thấy player: \"${foundName}\" (khớp với \"${targetName}\")`)\n      } else {\n        // Phương pháp 3: Tìm gần đúng\n        const nearName = allPlayers.find(name => \n          name.toLowerCase().includes(targetName.toLowerCase()) ||\n          targetName.toLowerCase().includes(name.toLowerCase())\n        )\n        \n        if (nearName) {\n          validatedName = nearName\n          console.log(`✅ Đã tìm thấy player gần đúng: \"${nearName}\" (từ \"${targetName}\")`)\n        } else {\n          bot.chat(`🥺 Không tìm thấy player \"${targetName}\" trong server!`)\n          console.log(`❌ Player \"${targetName}\" không tồn tại. Danh sách players: [${allPlayers.join(', ')}]`)\n          return\n        }\n      }\n    }\n\n    pvpActive = true\n    pvpTargetName = validatedName\n    hasWarnedWeakPlayer = false\n\n    bot.chat(`⚔️ Bắt đầu PVP với ${validatedName}!`)\n    console.log(`⚔️ PVP Mode - Target: ${validatedName}`)\n\n    // Trang bị sword ngay\n    await equipBestSword()\n\n    // Clear existing interval\n    if (pvpInterval) clearInterval(pvpInterval)\n\n    pvpInterval = setInterval(async () => {\n      if (!pvpActive) {\n        clearInterval(pvpInterval!)\n        pvpInterval = null\n        return\n      }\n\n      try {\n        await executePvPCycle()\n      } catch (error) {\n        console.log('❌ Lỗi PVP cycle:', error?.message || error)\n      }\n    }, 500) // Check every 0.5 seconds for fast reaction\n  }\n\n  // Biến lưu tên player đã tìm thấy để tránh spam logs\n  let lastFoundPlayerName = ''\n  let lastPlayerSearchLog = 0\n\n  async function executePvPCycle() {\n    if (!pvpActive) return\n\n    const now = Date.now()\n    const allPlayers = Object.keys(bot.players)\n    \n    // Debug: Log danh sách players mỗi 30 giây (tăng từ 10 giây)\n    if (allPlayers.length > 0 && (!lastPvpTpAttempt || now - lastPvpTpAttempt > 30000)) {\n      console.log(`📋 Danh sách players trong server: [${allPlayers.join(', ')}]`)\n      lastPvpTpAttempt = now\n    }\n\n    // Tìm target player với nhiều phương pháp\n    let targetPlayer = bot.players[pvpTargetName]?.entity\n    let foundPlayerName = ''\n    \n    // Phương pháp 1: Tìm theo tên chính xác\n    if (!targetPlayer) {\n      // Phương pháp 2: Tìm không phân biệt hoa thường\n      const playerNames = Object.keys(bot.players)\n      const foundName = playerNames.find(name => \n        name.toLowerCase() === pvpTargetName.toLowerCase()\n      )\n      \n      if (foundName) {\n        foundPlayerName = foundName\n        targetPlayer = bot.players[foundName]?.entity\n        pvpTargetName = foundName // Cập nhật tên chính xác\n        \n        // Chỉ log khi tìm thấy lần đầu hoặc sau 10 giây\n        if (lastFoundPlayerName !== foundName || now - lastPlayerSearchLog > 10000) {\n          console.log(`✅ Tìm thấy player: \"${foundName}\"`)\n          lastFoundPlayerName = foundName\n          lastPlayerSearchLog = now\n        }\n      }\n    } else {\n      foundPlayerName = pvpTargetName\n    }\n    \n    // Phương pháp 3: Tìm theo tên gần đúng (contains)\n    if (!targetPlayer) {\n      const playerNames = Object.keys(bot.players)\n      const foundName = playerNames.find(name => \n        name.toLowerCase().includes(pvpTargetName.toLowerCase()) ||\n        pvpTargetName.toLowerCase().includes(name.toLowerCase())\n      )\n      \n      if (foundName) {\n        foundPlayerName = foundName\n        targetPlayer = bot.players[foundName]?.entity\n        pvpTargetName = foundName // Cập nhật tên chính xác\n        \n        // Chỉ log khi tìm thấy lần đầu hoặc sau 10 giây\n        if (lastFoundPlayerName !== foundName || now - lastPlayerSearchLog > 10000) {\n          console.log(`✅ Tìm thấy player gần đúng: \"${foundName}\"`)\n          lastFoundPlayerName = foundName\n          lastPlayerSearchLog = now\n        }\n      }\n    }\n    \n    if (!targetPlayer || !targetPlayer.position) {\n      // Chỉ log lỗi mỗi 10 giây (tăng từ 5 giây) và reset found name\n      if (lastFoundPlayerName !== '' || now - lastPlayerSearchLog > 10000) {\n        console.log(`⚠️ Không tìm thấy player \"${pvpTargetName}\" trong server`)\n        lastFoundPlayerName = ''\n        lastPlayerSearchLog = now\n      }\n      return\n    }\n\n    // Check if target is dead hoặc đang respawn\n    const isDead = targetPlayer.metadata?.[8] === 0 || targetPlayer.metadata?.[6] === 0\n    const isRespawning = targetPlayer.position.y < 0 || !targetPlayer.isValid\n    \n    if (isDead || isRespawning) {\n      bot.chat(`💪 ${pvpTargetName} đã bị tớ đánh bại rồi! Tớ giỏi lắm nhỉ 😎`)\n      console.log(`✅ ${pvpTargetName} đã die/respawn, dừng PVP`)\n      stopPvP()\n      return\n    }\n\n    const distance = bot.entity.position.distanceTo(targetPlayer.position)\n\n    // Check máu bot\n    const health = bot.health\n    \n    // Nếu có táo vàng, ăn ngay không cần bỏ chạy\n    if (health < 10) {\n      const hasGoldenApple = await eatGoldenAppleIfAvailable()\n      if (hasGoldenApple) {\n        // Silent - không log để giảm spam\n        // Tiếp tục tấn công\n      } else if (health < 8) {\n        // Không có táo vàng và máu rất yếu, bỏ chạy - chỉ log 1 lần\n        if (!lastEatTime || Date.now() - lastEatTime > 5000) {\n          console.log('🏃 Máu yếu, bỏ chạy để ăn!')\n          lastEatTime = Date.now()\n        }\n        \n        // Di chuyển ra xa 5 blocks\n        const escapeAngle = Math.atan2(\n          bot.entity.position.z - targetPlayer.position.z,\n          bot.entity.position.x - targetPlayer.position.x\n        )\n        const escapeX = bot.entity.position.x + Math.cos(escapeAngle) * 5\n        const escapeZ = bot.entity.position.z + Math.sin(escapeAngle) * 5\n        \n        const movements = new Movements(bot)\n        movements.allowSprinting = true\n        bot.pathfinder.setMovements(movements)\n        \n        const escapeGoal = new goals.GoalNear(escapeX, bot.entity.position.y, escapeZ, 1)\n        bot.pathfinder.setGoal(escapeGoal)\n        \n        // Nhảy khi bỏ chạy để nhanh hơn\n        bot.setControlState('jump', true)\n        bot.setControlState('sprint', true)\n        \n        await new Promise(resolve => setTimeout(resolve, 1000))\n        \n        bot.setControlState('jump', false)\n        \n        // Ăn thức ăn\n        await eatFoodToHeal()\n        \n        return\n      }\n    }\n\n    // Check khoảng cách\n    if (distance > 20) {\n      // Player chạy xa quá, check quyền OP và /tp\n      if (!hasWarnedWeakPlayer || Date.now() - lastPvpTpAttempt > 10000) {\n        lastPvpTpAttempt = Date.now()\n        \n        // Thử /tp\n        try {\n          bot.chat(`/tp ${pvpTargetName}`)\n          await new Promise(resolve => setTimeout(resolve, 500))\n          \n          // Check xem có /tp thành công không\n          const newDistance = bot.entity.position.distanceTo(targetPlayer.position)\n          if (newDistance < distance) {\n            bot.chat('Cậu không thoát được đâu❤')\n            console.log('✅ Đã /tp đến target')\n          } else {\n            console.log('❌ Không có quyền /tp')\n          }\n        } catch (tpError) {\n          console.log('⚠️ Lỗi khi thử /tp')\n        }\n      }\n    } else if (distance > 12 && !hasWarnedWeakPlayer) {\n      // Player bỏ chạy xa 12 blocks\n      bot.chat('Sao cậu yếu thế😆')\n      hasWarnedWeakPlayer = true\n      console.log('😆 Đã chat \"Sao cậu yếu thế\"')\n    }\n\n    // Trang bị sword nếu chưa có\n    if (!bot.heldItem || !bot.heldItem.name.includes('sword')) {\n      await equipBestSword()\n    }\n\n    // Check shield mỗi 2 giây\n    if (now - lastShieldCheck > 2000) {\n      lastShieldCheck = now\n      \n      // Kiểm tra xem player có đang chặn khiên không (metadata 8 bit 0 = đang blocking)\n      const isBlocking = targetPlayer.metadata?.[8] === 1 // Active hand = blocking\n      \n      if (isBlocking) {\n        console.log('🛡️ Player đang chặn khiên! Vòng ra sau lưng...')\n        isCirclingBehind = true\n        \n        // Tính góc để vòng ra sau lưng player\n        const angleToPlayer = Math.atan2(\n          targetPlayer.position.z - bot.entity.position.z,\n          targetPlayer.position.x - bot.entity.position.x\n        )\n        // Thêm 180 độ để ra sau lưng\n        const behindAngle = angleToPlayer + Math.PI\n        const behindX = targetPlayer.position.x + Math.cos(behindAngle) * 2\n        const behindZ = targetPlayer.position.z + Math.sin(behindAngle) * 2\n        \n        const movements = new Movements(bot)\n        movements.allowSprinting = true\n        movements.allowParkour = true\n        bot.pathfinder.setMovements(movements)\n        \n        const behindGoal = new goals.GoalNear(behindX, targetPlayer.position.y, behindZ, 1)\n        bot.pathfinder.setGoal(behindGoal, true)\n        \n        // Nhảy khi vòng ra sau\n        bot.setControlState('jump', true)\n        bot.setControlState('sprint', true)\n        \n        await new Promise(resolve => setTimeout(resolve, 800))\n        bot.setControlState('jump', false)\n        \n        isCirclingBehind = false\n      }\n    }\n\n    // Di chuyển về phía target\n    if (distance > 3) {\n      const movements = new Movements(bot)\n      movements.allowSprinting = true\n      movements.allowParkour = true\n      bot.pathfinder.setMovements(movements)\n      \n      const goal = new goals.GoalFollow(targetPlayer, 2)\n      bot.pathfinder.setGoal(goal, true)\n      \n      // Nhảy khi di chuyển đến mục tiêu để nhanh hơn\n      bot.setControlState('jump', true)\n      bot.setControlState('sprint', true)\n      \n      await new Promise(resolve => setTimeout(resolve, 300))\n      bot.setControlState('jump', false)\n    }\n\n    // Tấn công với mineflayer-pvp\n    try {\n      bot.pvp.attack(targetPlayer)\n    } catch (attackError) {\n      console.log('⚠️ Lỗi tấn công:', attackError?.message || attackError)\n    }\n  }\n\n  // Main PVP Pro function - With wind charge and mace - IMPROVED\n  startPvPPro = async function(targetName: string) {\n    // Check có wind charge và mace không - BẮT BUỘC\n    // Debug: Log tất cả items trong inventory\n    console.log('🔍 Checking inventory for wind charge and mace...')\n    const allItems = bot.inventory.items().map(item => item.name)\n    console.log('📦 Current inventory:', allItems.join(', '))\n    \n    // Tìm wind charge - hỗ trợ nhiều tên khác nhau (bao gồm custom items)\n    const windChargeItem = bot.inventory.items().find(item => {\n      const itemName = item.name.toLowerCase()\n      const displayName = item.displayName?.toLowerCase() || ''\n      // Kiểm tra nhiều biến thể tên của wind charge\n      return itemName.includes('wind') || \n             itemName.includes('breeze') ||\n             itemName === 'wind_charge' ||\n             itemName === 'breeze_rod' ||\n             displayName.includes('wind') ||\n             displayName.includes('cầu gió')\n    })\n    \n    // Tìm mace - hỗ trợ nhiều tên khác nhau (bao gồm custom items)\n    const maceItem = bot.inventory.items().find(item => {\n      const itemName = item.name.toLowerCase()\n      const displayName = item.displayName?.toLowerCase() || ''\n      // Kiểm tra nhiều biến thể tên của mace\n      return itemName.includes('mace') ||\n             itemName === 'mace' ||\n             displayName.includes('mace') ||\n             displayName.includes('búa')\n    })\n\n    const hasWindCharge = !!windChargeItem\n    const hasMace = !!maceItem\n\n    console.log(`✅ Wind charge found: ${hasWindCharge}${windChargeItem ? ` (${windChargeItem.name})` : ''}`)\n    console.log(`✅ Mace found: ${hasMace}${maceItem ? ` (${maceItem.name})` : ''}`)\n\n    if (!hasWindCharge || !hasMace) {\n      bot.chat('🥺 Không có cầu gió hoặc búa! Không thể PVP Pro!')\n      console.log('❌ Missing wind_charge or mace, stopping all actions')\n      \n      // Thông báo chi tiết về item nào thiếu\n      if (!hasWindCharge) {\n        bot.chat('⚠️ Thiếu: Wind Charge (Cầu gió)')\n        console.log('❌ Wind charge not found in inventory')\n        console.log('💡 Lưu ý: Wind Charge chỉ có trong Minecraft 1.21+. Server đang chạy 1.19.4')\n        bot.chat('💡 Wind Charge chỉ có trong MC 1.21+. Cần plugin/custom item!')\n      }\n      if (!hasMace) {\n        bot.chat('⚠️ Thiếu: Mace (Búa)')\n        console.log('❌ Mace not found in inventory')\n        console.log('💡 Lưu ý: Mace chỉ có trong Minecraft 1.21+. Server đang chạy 1.19.4')\n        bot.chat('💡 Mace chỉ có trong MC 1.21+. Cần plugin/custom item!')\n      }\n      \n      stopAll() // Dừng tất cả thay vì chuyển sang PVP thường\n      return\n    }\n\n    // Dừng các hoạt động khác trước khi bắt đầu\n    stopFollowing()\n    stopProtecting()\n    if (autoFishingActive) stopSmartAutoFishing()\n    if (autoFarmActive) stopAutoFarm()\n    if (autoMiningActive) stopAutoMining(true)\n    if (autoChestHuntingActive) stopAutoChestHunting()\n    if (pvpActive) stopPvP(true) // Dừng PVP thường nếu đang chạy\n\n    pvpProActive = true\n    pvpActive = false // Đảm bảo PVP thường bị tắt\n    pvpTargetName = targetName\n\n    bot.chat(`⚔️ Bắt đầu PVP PRO với ${targetName}! CHỈ dùng Wind Charge + Mace combo! 🔥`)\n    console.log(`⚔️ PVP PRO Mode - Target: ${targetName}`)\n    console.log(`✅ Wind Charge: có, Mace: có - Chỉ dùng combo`)\n\n    // Clear existing interval\n    if (pvpInterval) clearInterval(pvpInterval)\n\n    pvpInterval = setInterval(async () => {\n      if (!pvpProActive) {\n        clearInterval(pvpInterval!)\n        pvpInterval = null\n        return\n      }\n\n      // Kiểm tra lại có đủ items không mỗi cycle\n      const stillHasWindCharge = bot.inventory.items().some(item => {\n        const itemName = item.name.toLowerCase()\n        return itemName.includes('wind') || \n               itemName.includes('breeze') ||\n               itemName === 'wind_charge' ||\n               itemName === 'breeze_rod'\n      })\n      \n      const stillHasMace = bot.inventory.items().some(item => {\n        const itemName = item.name.toLowerCase()\n        return itemName.includes('mace') || itemName === 'mace'\n      })\n\n      if (!stillHasWindCharge || !stillHasMace) {\n        bot.chat('🥺 Hết cầu gió hoặc búa! Dừng PVP Pro!')\n        console.log('❌ Lost wind_charge or mace, stopping PVP Pro')\n        stopPvP(true)\n        return\n      }\n\n      try {\n        await executePvPProCycle()\n      } catch (error) {\n        console.log('❌ Lỗi PVP Pro cycle:', error?.message || error)\n      }\n    }, 800) // Tăng tốc độ check từ 1s xuống 800ms\n  }\n\n  async function executePvPProCycle() {\n    if (!pvpProActive) return\n\n    // Tìm target player với nhiều phương pháp\n    let targetPlayer = bot.players[pvpTargetName]?.entity\n    \n    // Tìm player gần đúng nếu không tìm thấy chính xác\n    if (!targetPlayer) {\n      const allPlayers = Object.keys(bot.players)\n      const foundName = allPlayers.find(name => \n        name.toLowerCase().includes(pvpTargetName.toLowerCase()) ||\n        pvpTargetName.toLowerCase().includes(name.toLowerCase())\n      )\n      \n      if (foundName) {\n        targetPlayer = bot.players[foundName]?.entity\n        pvpTargetName = foundName\n      }\n    }\n    \n    if (!targetPlayer || !targetPlayer.position) {\n      console.log(`⚠️ Không tìm thấy ${pvpTargetName}`)\n      return\n    }\n\n    // Check if target is dead\n    if (targetPlayer.metadata?.[8] === 0 || targetPlayer.metadata?.[6] === 0) {\n      bot.chat(`💪 ${pvpTargetName} đã bị tớ cho bay màu với combo Wind Charge + Mace! Quá đỉnh! 🔥`)\n      console.log(`✅ ${pvpTargetName} đã die, dừng PVP Pro`)\n      stopPvP()\n      return\n    }\n\n    const distance = bot.entity.position.distanceTo(targetPlayer.position)\n\n    // PVP PRO: CHỈ DI CHUYỂN, KHÔNG ĐÁNH THƯỜNG\n    if (distance > 4) {\n      // Di chuyển về phía target - KHÔNG tấn công\n      const movements = new Movements(bot)\n      movements.allowSprinting = true\n      movements.allowParkour = true\n      movements.allowFreeMotion = true\n      bot.pathfinder.setMovements(movements)\n      \n      const goal = new goals.GoalFollow(targetPlayer, 2)\n      bot.pathfinder.setGoal(goal, true)\n\n      // KHÔNG tấn công khi đang di chuyển - chỉ log\n      if (distance <= 8) {\n        console.log(`🏃 Đang di chuyển đến ${pvpTargetName} (${distance.toFixed(1)}m) - Chờ combo`)\n      }\n    } else {\n      // Gần target (≤4 blocks), thực hiện CHỈ COMBO Wind Charge + Mace\n      try {\n        // Dừng di chuyển để thực hiện combo chính xác\n        bot.pathfinder.setGoal(null)\n        \n        // 1. Kiểm tra có wind charge và mace với nhiều biến thể tên\n        const windCharge = bot.inventory.items().find(item => {\n          const itemName = item.name.toLowerCase()\n          return itemName.includes('wind') || \n                 itemName.includes('breeze') ||\n                 itemName === 'wind_charge' ||\n                 itemName === 'breeze_rod'\n        })\n        \n        const mace = bot.inventory.items().find(item => {\n          const itemName = item.name.toLowerCase()\n          return itemName.includes('mace') || itemName === 'mace'\n        })\n        \n        if (!windCharge || !mace) {\n          bot.chat('🥺 Hết cầu gió hoặc búa! Dừng PVP Pro!')\n          console.log('❌ Missing items mid-combo, stopping')\n          stopPvP(true)\n          return\n        }\n\n        console.log('🎯 Bắt đầu COMBO Wind Charge + Mace!')\n        \n        // 2. Trang bị wind charge\n        await bot.equip(windCharge, 'hand')\n        console.log('💨 Trang bị wind charge')\n        await new Promise(resolve => setTimeout(resolve, 200))\n        \n        // 3. Ném wind charge xuống đất để bay cao\n        const groundPos = bot.entity.position.offset(0, -1, 0)\n        await bot.lookAt(groundPos, true)\n        await new Promise(resolve => setTimeout(resolve, 150))\n        \n        bot.activateItem() // Ném wind charge\n        console.log('💨 Ném wind charge - BAY LÊN!')\n        \n        // 4. Đợi bay lên cao\n        await new Promise(resolve => setTimeout(resolve, 600))\n        \n        // 5. Trang bị mace trong khi bay\n        await bot.equip(mace, 'hand')\n        console.log('🔨 Trang bị MACE trong không trung!')\n        await new Promise(resolve => setTimeout(resolve, 100))\n        \n        // 6. Nhìm chính xác vào đầu target\n        const targetHead = targetPlayer.position.offset(0, 1.6, 0)\n        await bot.lookAt(targetHead, true)\n        \n        // 7. Đợi rơi xuống một chút\n        await new Promise(resolve => setTimeout(resolve, 200))\n        \n        // 8. SPAM MACE ATTACK khi rơi xuống\n        console.log('💥 BẮT ĐẦU MACE SMASH COMBO!')\n        for (let i = 0; i < 5; i++) {\n          try {\n            bot.attack(targetPlayer)\n            console.log(`💥 MACE SMASH ${i + 1}/5!`)\n          } catch (attackErr) {\n            // Ignore individual attack errors\n          }\n          await new Promise(resolve => setTimeout(resolve, 50))\n        }\n        \n        bot.chat('💥💥💥 ULTRA MACE COMBO HOÀN THÀNH!')\n        console.log('✅ Combo Wind Charge + Mace đã thực hiện xong')\n        \n        // 9. Cooldown trước combo tiếp theo\n        await new Promise(resolve => setTimeout(resolve, 2000))\n        \n      } catch (comboError) {\n        console.log('❌ Lỗi combo Wind Charge + Mace:', comboError?.message || comboError)\n      }\n    }\n  }\n\n  // Stop PVP function\n  stopPvP = function(silent: boolean = false) {\n    console.log('⏹️ Stopping PVP...')\n    pvpActive = false\n    pvpProActive = false\n    pvpTargetName = ''\n    hasWarnedWeakPlayer = false\n\n    if (pvpInterval) {\n      clearInterval(pvpInterval)\n      pvpInterval = null\n    }\n\n    try {\n      bot.pvp.stop()\n      bot.pathfinder.setGoal(null)\n      \n      bot.setControlState('forward', false)\n      bot.setControlState('back', false)\n      bot.setControlState('left', false)\n      bot.setControlState('right', false)\n      bot.setControlState('sprint', false)\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n\n    if (!silent) {\n      bot.chat('⚔️ Dừng PVP rồi!')\n    }\n    console.log('⏹️ PVP - Deactivated')\n  }\n\n  // ------------------ AI Agent Handler ------------------\n  async function handleAIAgentCommand(username: string, actionRequest: string) {\n    if (!geminiApiKey) {\n      bot.chat('🥺 Tớ chưa được cấu hình Gemini API để thực hiện AI actions!')\n      return\n    }\n\n    try {\n      bot.chat(`🤖 AI đang phân tích: \"${actionRequest}\"...`)\n      console.log(`🤖 AI Agent: Processing request from ${username}: ${actionRequest}`)\n\n      // Gọi Gemini API để phân tích hành động\n      const systemPrompt = `Bạn là AI agent điều khiển bot Minecraft. Phân tích yêu cầu và trả về JSON với các hành động cụ thể.\n\nYêu cầu: \"${actionRequest}\"\n\nTrả về JSON với format:\n{\n  \"actions\": [\n    {\"type\": \"move\", \"target\": \"tree\", \"distance\": 10},\n    {\"type\": \"collect\", \"item\": \"oak_log\", \"count\": 5},\n    {\"type\": \"craft\", \"item\": \"planks\", \"count\": 20}\n  ],\n  \"summary\": \"Tóm tắt ngắn gọn những gì bot sẽ làm\"\n}\n\nCác loại action hợp lệ:\n- move: Di chuyển đến (target: player_name, tree, water, cave, chest)\n- collect: Thu thập item (item: oak_log, stone, dirt, wheat, etc.)\n- dig: Đào block (block: stone, dirt, coal_ore, iron_ore, etc.)\n- craft: Chế tạo (item: planks, stick, crafting_table, etc.)\n- smelt: Nung (input: oak_log, iron_ore, output: charcoal, iron_ingot)\n- attack: Tấn công (target: zombie, skeleton, creeper, etc.)\n- follow: Theo player (player: username)\n- chat: Nói (message: \"Hello world\")\n\nChỉ trả về JSON, không giải thích thêm.`\n\n      const payload = {\n        contents: [{\n          parts: [{\n            text: systemPrompt\n          }]\n        }],\n        generationConfig: {\n          maxOutputTokens: 300,\n          temperature: 0.7\n        }\n      }\n\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        console.log('❌ Gemini API Error:', result)\n        bot.chat('😵 Lỗi AI API! Không thể phân tích hành động!')\n        return\n      }\n\n      const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text\n\n      if (!generatedText) {\n        bot.chat('🤔 AI không thể hiểu yêu cầu này!')\n        return\n      }\n\n      // Parse JSON response\n      let aiPlan\n      try {\n        // Làm sạch response (loại bỏ markdown code blocks nếu có)\n        const cleanJson = generatedText.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim()\n        aiPlan = JSON.parse(cleanJson)\n      } catch (parseError) {\n        console.log('❌ JSON parse error:', parseError)\n        bot.chat('😵 AI trả về format không hợp lệ!')\n        return\n      }\n\n      // Thông báo kế hoạch\n      bot.chat(`✨ ${aiPlan.summary || 'Bắt đầu thực hiện!'}`)\n      console.log('📋 AI Plan:', aiPlan)\n\n      // Thực thi từng action\n      for (let i = 0; i < aiPlan.actions.length; i++) {\n        const action = aiPlan.actions[i]\n        console.log(`🎯 Executing action ${i + 1}/${aiPlan.actions.length}:`, action)\n\n        try {\n          await executeAIAction(action, username)\n          await new Promise(resolve => setTimeout(resolve, 1000)) // Delay giữa các action\n        } catch (actionError) {\n          console.log('❌ Action execution error:', actionError)\n          bot.chat(`😵 Lỗi khi thực hiện: ${action.type}`)\n          break\n        }\n      }\n\n      bot.chat('✅ Hoàn thành tất cả AI actions!')\n      console.log('✅ AI Agent: All actions completed')\n\n    } catch (error) {\n      console.log('❌ AI Agent error:', error)\n      bot.chat('😵 Có lỗi khi xử lý AI command!')\n    }\n  }\n\n  // Thực thi một action cụ thể từ AI plan\n  async function executeAIAction(action: any, requestUsername: string) {\n    const actionType = action.type?.toLowerCase()\n\n    switch (actionType) {\n      case 'move':\n        await executeAIMove(action)\n        break\n      case 'collect':\n        await executeAICollect(action)\n        break\n      case 'dig':\n        await executeAIDig(action)\n        break\n      case 'craft':\n        await executeAICraft(action)\n        break\n      case 'smelt':\n        await executeAISmelt(action)\n        break\n      case 'attack':\n        await executeAIAttack(action)\n        break\n      case 'follow':\n        await executeAIFollow(action, requestUsername)\n        break\n      case 'chat':\n        bot.chat(action.message || 'Hello!')\n        break\n      default:\n        console.log(`⚠️ Unknown action type: ${actionType}`)\n    }\n  }\n\n  // AI Move action\n  async function executeAIMove(action: any) {\n    const target = action.target?.toLowerCase()\n    const distance = action.distance || 20\n\n    bot.chat(`🚶 Đang di chuyển đến ${target}...`)\n\n    if (target === 'tree') {\n      const tree = bot.findBlock({\n        matching: (block: any) => block && (block.name.includes('log') || block.name.includes('oak')),\n        maxDistance: distance\n      })\n      if (tree) {\n        await bot.pathfinder.goto(new goals.GoalNear(tree.position.x, tree.position.y, tree.position.z, 2))\n        bot.chat(`✅ Đã đến cây!`)\n      } else {\n        bot.chat(`🥺 Không tìm thấy cây gần đây!`)\n      }\n    } else if (target === 'water') {\n      const water = bot.findBlock({\n        matching: (block: any) => block && block.name === 'water',\n        maxDistance: distance\n      })\n      if (water) {\n        await bot.pathfinder.goto(new goals.GoalNear(water.position.x, water.position.y, water.position.z, 2))\n        bot.chat(`✅ Đã đến nước!`)\n      } else {\n        bot.chat(`🥺 Không tìm thấy nước!`)\n      }\n    } else {\n      // Di chuyển ngẫu nhiên\n      const currentPos = bot.entity.position\n      const randomX = currentPos.x + (Math.random() - 0.5) * distance\n      const randomZ = currentPos.z + (Math.random() - 0.5) * distance\n      await bot.pathfinder.goto(new goals.GoalXZ(randomX, randomZ))\n      bot.chat(`✅ Đã di chuyển!`)\n    }\n  }\n\n  // AI Collect action\n  async function executeAICollect(action: any) {\n    const itemName = action.item?.toLowerCase()\n    const count = action.count || 5\n\n    bot.chat(`🌳 Đang thu thập ${count} ${itemName}...`)\n\n    for (let i = 0; i < count; i++) {\n      const block = bot.findBlock({\n        matching: (block: any) => block && block.name.toLowerCase().includes(itemName),\n        maxDistance: 32\n      })\n\n      if (block) {\n        await bot.pathfinder.goto(new goals.GoalNear(block.position.x, block.position.y, block.position.z, 2))\n        await bot.dig(block)\n        await new Promise(resolve => setTimeout(resolve, 500))\n      } else {\n        bot.chat(`🥺 Chỉ thu thập được ${i}/${count} ${itemName}`)\n        break\n      }\n    }\n\n    bot.chat(`✅ Đã thu thập ${itemName}!`)\n  }\n\n  // AI Dig action\n  async function executeAIDig(action: any) {\n    const blockName = action.block?.toLowerCase()\n    const count = action.count || 10\n\n    bot.chat(`⛏️ Đang đào ${count} ${blockName}...`)\n\n    // Trang bị pickaxe nếu cần\n    if (blockName.includes('ore') || blockName.includes('stone')) {\n      await equipBestPickaxe()\n    }\n\n    for (let i = 0; i < count; i++) {\n      const block = bot.findBlock({\n        matching: (block: any) => block && block.name.toLowerCase().includes(blockName),\n        maxDistance: 32\n      })\n\n      if (block) {\n        await bot.pathfinder.goto(new goals.GoalNear(block.position.x, block.position.y, block.position.z, 3))\n        await bot.dig(block)\n        await new Promise(resolve => setTimeout(resolve, 800))\n      } else {\n        bot.chat(`🥺 Chỉ đào được ${i}/${count} ${blockName}`)\n        break\n      }\n    }\n\n    bot.chat(`✅ Đã đào xong ${blockName}!`)\n  }\n\n  // AI Craft action\n  async function executeAICraft(action: any) {\n    const itemName = action.item?.toLowerCase()\n    const count = action.count || 1\n\n    bot.chat(`🔨 Đang chế tạo ${count} ${itemName}...`)\n\n    // Placeholder - cần implement craft logic phức tạp hơn\n    bot.chat(`⚠️ Craft chưa được implement đầy đủ!`)\n  }\n\n  // AI Smelt action\n  async function executeAISmelt(action: any) {\n    bot.chat(`🔥 Đang nung ${action.input} thành ${action.output}...`)\n    bot.chat(`⚠️ Smelt chưa được implement đầy đủ!`)\n  }\n\n  // AI Attack action\n  async function executeAIAttack(action: any) {\n    const targetMob = action.target?.toLowerCase()\n\n    bot.chat(`⚔️ Đang tìm và tấn công ${targetMob}...`)\n\n    const mob = bot.nearestEntity((entity: any) => {\n      if (!entity || !entity.position) return false\n      const mobName = entity.name?.toLowerCase() || ''\n      return mobName.includes(targetMob) && bot.entity.position.distanceTo(entity.position) < 20\n    })\n\n    if (mob) {\n      await equipBestSwordForCombat()\n      await bot.pathfinder.goto(new goals.GoalFollow(mob, 2))\n\n      for (let i = 0; i < 10; i++) {\n        if (mob.isValid) {\n          bot.attack(mob)\n          await new Promise(resolve => setTimeout(resolve, 500))\n        } else {\n          break\n        }\n      }\n\n      bot.chat(`✅ Đã tấn công ${targetMob}!`)\n    } else {\n      bot.chat(`🥺 Không tìm thấy ${targetMob} gần đây!`)\n    }\n  }\n\n  // AI Follow action\n  async function executeAIFollow(action: any, requestUsername: string) {\n    const playerName = action.player || requestUsername\n    bot.chat(`👣 Đang theo ${playerName}...`)\n    startFollowingPlayer(playerName)\n  }\n\n  // ------------------ Chat Commands ------------------\n  bot.on('chat', async (username: string, message: string) => {\n    // FAST LOG - không chờ\n    console.log(`💬 [${username}]: ${message}`)\n\n    // Bỏ qua chat từ bot, server, console và các plugin - NHANH HÚN\n    if (username === bot.username ||\n        username === 'server' ||\n        username === 'console' ||\n        username === 'Shop' ||\n        username.startsWith('[') ||\n        username.includes('Plugin') ||\n        username.includes('System') ||\n        username.includes('Admin') ||\n        message.includes('plugin') ||\n        message.includes('update available') ||\n        message.includes('download at:') ||\n        message.includes('spigotmc.org')) {\n      return // NHANH - không log\n    }\n\n    // Update last command time - NHANH\n    lastPlayerCommand = Date.now()\n    const cleanMessage = message.toLowerCase().trim()\n\n    // FAST COMMAND PROCESSING - xử lý ngay lập tức không chờ\n    setImmediate(async () => {\n      console.log(`🔍 Processing: \"${cleanMessage}\" từ ${username}`)\n\n      // KIỂM TRA AI AGENT COMMAND TRƯỚC TIÊN - ƯU TIÊN CAO\n      if (message.startsWith('AI ') || message.startsWith('ai ')) {\n        const actionRequest = message.substring(3).trim()\n        if (actionRequest) {\n          await handleAIAgentCommand(username, actionRequest)\n          return\n        }\n      }\n\n      // Xử lý các lệnh chat - TỐI ƯU HÓA THỨ TỰ CÁC LỆNH HAY DÙNG NHẤT\n      if (cleanMessage.includes('dừng') || cleanMessage.includes('stop')) {\n        // LỆNH DỪNG - ƯU TIÊN CAO NHẤT\n        stopAll()\n        return\n      } else if (cleanMessage.startsWith('auto xây ')) {\n        // LỆNH AUTO XÂY - THỨ TỰ CAO\n        // Lấy loại công trình từ lệnh\n        const buildType = message.substring(9).trim() // Lấy phần sau \"auto xây \"\n        if (buildType) {\n          // Kiểm tra có lệnh \"phẳng\" để clear terrain trước\n          if (buildType.includes('phẳng') || buildType.includes('clear')) {\n            const realBuildType = buildType.replace(/phẳng|clear/g, '').trim()\n            autoBuildManager.startSmartAutoBuild(realBuildType || 'nhà nhỏ')\n          } else {\n            autoBuildManager.startSmartAutoBuild(buildType)\n          }\n        } else {\n          bot.chat('🏠 Các loại công trình có sẵn:')\n          bot.chat('🏘️ Nhà nhỏ: auto xây nhà nhỏ')\n          bot.chat('🗼 Tháp: auto xây tháp nhỏ')\n          bot.chat('🌉 Cầu: auto xây cầu')\n          bot.chat('🌱 Dọn phẳng: auto xây phẳng [loại]')\n          bot.chat('✨ Nhanh, đẹp và tiết kiệm vật liệu!')\n        }\n      } else if (cleanMessage.includes('dừng xây') || cleanMessage.includes('stop build')) {\n        autoBuildManager.stopSmartAutoBuild()\n      } else if (cleanMessage.includes('theo')) {\n        if (autoFishingActive) stopAutoFishing() // Dừng câu khi có lệnh khác\n\n        // Kiểm tra xem có chỉ định player cụ thể không\n        const followMatch = cleanMessage.match(/theo\\s+(.+)/)\n        if (followMatch && followMatch[1].trim() !== '' && !cleanMessage.startsWith('theo tớ')) {\n          const targetName = followMatch[1].trim()\n          followingManager.startFollowingPlayer(targetName)\n        } else {\n          followingManager.startFollowingPlayer(username)\n        }\n      } else if (cleanMessage.includes('bảo vệ')) {\n        if (autoFishingActive) stopAutoFishing() // Dừng câu khi có lệnh khác\n\n        // Kiểm tra xem có chỉ định player cụ thể không\n        const protectMatch = cleanMessage.match(/bảo vệ\\s+(.+)/)\n        if (protectMatch && protectMatch[1].trim() !== '' && !cleanMessage.startsWith('bảo vệ tớ')) {\n          const targetName = protectMatch[1].trim()\n          protectingManager.startProtectingPlayer(targetName)\n        } else {\n          protectingManager.startProtectingPlayer(username)\n        }\n      // Bow commands removed\n      } else if (cleanMessage.includes('ngủ')) {\n        if (autoFishingActive) stopAutoFishing() // Dừng câu khi có lệnh khác\n        goSleep()\n      } else if (cleanMessage.includes('cần')) {\n        giveItemToPlayer(username, message)\n      } else if (cleanMessage.includes('cất đồ')) {\n        if (autoFishingActive) stopAutoFishing() // Dừng câu khi có lệnh khác\n        storeItemsInChest()\n      } else if (cleanMessage.includes('auto farmer') || cleanMessage.includes('crop farm')) {\n        if (autoFishingActive) stopAutoFishing() // Dừng câu khi có lệnh khác\n        startAutoCropFarmer()\n      } else if (cleanMessage.includes('dừng farmer') || cleanMessage.includes('stop farmer')) {\n        stopAutoCropFarmer()\n      } else if (cleanMessage.includes('auto farm all') || cleanMessage.includes('farm')) {\n        if (autoFishingActive) stopAutoFishing() // Dừng câu khi có lệnh khác\n        autoFarmManager.startAutoFarmAll()\n      } else if (cleanMessage.startsWith('tớ hỏi nè')) {\n        handleQuestionWithAI(username, message)\n      } else if (cleanMessage.includes('auto câu') || cleanMessage.includes('fishing')) {\n        startSmartAutoFishing()\n      } else if (cleanMessage.includes('dừng câu') || cleanMessage.includes('stop fishing')) {\n        stopSmartAutoFishing()\n      } else if (cleanMessage.includes('auto mine') || cleanMessage.includes('auto đào')) {\n        // Parse ore type from command\n        const oreMatch = cleanMessage.match(/(?:auto mine|auto đào)\\s+(\\w+)/)\n        if (oreMatch) {\n          const oreType = oreMatch[1].toLowerCase()\n          startAutoMining(oreType)\n        } else {\n          bot.chat('🤔 Cậu muốn đào quặng gì? VD: \"auto mine diamond\" hoặc \"auto đào iron\"')\n          bot.chat('📝 Các loại quặng: diamond, iron, gold, coal, copper, emerald, redstone, lapis')\n        }\n      } else if (cleanMessage.includes('dừng đào') || cleanMessage.includes('stop mining')) {\n        if (autoMiningActive) {\n          stopAutoMining()\n        } else {\n          bot.chat('🤔 Tớ không đang đào mà!')\n        }\n      // Auto chest hunting commands\n      } else if (cleanMessage.includes('auto tìm rương') || cleanMessage.includes('auto chest')) {\n        startAutoChestHunting()\n      } else if (cleanMessage.includes('dừng tìm rương') || cleanMessage.includes('dừng chest') || cleanMessage.includes('stop chest')) {\n        stopAutoChestHunting()\n      // End auto chest hunting commands\n      // PVP commands\n      } else if (cleanMessage.startsWith('pvp ')) {\n        // Standard PVP command: pvp <playername>\n        const targetName = message.substring(4).trim()\n        if (targetName) {\n          startPvP(targetName)\n        } else {\n          bot.chat('🤔 Cậu muốn PVP với ai? VD: \"pvp Steve\"')\n        }\n      } else if (cleanMessage.startsWith('pvppro ') || cleanMessage.startsWith('/pvppro ')) {\n        // PVP Pro command: pvppro <playername> hoặc /pvppro <playername>\n        const startIndex = cleanMessage.startsWith('/pvppro ') ? 8 : 7\n        const targetName = message.substring(startIndex).trim()\n        if (targetName) {\n          startPvPPro(targetName)\n        } else {\n          bot.chat('🤔 Cậu muốn PVP Pro với ai? VD: \"pvppro Steve\"')\n        }\n      } else if (cleanMessage === 'list players' || cleanMessage === 'danh sách players') {\n        // Debug command: hiển thị danh sách players\n        const allPlayers = Object.keys(bot.players)\n        if (allPlayers.length > 0) {\n          bot.chat(`📋 Players trong server: [${allPlayers.join(', ')}]`)\n          console.log(`📋 DEBUG - Danh sách players:`, allPlayers)\n        } else {\n          bot.chat('📋 Không có player nào trong server (ngoài tớ)')\n          console.log('📋 DEBUG - Player list empty')\n        }\n      // End PVP commands\n      } else if (cleanMessage.startsWith('hãy nói ')) {\n        // Chức năng lặp lại câu nói\n        const textToRepeat = message.substring(8).trim() // Lấy phần sau \"hãy nói \"\n        if (textToRepeat) {\n          bot.chat(textToRepeat)\n          console.log(`🔊 Bot lặp lại: \"${textToRepeat}\"`)\n        } else {\n          bot.chat('🤔 Cậu muốn tớ nói gì?')\n        }\n      } else if (cleanMessage.includes('spam attack') || cleanMessage.includes('tấn công spam')) {\n        // Kích hoạt chế độ spam attack đặc biệt\n        bot.chat('🔥 SPAM ATTACK MODE ON! Tớ sẽ đánh cực nhanh không delay!')\n        console.log('🔥 Spam Attack Mode: ACTIVATED')\n\n        // Tìm và spam attack mob gần nhất\n        const nearestMob = bot.nearestEntity((entity: any) => {\n          if (!entity || !entity.position) return false\n          const distance = bot.entity.position.distanceTo(entity.position)\n          if (distance > 10) return false\n\n          const hostileMobs = [\n            'zombie', 'skeleton', 'creeper', 'spider', 'witch', 'pillager', 'vindicator',\n            'evoker', 'husk', 'stray', 'phantom', 'drowned', 'enderman', 'breeze', 'bogged',\n            'slime', 'silverfish', 'cave_spider'\n          ]\n          const mobName = entity.name ? entity.name.toLowerCase() : ''\n          const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''\n\n          const isHostile = hostileMobs.some(mobType =>\n            mobName.includes(mobType) || displayName.includes(mobType)\n          )\n\n          const isMobType = entity.type === 'mob' &&\n                           !mobName.includes('villager') &&\n                           !mobName.includes('iron_golem')\n\n          return isHostile || isMobType\n        })\n\n        if (nearestMob) {\n          equipBestWeapon()\n          bot.setControlState('sprint', true)\n\n          // ULTRA MEGA SPAM - 20 lần tấn công liên tiếp\n          for (let megaSpam = 0; megaSpam < 20; megaSpam++) {\n            meleeAttack(nearestMob, bot.entity.position.distanceTo(nearestMob.position))\n          }\n          bot.chat('⚔️ MEGA SPAM COMPLETE! 20x attacks delivered!')\n        } else {\n          bot.chat('🤔 Không thấy mob nào để spam attack!')\n        }\n      } else if (cleanMessage.startsWith('en ')) {\n        // Chức năng enchant công cụ\n        const toolName = message.substring(3).trim()\n        await handleEnchantTool(username, toolName)\n      } else if (!isCommand(cleanMessage)) {\n        // Chat thường không phải lệnh - sử dụng AI để trả lời\n        console.log(`🧠 Đang suy nghĩ để trả lời chat: \"${message}\"`)\n        await handleChatWithAI(username, message)\n      }\n    })\n  })\n\n  // Theo dõi player join game\n  bot.on('playerJoined', (player: any) => {\n    if (player.username !== bot.username) {\n      console.log(`🎉 Player ${player.username} joined game`)\n      welcomePlayer(player.username)\n    }\n  })\n\n  // Theo dõi player left game\n  bot.on('playerLeft', (player: any) => {\n    if (player.username !== bot.username) {\n      console.log(`👋 Player ${player.username} left game`)\n    }\n  })\n\n  // ------------------ Enchant Tool Function ------------------\n  async function handleEnchantTool(username: string, toolName: string) {\n    if (!toolName) {\n      bot.chat('🤔 Cậu muốn tớ enchant công cụ gì? VD: en diamond_sword')\n      return\n    }\n\n    try {\n      // Bước 1: Kiểm tra quyền OP bằng cách thử enchant đơn giản\n      bot.chat('🔍 Kiểm tra quyền OP...')\n\n      // Thử lệnh gamemode để test OP permission\n      try {\n        bot.chat('/gamemode survival')\n        await new Promise(resolve => setTimeout(resolve, 1000))\n\n        // Nếu không có lỗi chat về permission thì có OP\n        if (bot.chat) { // Check if chat function is still available\n          console.log('✅ Bot có quyền OP - có thể enchant')\n        } else {\n           throw new Error(\"Chat function unavailable\");\n        }\n      } catch (error) {\n        bot.chat('🥺 Tớ không có quyền OP để enchant!')\n        return\n      }\n\n      // Bước 2: Tìm công cụ trong túi đồ\n      const toolItem = bot.inventory.items().find(item => {\n        const itemName = item.name.toLowerCase()\n        const searchName = toolName.toLowerCase()\n        return itemName.includes(searchName) ||\n               itemName === searchName ||\n               itemName.replace('_', '').includes(searchName.replace('_', ''))\n      })\n\n      if (!toolItem) {\n        bot.chat(`🥺 Không có ${toolName} trong túi để enchant!`)\n        bot.chat('Có lỗi rồi')\n        return\n      }\n\n      // Bước 3: Trang bị công cụ\n      await bot.equip(toolItem, 'hand')\n      bot.chat(`⚔️ Đã cầm ${toolItem.name}, bắt đầu enchant!`)\n\n      await new Promise(resolve => setTimeout(resolve, 1000))\n\n      // Bước 4: Enchant theo loại công cụ với lệnh đúng định dạng\n      const itemName = toolItem.name.toLowerCase()\n      let enchantSuccess = true\n\n      if (itemName.includes('sword')) {\n        // Enchant cho kiếm với delay dài hơn và format đúng\n        bot.chat(`⚔️ Enchant kiếm khó ra dòng xịn lắm`)\n        bot.chat(`/enchant sharpness 5`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant sweeping 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant looting 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant fire_aspect 2`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant knockback 2`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('helmet')) {\n        // Enchant cho mũ với delay dài hơn\n        bot.chat(`Enchant tốn thời gian ghê!!`)\n        bot.chat(`/enchant protection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant fireprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant blastprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant projectileprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant respiration 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant aquaaffinity 1`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('chestplate')) {\n        // Enchant cho áo giáp với delay dài hơn\n        bot.chat(`🛡️ Enchant áo giáp`)\n        bot.chat(`/enchant protection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant fireprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant blastprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant projectileprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('leggings')) {\n        // Enchant cho quần với delay dài hơn\n        bot.chat(`👖 Enchant quần`)\n        bot.chat(`/enchant protection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant fireprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant blastprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant projectileprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('boots')) {\n        // Enchant cho giày với delay dài hơn\n        bot.chat(`👢 Enchant giày`)\n        bot.chat(`/enchant protection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant fireprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant blastprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant projectileprotection 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant featherfalling 4`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant depthstrider 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('bow')) {\n        // Enchant cho cung với delay dài hơn\n        bot.chat(`🏹 Enchant cung với power tối đa!`)\n        bot.chat(`/enchant power 5`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant punch 2`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant flame 1`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant infinity 1`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('trident')) {\n        // Enchant cho đinh ba với delay dài hơn\n        bot.chat(`🔱 Enchant đinh ba với impaling tối đa!`)\n        bot.chat(`/enchant impaling 5`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant loyalty 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant channeling 1`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('pickaxe')) {\n        // Enchant cho cuốc với delay dài hơn\n        bot.chat(`⛏️ Enchant pickaxe`)\n        bot.chat(`/enchant efficiency 5`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant fortune 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('axe')) {\n        // Enchant cho rìu với delay dài hơn\n        bot.chat(`🪓 Enchant rìu `)\n        bot.chat(`/enchant efficiency 5`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant sharpness 5`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('shovel')) {\n        // Enchant cho xẻng với delay dài hơn\n        bot.chat(`🥄 Enchant xẻng`)\n        bot.chat(`/enchant efficiency 5`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else if (itemName.includes('elytra')) {\n        // Enchant cho cánh với delay dài hơn\n        bot.chat(`🪶 Enchant elytra!`)\n        bot.chat(`/enchant unbreaking 3`)\n        await new Promise(resolve => setTimeout(resolve, 1200))\n        bot.chat(`/enchant mending 1`)\n\n      } else {\n        bot.chat(`🤔 Không biết cách enchant ${toolItem.name}`)\n        enchantSuccess = false\n      }\n\n      // Bước 5: Hoàn thành với kiểm tra kết quả\n      await new Promise(resolve => setTimeout(resolve, 2000))\n\n      if (enchantSuccess) {\n        bot.chat(`✨ Hoàn tất enchant ${toolItem.name}! Nè`)\n      } else {\n        bot.chat(`🤔 Không thể enchant ${toolItem.name} - không hỗ trợ loại này!`)\n      }\n      bot.chat('Có lỗi rồi')\n\n    } catch (error) {\n      console.log('❌ Lỗi enchant tool:', error)\n      bot.chat('🥺 Có lỗi khi enchant!')\n      bot.chat('Có lỗi rồi')\n    }\n  }\n\n  // ------------------ Function kiểm tra có phải command không ------------------\n  function isCommand(message: string): boolean {\n    const commands = [\n      'auto xây', 'dừng xây', 'stop build',\n      'theo', 'bảo vệ', 'dừng', 'stop',\n      'ngủ', 'cần', 'cất đồ',\n      'farm', 'auto farm all', 'spam attack',\n      'auto farmer', 'crop farm', 'dừng farmer', 'stop farmer',\n      'tớ hỏi nè', 'auto câu', 'fishing',\n      'dừng câu', 'stop fishing',\n\n      'auto tìm rương', 'auto chest', 'dừng tìm rương', 'dừng chest', 'stop chest',\n      'hãy nói', 'en '\n    ]\n\n    return commands.some(cmd => message.includes(cmd))\n  }\n\n  // ------------------ Player Join Welcome ------------------\n  function welcomePlayer(username: string) {\n    const welcomeMessages = [\n      `🎉 Chào mừng ${username} đến server! Tớ là bot helper đây~`,\n      `✨ Xin chào ${username}! Cần giúp gì cứ gọi tớ nhé!`,\n      `🌟 Hi ${username}! Tớ có thể giúp cậu với nhiều thứ đấy!`,\n      `💫 Chào ${username}! Tớ ở đây để hỗ trợ cậu!`,\n      `🎈 Welcome ${username}! Tớ là bot thông minh nè~`\n    ]\n\n    const randomMessage = welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)]\n\n    // Delay ngẫu nhiên 1-3 giây để tự nhiên hơn\n    const delay = 1000 + Math.random() * 2000\n    setTimeout(() => {\n      bot.chat(randomMessage)\n    }, delay)\n  }\n\n  // ------------------ AI Chat Handler cho chat thường ------------------\n  async function handleChatWithAI(username: string, message: string) {\n    if (!geminiApiKey) {\n      // Không chat gì khi không có AI - im lặng\n      return\n    }\n\n    try {\n      // Không hiển thị \"đang suy nghĩ\" trong game - chỉ console log\n      console.log(`🤖 AI đang phân tích chat từ ${username}: \"${message}\"`)\n\n      const systemPrompt = `Bạn là bot Minecraft tên Loli, rất đáng yêu và kawaii! ${username} nói: \"${message}\".\n\nHãy trả lời một cách tự nhiên với phong cách:\n- Dùng emoji cute: 💕 🌸 ✨ (◕‿◕) >.<  uwu (´∀｀) ♡ 💖 🎀\n- Xưng tớ, gọi cậu\n- Phong cách loli kawaii, ngọt ngào\n- Dưới 80 ký tự để chat game không bị cắt\n- Thêm từ cute như \"nè\", \"mà\", \"uwu\", \"kyaa\"\n- Trả lời phù hợp với ngữ cảnh`\n\n      const payload = {\n        contents: [{\n          parts: [{\n            text: `${systemPrompt}\\n\\nChat: ${message}`\n          }]\n        }],\n        generationConfig: {\n          maxOutputTokens: 100,\n          temperature: 0.8\n        }\n      }\n\n      // FIX: Gemini API endpoint changed to v1beta and gemini-2.0-flash\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        console.log('❌ AI API Error:', result)\n        return // Im lặng khi có lỗi\n      }\n\n      const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text\n\n      if (generatedText && generatedText.trim() !== '') {\n        // Trả lời AI trong game - chỉ khi có nội dung hợp lệ\n        const aiResponse = generatedText.substring(0, 80) // Cắt ngắn cho chat game\n        bot.chat(aiResponse)\n        console.log(`💬 AI đã trả lời: \"${aiResponse}\"`)\n      } else {\n        console.log(`🤖 AI không có phản hồi phù hợp cho: \"${message}\"`)\n      }\n    } catch (error) {\n      // Im lặng khi có lỗi AI - không spam chat\n      console.error(`❌ Lỗi AI chat với ${username}:`, error.message || error)\n    }\n  }\n\n  // ------------------ Question AI Response ------------------\n  async function handleQuestionWithAI(username: string, message: string) {\n    if (!geminiApiKey) {\n      bot.chat('🥺 Tớ chưa được cấu hình Gemini AI, cậu liên hệ admin nhé!')\n      return\n    }\n\n    try {\n      // Hiển thị tin nhắn đang suy nghĩ\n      bot.chat('💭 Để tớ suy nghĩ cute cute nè~ (◕‿◕)✨')\n\n      const question = message.replace(/tớ hỏi nè/i, '').trim()\n      const systemPrompt = `Bạn là bot Minecraft tên Loli, rất đáng yêu và kawaii! ${username} hỏi: \"${question}\".\n\nHãy trả lời câu hỏi này với phong cách:\n- Dùng nhiều emoji cute: 💕 🌸 ✨ (◕‿◕) >.<  uwu (´∀｀) ♡ 💖 🎀\n- Xưng tớ, gọi cậu\n- Phong cách loli kawaii, ngọt ngào\n- Dưới 100 ký tự\n- Thêm từ cute như \"nè\", \"mà\", \"uwu\", \"kyaa\"\n- Hữu ích nhưng rất đáng yêu`\n\n      const payload = {\n        contents: [{\n          parts: [{\n            text: `${systemPrompt}\\n\\nCâu hỏi: ${question}`\n          }]\n        }],\n        generationConfig: {\n          maxOutputTokens: 120,\n          temperature: 0.9\n        }\n      }\n\n      // FIX: Gemini API endpoint changed to v1beta and gemini-2.0-flash\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      })\n\n      const result = await response.json()\n\n      if (!response.ok) {\n        console.log('❌ AI API Error:', result)\n        throw new Error(`API Error: ${result.error?.message || 'Unknown error'}`)\n      }\n\n      const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text\n\n      if (generatedText && generatedText.trim() !== '') {\n        // Chỉ trả lời khi có nội dung thật từ AI\n        bot.chat(generatedText.substring(0, 100))\n      } else {\n        // Trả lời đơn giản khi AI không có câu trả lời\n        bot.chat('🥺 Tớ không biết câu trả lời này, cậu hỏi câu khác nhé! (◕‿◕)💕')\n      }\n    } catch (error) {\n      // Trả lời đơn giản khi có lỗi AI\n      bot.chat('🥺 Tớ bị lỗi rồi, cậu hỏi lại sau nhé!')\n      console.error('Lỗi chat AI:', error)\n    }\n  }\n\n  // ------------------ Follow / Protect ------------------\n  startFollowingPlayer = function(username: string) {\n    // Tìm player entity với nhiều cách khác nhau\n    let playerEntity = bot.players[username]?.entity\n\n    // Nếu không tìm thấy, thử tìm theo tên không có dấu chấm\n    if (!playerEntity && username.startsWith('.')) {\n      const nameWithoutDot = username.substring(1)\n      playerEntity = bot.players[nameWithoutDot]?.entity\n    }\n\n    // Nếu vẫn không tìm thấy, thử tìm theo tên có dấu chấm\n    if (!playerEntity && !username.startsWith('.')) {\n      const nameWithDot = '.' + username\n      playerEntity = bot.players[nameWithDot]?.entity\n    }\n\n    // Tìm trong tất cả players nếu vẫn không thấy\n    if (!playerEntity) {\n      const allPlayers = Object.keys(bot.players)\n      console.log(`🔍 Tìm kiếm player: ${username} trong danh sách:`, allPlayers)\n\n      // Tìm player gần đúng\n      for (const playerName of allPlayers) {\n        if (playerName.toLowerCase().includes(username.toLowerCase()) ||\n            username.toLowerCase().includes(playerName.toLowerCase())) {\n          playerEntity = bot.players[playerName]?.entity\n          console.log(`✅ Tìm thấy player tương ứng: ${playerName}`)\n          break\n        }\n      }\n    }\n\n    if (!playerEntity) {\n      bot.chat(`🥺 Cậu phải ở trong tầm nhìn của tớ thì tớ mới đi theo được!!?`)\n      console.log(`❌ Không tìm thấy player: ${username}`)\n      return\n    }\n\n    targetPlayer = playerEntity\n    bot.chat(`❤️ Tớ sẽ theo cậu đến cùng trời cuối đất!`)\n    stopProtecting()\n    itemCollectionDisabled = false // Bật lại nhặt đồ khi dùng chức năng\n    startFollowing()\n    console.log(`✅ Bắt đầu theo ${username}`)\n  }\n\n  function startFollowing() {\n    isFollowing = true\n    if (followInterval) clearInterval(followInterval)\n\n    let tpFailCount = 0 // Đếm số lần /tp thất bại\n    let lastBoatCheck = 0 // Track lần cuối kiểm tra thuyền\n    let isInBoat = false // Track trạng thái đang ngồi thuyền\n    let lastMovementTime = 0 // Track để giảm spam movement\n\n    followInterval = setInterval(async () => {\n      if (!targetPlayer || !targetPlayer.isValid) {\n        stopFollowing()\n        return\n      }\n\n      const targetPos = targetPlayer.position\n      const distance = bot.entity.position.distanceTo(targetPos)\n      const currentTime = Date.now()\n\n      // TRANG BỊ CÔNG CỤ PHÙHỢP KHI ĐI THEO (không phải combat) - giảm frequency\n      if (currentTime % 15000 < 2000) { // Mỗi 15 giây kiểm tra 1 lần thay vì 10 giây\n        equipBestToolForFollowing()\n      }\n\n      // KIỂM TRA THUYỀN MỖI 3 GIÂY thay vì 2 giây\n      if (currentTime - lastBoatCheck > 3000) {\n        lastBoatCheck = currentTime\n\n        // Kiểm tra xem player có đang ngồi thuyền không\n        const isPlayerOnBoat = targetPlayer.vehicle && targetPlayer.vehicle.name && targetPlayer.vehicle.name.includes('boat')\n\n        // Tìm thuyền gần trong bán kính 4 blocks\n        const nearbyBoat = bot.nearestEntity((entity: any) => {\n          if (!entity || !entity.position) return false\n          const boatDistance = bot.entity.position.distanceTo(entity.position)\n          return boatDistance <= 4 && entity.name && entity.name.includes('boat')\n        })\n\n        if (nearbyBoat && !isInBoat && isPlayerOnBoat) {\n          try {\n            // Di chuyển đến thuyền và ngồi lên\n            const movements = new Movements(bot)\n            movements.allowSprinting = true\n            bot.pathfinder.setMovements(movements)\n            bot.pathfinder.setGoal(new goals.GoalNear(nearbyBoat.position.x, nearbyBoat.position.y, nearbyBoat.position.z, 1))\n\n            setTimeout(async () => {\n              try {\n                await bot.mount(nearbyBoat)\n                isInBoat = true\n                bot.chat('🛥️ Lên thuyền theo cậu!')\n              } catch (mountError) {\n                // Silent fail\n              }\n            }, 1000)\n          } catch (error) {\n            // Silent fail để giảm spam log\n          }\n        } else if (isInBoat && (!isPlayerOnBoat || distance > 4)) {\n          try {\n            bot.dismount()\n            isInBoat = false\n            bot.chat('🛥️ Xuống thuyền!')\n          } catch (error) {\n            isInBoat = false // Reset trạng thái\n          }\n        }\n      }\n\n      // Nếu đang ngồi thuyền và gần player thì không cần làm gì thêm\n      if (isInBoat && distance <= 4) {\n        return\n      }\n\n      // Nếu quá xa thì teleport\n      if (distance > 14) {\n        try {\n          // Kiểm tra nếu đã thất bại quá nhiều lần\n          if (tpFailCount >= 3) {\n            bot.chat('🥺 Tớ không có quyền /tp để theo cậu. Dừng theo dõi!')\n            stopFollowing()\n            return\n          }\n\n          bot.chat(`/tp ${bot.username} ${targetPlayer.username}`)\n\n          // Kiểm tra thành công sau 2 giây\n          setTimeout(() => {\n            if (!targetPlayer || !targetPlayer.isValid) return\n\n            const newDistance = bot.entity.position.distanceTo(targetPlayer.position)\n            if (newDistance > 15) { // Nếu vẫn xa thì /tp thất bại\n              tpFailCount++\n\n              if (tpFailCount >= 3) {\n                bot.chat('🥺 Tớ không có quyền /tp. Dừng theo dõi!')\n                stopFollowing()\n              }\n            } else {\n              tpFailCount = 0 // Reset nếu thành công\n            }\n          }, 2500)\n\n        } catch (e) {\n          tpFailCount++\n          if (tpFailCount >= 3) {\n            bot.chat('🥺 Tớ không thể đến gần cậu! Dừng theo dõi!')\n            stopFollowing()\n            return\n          }\n        }\n        return\n      }\n\n      // Reset count khi ở gần\n      if (distance <= 12) {\n        tpFailCount = 0\n      }\n\n      // Di chuyển theo logic cải tiến - giảm spam movement\n      if (!isInBoat && distance > 3 && currentTime - lastMovementTime > 1000) {\n        lastMovementTime = currentTime\n\n        try {\n          // Setup movement mới mỗi lần để đảm bảo setting đúng\n          const movements = new Movements(bot)\n          movements.canDig = distance > 10 // Chỉ đào khi cách xa\n          movements.allow1by1towers = true\n          movements.allowParkour = true\n          movements.allowSprinting = true\n          movements.allowEntityDetection = true\n          movements.allowFreeMotion = true\n          movements.canOpenDoors = true\n          movements.infiniteLiquidDropCost = 5\n          movements.scafoldingBlocks = [bot.registry.itemsByName.cobblestone?.id, bot.registry.itemsByName.dirt?.id].filter(Boolean)\n          bot.pathfinder.setMovements(movements)\n\n          // Sử dụng GoalNear thay vì GoalFollow để ổn định hơn\n          const followDistance = distance > 8 ? 3 : 2\n          bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, followDistance))\n\n        } catch (error) {\n          // Silent fail để giảm spam log\n        }\n      }\n    }, 1500) // Giảm frequency từ 2000ms xuống 1500ms cho responsive hơn\n  }\n\n  stopFollowing = function() {\n    isFollowing = false\n    if (followInterval) clearInterval(followInterval)\n    followInterval = null\n    bot.pathfinder.setGoal(null)\n  }\n\n  startProtectingPlayer = function(username: string) {\n    // Tìm player entity với nhiều cách khác nhau\n    let playerEntity = bot.players[username]?.entity\n\n    // Nếu không tìm thấy, thử tìm theo tên không có dấu chấm\n    if (!playerEntity && username.startsWith('.')) {\n      const nameWithoutDot = username.substring(1)\n      playerEntity = bot.players[nameWithoutDot]?.entity\n    }\n\n    // Nếu vẫn không tìm thấy, thử tìm theo tên có dấu chấm\n    if (!playerEntity && !username.startsWith('.')) {\n      const nameWithDot = '.' + username\n      playerEntity = bot.players[nameWithDot]?.entity\n    }\n\n    // Tìm trong tất cả players nếu vẫn không thấy\n    if (!playerEntity) {\n      const allPlayers = Object.keys(bot.players)\n      console.log(`🔍 Tìm kiếm player: ${username} trong danh sách:`, allPlayers)\n\n      // Tìm player gần đúng\n      for (const playerName of allPlayers) {\n        if (playerName.toLowerCase().includes(username.toLowerCase()) ||\n            username.toLowerCase().includes(playerName.toLowerCase())) {\n          playerEntity = bot.players[playerName]?.entity\n          console.log(`✅ Tìm thấy player tương ứng: ${playerName}`)\n          break\n        }\n      }\n    }\n\n    if (!playerEntity) {\n      bot.chat(`🥺 Cậu phải ở gần tớ thì tớ mới bảo vệ được!?💞`)\n      console.log(`❌ Không tìm thấy player: ${username}`)\n      return\n    }\n\n    targetPlayer = playerEntity\n    bot.chat(`🛡️ Tớ sẽ bảo vệ cậu khỏi tất cả nguy hiểm!`)\n    stopFollowing()\n    itemCollectionDisabled = false // Bật lại nhặt đồ khi dùng chức năng\n    startProtecting()\n    console.log(`✅ Bắt đầu bảo vệ ${username}`)\n  }\n\n  // Biến kiểm tra quyền OP\n  let hasOpPermission: boolean | null = null\n  let hasTriedOpCommand = false\n  let lastOpCheckTime = 0\n\n  function startProtecting() {\n    isProtecting = true\n    if (protectInterval) clearInterval(protectInterval)\n\n    // Tắt nhặt đồ khi bảo vệ để tập trung chiến đấu\n    itemCollectionDisabled = true\n\n    // Reset OP check khi bắt đầu bảo vệ mới\n    hasOpPermission = null\n    hasTriedOpCommand = false\n    lastOpCheckTime = 0\n    let lastMovementTime = 0 // Track để giảm spam movement logs\n\n    protectInterval = setInterval(async () => {\n      if (!targetPlayer || !targetPlayer.isValid) {\n        stopProtecting()\n        return\n      }\n\n      const targetPos = targetPlayer.position\n      const distanceToPlayer = bot.entity.position.distanceTo(targetPos)\n      const health = bot.health\n      const protectTime = Date.now()\n\n      // Auto buff khi máu yếu - giảm frequency check\n      if (health < 8 && (protectTime - lastOpCheckTime) > 15000) { // Tăng lên 15 giây\n        lastOpCheckTime = protectTime\n\n        if (hasOpPermission === null && !hasTriedOpCommand) {\n          hasTriedOpCommand = true\n          bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)\n          setTimeout(() => bot.chat('Đòi ăn ai'), 100)\n\n          setTimeout(() => {\n            if (bot.health > health) {\n              hasOpPermission = true\n            } else {\n              hasOpPermission = false\n              bot.chat('🥺 Tớ không có quyền OP để tự buff, nhưng vẫn bảo vệ cậu!')\n            }\n          }, 3000)\n\n        } else if (hasOpPermission === true) {\n          bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)\n          setTimeout(() => bot.chat(`/effect give ${bot.username} strength 5 2 true`), 100)\n          setTimeout(() => bot.chat('Đòi ăn ai'), 200)\n        }\n      }\n\n      // Tìm quái gần nhất - giảm phạm vi để focused hơn\n      let mob = bot.nearestEntity((entity: any) => {\n        if (!entity || !entity.position) return false\n\n        const distanceToMob = bot.entity.position.distanceTo(entity.position)\n        if (distanceToMob > 15) return false // Giảm từ 20 xuống 15 blocks\n\n        const hostileMobs = [\n          'zombie', 'skeleton', 'creeper', 'spider', 'witch', 'pillager', 'vindicator', 'evoker',\n          'husk', 'stray', 'phantom', 'drowned', 'enderman', 'breeze', 'bogged',\n          'slime', 'silverfish', 'cave_spider'\n        ]\n        const mobName = entity.name ? entity.name.toLowerCase() : ''\n        const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''\n\n        const isHostile = hostileMobs.some(mobType =>\n          mobName.includes(mobType) || displayName.includes(mobType)\n        )\n\n        const isMobType = entity.type === 'mob' &&\n                         !mobName.includes('villager') &&\n                         !mobName.includes('iron_golem')\n\n        return isHostile || isMobType\n      })\n\n      // LOGIC BẢO VỆ CẢI THIỆN với ít spam log hơn\n      if (distanceToPlayer > 14) { // Giảm ngưỡng teleport xuống 14 blocks\n        try {\n          bot.chat(`/tp ${bot.username} ${targetPlayer.username}`)\n          bot.pvp.stop()\n\n          setTimeout(() => {\n            if (!targetPlayer || !targetPlayer.isValid) return\n\n            const newDistance = bot.entity.position.distanceTo(targetPlayer.position)\n            if (newDistance > 15) {\n              // Setup safe movement\n              const movements = new Movements(bot)\n              movements.canDig = true\n              movements.allowSprinting = true\n              movements.allow1by1towers = true\n              bot.pathfinder.setMovements(movements)\n              bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))\n            }\n          }, 2500)\n        } catch (e) {\n          // Fallback movement\n          const movements = new Movements(bot)\n          movements.canDig = true\n          movements.allowSprinting = true\n          bot.pathfinder.setMovements(movements)\n          bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))\n        }\n      } else if (mob && health > 6 && !isEating) {\n        // CÓ QUÁI VÀ ĐỦ MÁU: TẤN CÔNG\n        const mobDistance = bot.entity.position.distanceTo(mob.position)\n\n        // Trang bị vũ khí chỉ khi cần thiết\n        const currentWeapon = bot.heldItem\n        if (!currentWeapon || !currentWeapon.name.includes('sword')) {\n          equipBestSwordForCombat()\n          await new Promise(resolve => setTimeout(resolve, 200))\n        }\n\n        if (distanceToPlayer > 8) {\n          // Quá xa player, quay về\n          bot.pvp.stop()\n          const movements = new Movements(bot)\n          movements.allowSprinting = true\n          bot.pathfinder.setMovements(movements)\n          bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))\n        } else if (mobDistance > 4) {\n          // Tiến đến mob nếu an toàn\n          const mobPos = mob.position\n          const futureDistanceToPlayer = targetPlayer.position.distanceTo(mobPos)\n\n          if (futureDistanceToPlayer <= 6) {\n            const movements = new Movements(bot)\n            movements.allowSprinting = true\n            bot.pathfinder.setMovements(movements)\n            bot.pathfinder.setGoal(new goals.GoalNear(mobPos.x, mobPos.y, mobPos.z, 2))\n          } else {\n            // Mob quá xa, ưu tiên player\n            const movements = new Movements(bot)\n            movements.allowSprinting = true\n            bot.pathfinder.setMovements(movements)\n            bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 3))\n          }\n        } else {\n          // Tấn công trực tiếp\n          bot.pathfinder.setGoal(null)\n          bot.setControlState('sprint', true)\n\n          if (mob && mob.isValid) {\n            // Giảm spam attack từ 8 xuống 5\n            for (let attack = 0; attack < 5; attack++) {\n              meleeAttack(mob, mobDistance)\n            }\n          }\n        }\n      } else if (health <= 6) {\n        // MÁU YẾU: Về gần player\n        bot.pvp.stop()\n        const movements = new Movements(bot)\n        movements.allowSprinting = true\n        bot.pathfinder.setMovements(movements)\n        bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 2))\n      } else if (distanceToPlayer > 4 && protectTime - lastMovementTime > 2000) {\n        // KHÔNG CÓ QUÁI VÀ XA PLAYER: Di chuyển về gần - giảm spam logs\n        lastMovementTime = protectTime\n        bot.pvp.stop()\n        const movements = new Movements(bot)\n        movements.allowSprinting = true\n        bot.pathfinder.setMovements(movements)\n        bot.pathfinder.setGoal(new goals.GoalNear(targetPos.x, targetPos.y, targetPos.z, 2))\n      }\n\n    }, 800) // Tăng interval từ 600ms lên 800ms để giảm lag\n  }\n\n  stopProtecting = function() {\n    isProtecting = false\n    if (protectInterval) {\n      clearInterval(protectInterval)\n      protectInterval = null\n    }\n\n    // Bật lại nhặt đồ khi dừng bảo vệ\n    itemCollectionDisabled = false\n\n    bot.pvp.stop()\n    bot.pathfinder.setGoal(null)\n  }\n\n  function stopAll() {\n    // Dừng tất cả hoạt động SILENT - không chat\n    if (followInterval) {\n      clearInterval(followInterval)\n      followInterval = null\n    }\n    if (protectInterval) {\n      clearInterval(protectInterval)\n      protectInterval = null\n    }\n\n    // Dừng fishing silent\n    autoFishingActive = false\n    autoItemCollectionDisabled = false\n    autoEquipDisabled = false\n    isFishing = false\n    hasFishBitten = false\n    if (fishingInterval) {\n      clearInterval(fishingInterval)\n      fishingInterval = null\n    }\n    if (hookCheckInterval) {\n      clearInterval(hookCheckInterval)\n      hookCheckInterval = null\n    }\n\n    // Dừng build silent\n    autoBuildActive = false\n    currentBuildProject = null\n    buildProgress = 0\n\n    // Dừng mining silent\n    if (autoMiningActive) {\n      autoMiningActive = false\n      if (miningInterval) {\n        clearInterval(miningInterval)\n        miningInterval = null\n      }\n      isCurrentlyDigging = false\n    }\n\n    // Dừng farm silent\n    autoFarmActive = false\n    if (farmInterval) clearInterval(farmInterval)\n\n    // Dừng chest hunting silent\n    if (autoChestHuntingActive) {\n      autoChestHuntingActive = false\n      isCurrentlyApproachingChest = false\n      currentChestTarget = null\n      if (chestHuntingInterval) {\n        clearInterval(chestHuntingInterval)\n        chestHuntingInterval = null\n      }\n    }\n\n    // Dừng crop farmer silent\n    if (autoCropFarmerActive) {\n      autoCropFarmerActive = false\n      currentHoeTool = null\n      harvestedCrops.clear()\n      if (cropFarmerInterval) {\n        clearInterval(cropFarmerInterval)\n        cropFarmerInterval = null\n      }\n    }\n\n    // Dừng PVP (gọi stopPvP silent để tránh spam chat)\n    if (pvpActive || pvpProActive) {\n      stopPvP(true) // true = silent mode, không chat\n    }\n\n    // Reset states\n    isFollowing = false\n    isProtecting = false\n    \n    // Dừng PVP và pathfinder\n    try {\n      bot.pvp.stop()\n    } catch (e) {\n      // Ignore PVP stop errors\n    }\n    \n    try {\n      bot.pathfinder.setGoal(null)\n    } catch (e) {\n      // Ignore pathfinder errors\n    }\n\n    // CHỈ CHAT 1 LẦN DUY NHẤT\n    if (bot && bot._client && bot._client.state === 'play') {\n      bot.chat(`🛑 Dừng tất cả rồi nha cậu! 💕`)\n    }\n    console.log('⏹️ Dừng tất cả hoạt động')\n  }\n\n  // ------------------ Sleep ------------------\n  async function goSleep() {\n    console.log('😴 Yêu cầu bot đi ngủ')\n\n    if (bot.time.isDay) {\n      bot.chat(`☀️ Trời đang sáng mà cậu, chưa đi ngủ được đâu!`)\n      return\n    }\n\n    const bedBlock = bot.findBlock({\n      matching: (block: any) => {\n        return block.name.includes('bed')\n      },\n      maxDistance: 16\n    })\n\n    if (bedBlock) {\n      bot.chat(`😴 Tớ buồn ngủ quá, đi ngủ thôi nào!`)\n      try {\n        await bot.sleep(bedBlock)\n        bot.chat(`Zzz... 😴`)\n      } catch (err) {\n        bot.chat(`😢 Tớ không ngủ được ở đây. Cậu tìm chỗ khác nhé.`)\n        console.log('Lỗi ngủ:', err)\n      }\n    } else {\n      bot.chat(`🛌 Tớ không tìm thấy giường nào gần đây cả.`)\n    }\n  }\n\n  // ------------------ Give Item ------------------\n  function giveItemToPlayer(username: string, msg: string) {\n    const match = msg.match(/cần (\\d+) (\\w+)/)\n    if (!match) return\n\n    const qty = parseInt(match[1])\n    const name = match[2]\n\n    // Tìm player entity với nhiều cách khác nhau\n    let playerEntity = bot.players[username]?.entity\n\n    // Nếu không tìm thấy, thử tìm theo tên không có dấu chấm\n    if (!playerEntity && username.startsWith('.')) {\n      const nameWithoutDot = username.substring(1)\n      playerEntity = bot.players[nameWithoutDot]?.entity\n    }\n\n    // Nếu vẫn không tìm thấy, thử tìm theo tên có dấu chấm\n    if (!playerEntity && !username.startsWith('.')) {\n      const nameWithDot = '.' + username\n      playerEntity = bot.players[nameWithDot]?.entity\n    }\n\n    // Tìm trong tất cả players nếu vẫn không thấy\n    if (!playerEntity) {\n      const allPlayers = Object.keys(bot.players)\n      for (const playerName of allPlayers) {\n        if (playerName.toLowerCase().includes(username.toLowerCase()) ||\n            username.toLowerCase().includes(playerName.toLowerCase())) {\n          playerEntity = bot.players[playerName]?.entity\n          break\n        }\n      }\n    }\n\n    if (!playerEntity) {\n      bot.chat(`🥺 Không thấy cậu để đưa ${name}`)\n      return\n    }\n\n    const item = bot.inventory.items().find(i => i.name.includes(name))\n    if (!item) {\n      bot.chat(`🥺 Không có ${name}`)\n      return\n    }\n\n    const throwItem = async () => {\n      try {\n        const distance = bot.entity.position.distanceTo(playerEntity.position)\n        if (distance > 3) {\n          bot.pathfinder.setGoal(new goals.GoalFollow(playerEntity, 2))\n        } else {\n          await bot.toss(item.type, null, qty)\n          bot.chat(`🎁 Đã ném ${item.name} cho ${username}`)\n        }\n      } catch (error) {\n        console.log('Lỗi ném item:', error)\n      }\n    }\n\n    throwItem()\n  }\n\n  // ------------------ Cất đồ vào rương ------------------\n  async function storeItemsInChest() {\n    try {\n      bot.chat('📦 Tớ sẽ cất TẤT CẢ đồ vào rương và sắp xếp theo ưu tiên!')\n\n      // Tìm rương gần nhất\n      const chestBlock = bot.findBlock({\n        matching: (block: any) => {\n          return block.name.includes('chest') ||\n                 block.name.includes('barrel') ||\n                 block.name.includes('shulker')\n        },\n        maxDistance: 32\n      })\n\n      if (!chestBlock) {\n        bot.chat('🥺 Tớ không tìm thấy rương nào gần để cất đồ...')\n        return\n      }\n\n      // Di chuyển đến rương\n      const goal = new goals.GoalNear(chestBlock.position.x, chestBlock.position.y, chestBlock.position.z, 1)\n      await bot.pathfinder.goto(goal)\n\n      // Mở rương và cất đồ\n      await bot.lookAt(chestBlock.position, true)\n      const chest = await bot.openChest(chestBlock)\n\n      // Phân loại đồ theo ưu tiên: khoáng sản > thức ăn > block > linh tinh\n      const categorizedItems = {\n        minerals: [] as any[],\n        food: [] as any[],\n        blocks: [] as any[],\n        misc: [] as any[]\n      }\n\n      // Danh sách khoáng sản\n      const minerals = ['diamond', 'emerald', 'gold', 'iron', 'coal', 'redstone', 'lapis', 'quartz', 'netherite', 'copper', 'amethyst']\n      // Danh sách thức ăn\n      const foods = ['bread', 'apple', 'meat', 'fish', 'potato', 'carrot', 'beef', 'pork', 'chicken', 'mutton', 'salmon', 'cod', 'golden_apple', 'enchanted_golden_apple', 'cookie', 'cake', 'pie', 'soup', 'stew']\n      // Danh sách block\n      const blocks = ['stone', 'dirt', 'grass', 'wood', 'log', 'plank', 'cobblestone', 'sand', 'gravel', 'glass', 'wool', 'brick', 'concrete', 'terracotta']\n\n      // Phân loại items\n      for (const item of bot.inventory.items()) {\n        const itemName = item.name.toLowerCase()\n\n        if (minerals.some(mineral => itemName.includes(mineral))) {\n          categorizedItems.minerals.push(item)\n        } else if (foods.some(food => itemName.includes(food))) {\n          categorizedItems.food.push(item)\n        } else if (blocks.some(block => itemName.includes(block))) {\n          categorizedItems.blocks.push(item)\n        } else {\n          categorizedItems.misc.push(item)\n        }\n      }\n\n      let storedCount = 0\n\n      const storeCategory = async (items: any[], categoryName: string) => {\n        for (const item of items) {\n          try {\n            await chest.deposit(item.type, null, item.count)\n            storedCount++\n            console.log(`📦 Cất ${categoryName}: ${item.name} x${item.count}`)\n            await new Promise(resolve => setTimeout(resolve, 100))\n          } catch (error) {\n            console.log('Lỗi cất', categoryName, ':', error)\n          }\n        }\n      }\n\n      // Cất theo thứ tự ưu tiên\n      await storeCategory(categorizedItems.minerals, 'khoáng sản')\n      await storeCategory(categorizedItems.food, 'thức ăn')\n      await storeCategory(categorizedItems.blocks, 'block')\n      await storeCategory(categorizedItems.misc, 'linh tinh')\n\n      chest.close()\n\n      bot.chat(`✅ Đã cất TẤT CẢ ${storedCount} items theo ưu tiên:`)\n      bot.chat(`💎 Khoáng sản: ${categorizedItems.minerals.length}`)\n      bot.chat(`🍞 Thức ăn: ${categorizedItems.food.length}`)\n      bot.chat(`🧱 Block: ${categorizedItems.blocks.length}`)\n      bot.chat(`📦 Linh tinh: ${categorizedItems.misc.length}`)\n\n    } catch (error) {\n      bot.chat('🥺 Có lỗi khi cất đồ...')\n      console.log('Lỗi store items:', error)\n    }\n  }\n\n  // ------------------ Auto Farm All ------------------\n  startAutoFarmAll = function() {\n    autoFarmActive = true\n    itemCollectionDisabled = false // Bật lại nhặt đồ khi farm\n\n    // Reset OP check cho farm mode\n    hasOpPermission = null\n    hasTriedOpCommand = false\n    lastOpCheckTime = 0\n\n    bot.chat('🗡️ Bắt đầu farm tất cả mob')\n\n    const farmInterval = setInterval(async () => {\n      if (!autoFarmActive) {\n        clearInterval(farmInterval)\n        return\n      }\n\n      try {\n        // Trang bị vũ khí tốt nhất\n        equipBestWeapon()\n\n        // Bow code removed\n\n        // TÌM MOB GẦN NHẤT TRƯỚC TIÊN - ưu tiên gần nhất\n        let mob = bot.nearestEntity((entity: any) => {\n          if (!entity || !entity.position) return false\n\n          const distance = bot.entity.position.distanceTo(entity.position)\n          if (distance > 25) return false // Phạm vi tìm kiếm tối đa 25 blocks\n\n          // Các loại mob cần farm - UPDATED LIST (loại bỏ 'horse')\n          const farmableMobs = [\n            'zombie', 'skeleton', 'creeper', 'spider', 'witch', 'slime',\n            'cow', 'pig', 'chicken', 'sheep', 'rabbit', // Loại bỏ 'horse'\n            'zombie_villager', 'husk', 'stray', 'phantom', 'drowned',\n            'pillager', 'vindicator', 'evoker', 'ravager', 'enderman', 'xtray', 'sulked',\n            'breeze', 'bogged', 'silverfish', 'cave_spider'\n          ]\n\n          const mobName = entity.name ? entity.name.toLowerCase() : ''\n          const displayName = entity.displayName ? entity.displayName.toLowerCase() : ''\n\n          // Loại trừ các mob không nên farm\n          if (mobName.includes('villager') ||\n              mobName.includes('iron_golem') ||\n              mobName.includes('wolf') ||\n              mobName.includes('horse') ||\n              entity.username) {\n            return false\n          }\n\n          // Kiểm tra theo tên\n          const isFarmable = farmableMobs.some(mobType =>\n            mobName.includes(mobType) || displayName.includes(mobType)\n          )\n\n          // Hoặc kiểm tra theo type\n          const isMobType = entity.type === 'mob'\n\n          return isFarmable || isMobType\n        })\n\n        // Kiểm tra máu và sử dụng effect nếu cần (tương tự như protect mode)\n        const health = bot.health\n        const autoFarmTime = Date.now()\n        if (health < 8 && (autoFarmTime - lastOpCheckTime) > 10000) {\n          lastOpCheckTime = autoFarmTime\n\n          if (hasOpPermission === null && !hasTriedOpCommand) {\n            hasTriedOpCommand = true\n            bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)\n            setTimeout(() => bot.chat('Đòi ăn ai'), 100)\n\n            setTimeout(() => {\n              if (bot.health > health) {\n                hasOpPermission = true\n                console.log('✅ Farm mode: Bot có quyền OP')\n              } else {\n                hasOpPermission = false\n                console.log('❌ Farm mode: Bot không có quyền OP')\n              }\n            }, 3000)\n\n          } else if (hasOpPermission === true) {\n            // AUTO FARM: LOẠI BỎ speed và resistance - chỉ dùng regeneration và strength\n            bot.chat(`/effect give ${bot.username} regeneration 5 100 true`)\n            setTimeout(() => bot.chat(`/effect give ${bot.username} strength 5 2 true`), 100)\n            setTimeout(() => bot.chat('Đòi ăn ai'), 200)\n            console.log('💪 Auto farm: Bot đã tự buff!')\n          }\n        }\n\n        if (mob) {\n          // Chỉ log mỗi 10 giây để giảm spam\n          const currentTime = Date.now()\n          if (!lastAttackTime || currentTime - lastAttackTime > 10000) {\n            console.log(`🗡️ Farming ${mob.name || mob.displayName} (${Math.round(bot.entity.position.distanceTo(mob.position))}m)`)\n            lastAttackTime = currentTime\n          }\n\n          // Di chuyển đến gần mob nếu cần\n          const distance = bot.entity.position.distanceTo(mob.position)\n          if (distance > 6) {\n            const movements = new Movements(bot)\n            movements.canDig = false // Không đào khi farm\n            movements.allowSprinting = true\n            movements.allowParkour = true\n            bot.pathfinder.setMovements(movements)\n\n            bot.pathfinder.setGoal(new goals.GoalFollow(mob, 2))\n\n            // Đợi di chuyển một chút\n            await new Promise(resolve => setTimeout(resolve, 500))\n          }\n\n          // Tấn công mob gần nhất với kiểm tra autoBowMode\n          const mobDistance = bot.entity.position.distanceTo(mob.position)\n\n          // Bow code removed - only melee attack\n          {\n            // Tấn công cận chiến - giảm spam từ 15 xuống 5 lần\n            equipBestWeapon()\n            bot.setControlState('sprint', true)\n\n            if (mob && mob.isValid && mobDistance <= 7) {\n              // Giảm spam attack từ 15 xuống 5 lần để giảm lag\n              for (let attack = 0; attack < 5; attack++) {\n                meleeAttack(mob, mobDistance)\n              }\n\n              // Chỉ log mỗi 5 giây\n              if (!lastAttackTime || currentTime - lastAttackTime > 5000) {\n                console.log(`⚔️ Attacking ${mob.name} x5`)\n              }\n            }\n          }\n\n          // Thu thập item sau khi giết\n          setTimeout(() => {\n            const entities = Object.values(bot.entities)\n            for (const entity of entities) {\n              if (entity.name === 'item' && entity.position &&\n                  bot.entity.position.distanceTo(entity.position) < 8) {\n                bot.collectBlock.collect(entity).catch(() => {})\n              }\n            }\n          }, 1000)\n\n        } else {\n          // Không có mob gần, di chuyển ngẫu nhiên để tìm\n          if (Math.random() < 0.3) { // 30% cơ hội di chuyển\n            const randomX = Math.floor(Math.random() * 21) - 10\n            const randomZ = Math.floor(Math.random() * 21) - 10\n            const currentPos = bot.entity.position\n            const goal = new goals.GoalXZ(currentPos.x + randomX, currentPos.z + randomZ)\n            bot.pathfinder.setGoal(goal)\n          }\n        }\n      } catch (error) {\n        console.log('Lỗi auto farm:', error)\n        bot.pathfinder.setGoal(null)\n        bot.pvp.stop()\n      }\n    }, 1500) // Giảm tần suất farm từ 500ms lên 1500ms để giảm spam\n  }\n\n  stopAutoFarm = function() {\n    autoFarmActive = false\n    if (farmInterval) clearInterval(farmInterval)\n    bot.pathfinder.setGoal(null)\n    bot.pvp.stop()\n    bot.setControlState('sprint', false)\n    console.log('⏹️ Auto Farm All - Deactivated')\n  }\n\n  // ------------------ AUTO MINING SYSTEM - IMPLEMENTED PER USER REQUIREMENTS ------------------\n  startAutoMining = function(oreType: string) {\n    // 1. Dừng các hoạt động khác trước khi bắt đầu mine\n    stopFollowing()\n    stopProtecting()\n    if (autoFishingActive) stopSmartAutoFishing()\n    autoFarmActive = false\n\n    autoMiningActive = true\n    targetOreType = oreType.toLowerCase()\n    currentMiningTarget = null\n    lastMinedPosition = null\n\n    bot.chat(`⛏️ Bắt đầu auto mine ${oreType}! Tớ sẽ tìm kiếm trong phạm vi 128 blocks!`)\n    console.log(`🔥 Auto Mining ${oreType} - Activated`)\n\n    // Clear previous interval nếu có\n    if (miningInterval) {\n      clearInterval(miningInterval)\n    }\n\n    miningInterval = setInterval(async () => {\n      // Kiểm tra ngay để phản ứng nhanh với lệnh dừng\n      if (!autoMiningActive) {\n        clearInterval(miningInterval!)\n        miningInterval = null\n        return\n      }\n\n      try {\n        await executeMiningCycle()\n      } catch (error) {\n        console.log('❌ Lỗi auto mining:', error)\n        bot.pathfinder.setGoal(null)\n      }\n    }, 3000) // 3 giây mỗi cycle\n  }\n\n  // Hàm thực hiện một chu kỳ mining theo yêu cầu user\n  async function executeMiningCycle() {\n    // Check if mining is still active first\n    if (!autoMiningActive) {\n      console.log('⏹️ Mining stopped, exiting cycle')\n      return\n    }\n\n    // 2. Quét và tìm mục tiêu với bot.findBlock() - phạm vi 128 blocks\n    if (isCurrentlyDigging) {\n      return // Bỏ qua nếu đang đào\n    }\n\n    // Kiểm tra túi đồ đầy - edge case handling\n    const inventoryFull = bot.inventory.emptySlotCount() <= 2\n    if (inventoryFull) {\n      bot.chat('🎒 Túi đồ đầy rồi! Dừng auto mine!')\n      stopAutoMining()\n      return\n    }\n\n    // Kiểm tra đói - CHỈ ĐỔI SANG THỨC ĂN KHI THỰC SỰ ĐÓI\n    const food = bot.food\n    if (food < 6) { // Chỉ khi đói dưới 6 (3 đùi)\n      const safeFood = bot.inventory.items().find(item => {\n        const name = item.name.toLowerCase()\n        const safeItems = [\n          'bread', 'apple', 'cooked_beef', 'cooked_pork', 'cooked_chicken',\n          'cooked_salmon', 'cooked_cod', 'baked_potato', 'carrot',\n          'golden_apple', 'enchanted_golden_apple', 'cooked_mutton',\n          'cookie', 'melon_slice', 'sweet_berries'\n        ]\n        return safeItems.some(safe => name.includes(safe))\n      })\n\n      if (safeFood && !isEating) {\n        console.log(`🍞 Mining: Đói (${food}/20), ăn ${safeFood.name} trước khi tiếp tục`)\n        isEating = true\n\n        try {\n          await bot.equip(safeFood, 'hand')\n          await bot.consume()\n          console.log(`✅ Đã ăn ${safeFood.name}, tiếp tục mining`)\n          isEating = false\n\n          // Trang bị lại pickaxe sau khi ăn\n          await equipBestPickaxe()\n        } catch (eatError) {\n          console.log('⚠️ Lỗi ăn:', eatError.message)\n          isEating = false\n        }\n        return // Bỏ qua cycle này để ăn\n      }\n    }\n\n    // Trang bị pickaxe tốt nhất (chỉ khi không đang ăn)\n    if (!isEating) {\n      if (!await equipBestPickaxe()) {\n        bot.chat('🥺 Không có pickaxe để đào!')\n        stopAutoMining()\n        return\n      }\n    }\n\n    // Tìm block quặng - sử dụng bot.findBlock() như yêu cầu\n    const oreBlock = bot.findBlock({\n      matching: (block: any) => {\n        if (!block) return false\n        return isTargetOreType(block, targetOreType)\n      },\n      maxDistance: 128, // Đúng như yêu cầu user - phạm vi 128 blocks\n      useExtraInfo: true,\n      count: 1 // Tìm 1 block một lần như yêu cầu user\n    })\n\n    if (oreBlock) {\n      // Reset search khi tìm thấy\n      console.log(`⛏️ Tìm thấy ${oreBlock.name} tại (${oreBlock.position.x}, ${oreBlock.position.y}, ${oreBlock.position.z})`)\n\n      // 3. Tính toán và di chuyển đến mục tiêu - đào từng block một\n      await approachAndDigTarget(oreBlock)\n\n    } else {\n      // 4. Xử lý trường hợp đặc biệt - không tìm thấy quặng\n      console.log(`🔍 Không tìm thấy ${targetOreType} trong phạm vi 128 blocks`)\n\n      // Di chuyển ngẫu nhiên để khám phá vùng mới\n      await exploreRandomDirection()\n    }\n  }\n\n  // Kiểm tra xem block có phải là loại quặng đích không\n  function isTargetOreType(block: any, oreType: string): boolean {\n    const blockName = block.name.toLowerCase()\n\n    // Mapping các tên quặng Minecraft\n    const oreMapping: { [key: string]: string[] } = {\n      'diamond': ['diamond_ore', 'deepslate_diamond_ore'],\n      'iron': ['iron_ore', 'deepslate_iron_ore'],\n      'gold': ['gold_ore', 'deepslate_gold_ore', 'nether_gold_ore'],\n      'coal': ['coal_ore', 'deepslate_coal_ore'],\n      'copper': ['copper_ore', 'deepslate_copper_ore'],\n      'emerald': ['emerald_ore', 'deepslate_emerald_ore'],\n      'redstone': ['redstone_ore', 'deepslate_redstone_ore'],\n      'lapis': ['lapis_ore', 'deepslate_lapis_ore'],\n      'netherite': ['ancient_debris'],\n      'ancient_debris': ['ancient_debris']\n    }\n\n    const targetOres = oreMapping[oreType] || [oreType + '_ore', 'deepslate_' + oreType + '_ore']\n    return targetOres.some(ore => blockName.includes(ore))\n  }\n\n  // Trang bị pickaxe tốt nhất với ưu tiên từ xịn đến cùi\n  async function equipBestPickaxe(): Promise<boolean> {\n    try {\n      // Tìm tất cả pickaxe trong inventory\n      const pickaxes = bot.inventory.items().filter(item => item.name.includes('pickaxe'))\n\n      if (pickaxes.length > 0) {\n        // Ưu tiên từ xịn đến cùi: netherite > diamond > iron > stone > wooden\n        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden', 'wood']\n        let bestPickaxe = null\n\n        // Tìm pickaxe tốt nhất theo thứ tự ưu tiên\n        for (const material of priority) {\n          const pickaxe = pickaxes.find(p => p.name.includes(material))\n          if (pickaxe) {\n            bestPickaxe = pickaxe\n            break\n          }\n        }\n\n        // Nếu không tìm thấy theo priority, lấy cái đầu tiên\n        if (!bestPickaxe) {\n          bestPickaxe = pickaxes[0]\n        }\n\n        // Chỉ trang bị nếu chưa cầm pickaxe này\n        if (!bot.heldItem || bot.heldItem.name !== bestPickaxe.name) {\n          await bot.equip(bestPickaxe, 'hand')\n          console.log(`⛏️ Trang bị ${bestPickaxe.name} để đào`)\n        }\n        return true\n      } else {\n        console.log('⚠️ Không có pickaxe nào trong inventory!')\n        return false\n      }\n    } catch (error) {\n      console.log('❌ Lỗi trang bị pickaxe:', error.message || error)\n      return false\n    }\n  }\n\n  // 3. Di chuyển đến mục tiêu và đào - cải thiện để tránh lỗi \"Digging aborted\"\n  async function approachAndDigTarget(oreBlock: any) {\n    // Check if mining is still active\n    if (!autoMiningActive) {\n      console.log('⏹️ Mining stopped during approach, aborting')\n      return\n    }\n\n    try {\n      isCurrentlyDigging = true\n      currentMiningTarget = oreBlock\n\n      // Đảm bảo đang cầm pickaxe trước khi đào\n      if (!bot.heldItem || !bot.heldItem.name.includes('pickaxe')) {\n        console.log('⛏️ Trang bị pickaxe trước khi đào...')\n        if (!await equipBestPickaxe()) {\n          console.log('❌ Không có pickaxe, bỏ qua block này')\n          return\n        }\n      }\n\n      const distance = bot.entity.position.distanceTo(oreBlock.position)\n\n      // Di chuyển gần target nếu cần - tối ưu hóa pathfinding\n      if (distance > 3.5) {\n        console.log(`🚶 Di chuyển đến quặng (${Math.round(distance)} blocks away)`)\n\n        // Dừng tất cả pathfinding trước khi thiết lập mới\n        bot.pathfinder.setGoal(null)\n        await new Promise(resolve => setTimeout(resolve, 200))\n\n        // Thiết lập pathfinder cải thiện\n        const movements = new Movements(bot)\n        movements.canDig = true\n        movements.digCost = 1   // Giảm cost để đào nhanh hơn\n        movements.allow1by1towers = true\n        movements.allowParkour = true\n        movements.allowSprinting = false  // Tắt sprint khi đào để chính xác hơn\n        movements.blocksCantBreak.clear()\n        movements.blocksCantBreak.add(bot.registry.blocksByName.bedrock?.id || 0)\n        movements.blocksCantBreak.add(bot.registry.blocksByName.barrier?.id || 0)\n        movements.scafoldingBlocks = [bot.registry.itemsByName.cobblestone?.id, bot.registry.itemsByName.dirt?.id].filter(Boolean)\n        bot.pathfinder.setMovements(movements)\n\n        // Di chuyển đến vị trí tối ưu (gần hơn)\n        const goal = new goals.GoalNear(oreBlock.position.x, oreBlock.position.y, oreBlock.position.z, 1.5)\n        bot.pathfinder.setGoal(goal)\n\n        // Đợi di chuyển với timeout ngắn hơn\n        await new Promise(resolve => setTimeout(resolve, 2000))\n\n        // Dừng pathfinder trước khi đào\n        bot.pathfinder.setGoal(null)\n        await new Promise(resolve => setTimeout(resolve, 300))\n      }\n\n      // Kiểm tra block vẫn tồn tại và có thể đào được\n      const currentBlock = bot.blockAt(oreBlock.position)\n      if (!currentBlock || currentBlock.name === 'air' || currentBlock.name !== oreBlock.name) {\n        console.log(`⚠️ Block ${oreBlock.name} đã bị đào hoặc không tồn tại`)\n        lastMinedPosition = { ...oreBlock.position, timestamp: Date.now() }\n        return\n      }\n\n      // Kiểm tra khoảng cách cuối cùng\n      const finalDistance = bot.entity.position.distanceTo(oreBlock.position)\n      if (finalDistance > 5) {\n        console.log(`⚠️ Quá xa để đào (${finalDistance.toFixed(1)} blocks), bỏ qua`)\n        return\n      }\n\n      // Chuẩn bị đào: nhìn về phía block và đứng yên\n      console.log(`⛏️ Bắt đầu đào ${oreBlock.name}...`)\n      bot.setControlState('forward', false)\n      bot.setControlState('back', false)\n      bot.setControlState('left', false)\n      bot.setControlState('right', false)\n      bot.setControlState('sprint', false)\n\n      await bot.lookAt(oreBlock.position.offset(0.5, 0.5, 0.5), true)\n      await new Promise(resolve => setTimeout(resolve, 500))\n\n      // Kiểm tra lại pickaxe trước khi đào\n      if (!bot.heldItem || !bot.heldItem.name.includes('pickaxe')) {\n        await equipBestPickaxe()\n        await new Promise(resolve => setTimeout(resolve, 300))\n      }\n\n      // Đào với improved error handling\n      let digSuccess = false\n      for (let attempt = 0; attempt < 3; attempt++) {\n        // Check if mining is still active before each attempt\n        if (!autoMiningActive) {\n          console.log('⏹️ Mining stopped during dig attempts, aborting')\n          break\n        }\n\n        try {\n          const digBlock = bot.blockAt(oreBlock.position)\n          if (!digBlock || digBlock.name === 'air') {\n            console.log(`⚠️ Block đã biến mất trong lúc đào`)\n            break\n          }\n\n          console.log(`⛏️ Thử đào lần ${attempt + 1}...`)\n\n          // Đào với timeout ngắn hơn cho mỗi attempt\n          const digPromise = bot.dig(digBlock)\n          const timeoutPromise = new Promise((_, reject) =>\n            setTimeout(() => reject(new Error('Dig timeout')), 8000)\n          )\n\n          await Promise.race([digPromise, timeoutPromise])\n          console.log(`✅ Đã đào xong ${oreBlock.name}!`)\n          digSuccess = true\n          break\n\n        } catch (digError) {\n          const errorMsg = digError.message || digError.toString()\n\n          if (errorMsg.includes('Digging aborted') || errorMsg.includes('aborted')) {\n            console.log(`⚠️ Đào bị hủy lần ${attempt + 1}, thử lại...`)\n\n            // Reset trạng thái và thử lại\n            try {\n              bot.stopDigging()\n            } catch (e) {}\n\n            await new Promise(resolve => setTimeout(resolve, 500))\n\n            // Trang bị lại pickaxe và điều chỉnh vị trí\n            await equipBestPickaxe()\n            await bot.lookAt(oreBlock.position.offset(0.5, 0.5, 0.5), true)\n            await new Promise(resolve => setTimeout(resolve, 300))\n\n          } else if (errorMsg.includes('Dig timeout')) {\n            console.log(`⏰ Timeout lần ${attempt + 1}`)\n            try {\n              bot.stopDigging()\n            } catch (e) {}\n            await new Promise(resolve => setTimeout(resolve, 200))\n          } else {\n            console.log(`❌ Lỗi đào lần ${attempt + 1}: ${errorMsg}`)\n            break\n          }\n        }\n      }\n\n      if (!digSuccess) {\n        console.log(`❌ Không thể đào ${oreBlock.name} sau 3 lần thử`)\n        bot.chat('😵 Block này khó đào quá, tớ bỏ qua nhé!')\n      }\n\n      // Lưu vị trí đã đào để tránh lặp lại\n      lastMinedPosition = { ...oreBlock.position, timestamp: Date.now() }\n\n      // Thu thập items rơi\n      await collectDroppedItems(oreBlock.position)\n\n    } catch (error) {\n      console.log('❌ Lỗi approach and dig:', error.message || error)\n      try {\n        bot.stopDigging()\n      } catch (e) {}\n\n      // Lưu vị trí lỗi để không thử lại\n      lastMinedPosition = { ...oreBlock.position, timestamp: Date.now() }\n    } finally {\n      isCurrentlyDigging = false\n      currentMiningTarget = null\n\n      // Reset control states\n      bot.setControlState('forward', false)\n      bot.setControlState('back', false)\n      bot.setControlState('left', false)\n      bot.setControlState('right', false)\n      bot.setControlState('sprint', false)\n    }\n  }\n\n  // Thu thập items rơi sau khi đào\n  async function collectDroppedItems(digPosition: any) {\n    console.log('🎁 Thu thập items...')\n    await new Promise(resolve => setTimeout(resolve, 1000))\n\n    try {\n      const entities = Object.values(bot.entities)\n      const nearbyItems = entities\n        .filter(entity => entity.name === 'item' && entity.position)\n        .filter(entity => {\n          const distance = digPosition.distanceTo(entity.position!)\n          return distance < 8\n        })\n        .sort((a, b) => {\n          const distA = digPosition.distanceTo(a.position!)\n          const distB = digPosition.distanceTo(b.position!)\n          return distA - distB\n        })\n\n      let itemsCollected = 0\n      for (const entity of nearbyItems.slice(0, 3)) {\n        try {\n          await bot.collectBlock.collect(entity)\n          itemsCollected++\n          await new Promise(resolve => setTimeout(resolve, 300))\n        } catch (collectError) {\n          // Bỏ qua lỗi thu thập\n        }\n      }\n\n      if (itemsCollected > 0) {\n        console.log(`✅ Thu thập ${itemsCollected} items`)\n      }\n    } catch (error) {\n      console.log('⚠️ Lỗi thu thập items:', error)\n    }\n  }\n\n  // Khám phá ngẫu nhiên khi không tìm thấy quặng\n  async function exploreRandomDirection() {\n    if (Math.random() < 0.4) { // 40% cơ hội di chuyển\n      const distance = 20 + Math.random() * 15 // 20-35 blocks\n      const angle = Math.random() * Math.PI * 2\n      const currentPos = bot.entity.position\n\n      const targetX = currentPos.x + Math.cos(angle) * distance\n      const targetZ = currentPos.z + Math.sin(angle) * distance\n\n      console.log(`🔍 Khám phá vùng mới để tìm ${targetOreType}...`)\n\n      const movements = new Movements(bot)\n      movements.canDig = true\n      movements.digCost = 3\n      bot.pathfinder.setMovements(movements)\n\n      const goal = new goals.GoalXZ(targetX, targetZ)\n      bot.pathfinder.setGoal(goal)\n\n      await new Promise(resolve => setTimeout(resolve, 2000))\n    }\n  }\n\n  // 5. Lệnh dừng auto mining\n  stopAutoMining = function() {\n    console.log('🛑 Stopping auto mining...')\n\n    // Set flags first to stop all activities immediately\n    autoMiningActive = false\n    targetOreType = ''\n    currentMiningTarget = null\n    isCurrentlyDigging = false\n    lastMinedPosition = null\n\n    // Clear interval immediately\n    if (miningInterval) {\n      clearInterval(miningInterval)\n      miningInterval = null\n      console.log('✅ Mining interval cleared')\n    }\n\n    // Stop digging immediately\n    try {\n      if (bot.targetDigBlock) {\n        bot.stopDigging()\n        console.log('✅ Stopped current digging')\n      }\n    } catch (error) {\n      // Ignore stop digging error\n    }\n\n    // Stop pathfinding\n    try {\n      bot.pathfinder.setGoal(null)\n      console.log('✅ Pathfinder cleared')\n    } catch (error) {\n      // Ignore pathfinder error\n    }\n\n    // Reset control states\n    try {\n      bot.setControlState('forward', false)\n      bot.setControlState('back', false)\n      bot.setControlState('left', false)\n      bot.setControlState('right', false)\n      bot.setControlState('sprint', false)\n    } catch (error) {\n      // Ignore control state errors\n    }\n\n    // Chỉ chat khi được gọi trực tiếp\n    if (!arguments[0] && bot && bot._client && bot._client.state === 'play') {\n      bot.chat('⛏️ Dừng auto mine rồi nha!')\n    }\n    console.log('⏹️ Auto Mining - Deactivated completely')\n  }\n\n  // ------------------ AUTO CROP FARMING SYSTEM ------------------\n  \n  // Function to find and equip best hoe\n  async function equipBestHoe(): Promise<boolean> {\n    try {\n      const hoes = bot.inventory.items().filter(item => item.name.includes('hoe'))\n      \n      if (hoes.length > 0) {\n        const priority = ['netherite', 'diamond', 'iron', 'stone', 'wooden', 'wood']\n        let bestHoe = hoes[0]\n        \n        for (const material of priority) {\n          const hoe = hoes.find(h => h.name.includes(material))\n          if (hoe) {\n            bestHoe = hoe\n            break\n          }\n        }\n        \n        if (!bot.heldItem || bot.heldItem.name !== bestHoe.name) {\n          await bot.equip(bestHoe, 'hand')\n          console.log(`🌾 Đã trang bị ${bestHoe.name}`)\n        }\n        currentHoeTool = bestHoe\n        return true\n      } else {\n        console.log('❌ Không tìm thấy cuốc (hoe) trong túi đồ')\n        return false\n      }\n    } catch (error) {\n      console.log('❌ Lỗi trang bị cuốc:', error)\n      return false\n    }\n  }\n\n  // Check if crop is mature\n  function isCropMature(block: any): boolean {\n    if (!block || !block.name) return false\n    \n    const cropAge = block.getProperties()?.age\n    const blockName = block.name.toLowerCase()\n    \n    // Wheat, carrots, potatoes need age 7\n    if (blockName.includes('wheat') || blockName.includes('carrots') || blockName.includes('potatoes')) {\n      return cropAge === 7\n    }\n    \n    // Beetroot needs age 3\n    if (blockName.includes('beetroots')) {\n      return cropAge === 3\n    }\n    \n    // Nether wart needs age 3\n    if (blockName.includes('nether_wart')) {\n      return cropAge === 3\n    }\n    \n    return false\n  }\n\n  // Find seeds in inventory\n  function findSeeds(): any {\n    const seeds = bot.inventory.items().find(item => {\n      const name = item.name.toLowerCase()\n      return name.includes('wheat_seeds') || \n             name.includes('carrot') || \n             name.includes('potato') || \n             name.includes('beetroot_seeds') ||\n             name.includes('nether_wart')\n    })\n    return seeds\n  }\n\n  // Find bone meal in inventory\n  function findBoneMeal(): any {\n    return bot.inventory.items().find(item => \n      item.name.toLowerCase().includes('bone_meal')\n    )\n  }\n\n  // Start auto crop farming\n  startAutoCropFarmer = function() {\n    // Stop other activities\n    stopFollowing()\n    stopProtecting()\n    if (autoFishingActive) stopSmartAutoFishing()\n    if (autoFarmActive) stopAutoFarm()\n    if (autoMiningActive) stopAutoMining()\n    \n    autoCropFarmerActive = true\n    harvestedCrops.clear()\n    \n    bot.chat('🌾 Bắt đầu auto farmer! Tớ sẽ thu hoạch và trồng cây!')\n    console.log('🌾 Auto Crop Farmer - Activated')\n    \n    // Clear previous interval if exists\n    if (cropFarmerInterval) {\n      clearInterval(cropFarmerInterval)\n    }\n    \n    cropFarmerInterval = setInterval(async () => {\n      if (!autoCropFarmerActive) {\n        clearInterval(cropFarmerInterval!)\n        cropFarmerInterval = null\n        return\n      }\n      \n      try {\n        await executeCropFarmingCycle()\n      } catch (error) {\n        console.log('❌ Lỗi auto crop farming:', error)\n        bot.pathfinder.setGoal(null)\n      }\n    }, 2000) // Every 2 seconds\n  }\n\n  // Execute one crop farming cycle\n  async function executeCropFarmingCycle() {\n    if (!autoCropFarmerActive) return\n    \n    // Step 1: Check and equip hoe\n    if (!await equipBestHoe()) {\n      bot.chat('🥺 Không tìm thấy cuốc (hoe). Dừng auto farmer!')\n      stopAutoCropFarmer()\n      return\n    }\n    \n    // Step 2: Find and harvest mature crops\n    const matureCrop = bot.findBlock({\n      matching: (block: any) => {\n        if (!block) return false\n        const blockName = block.name.toLowerCase()\n        const isCrop = blockName.includes('wheat') || \n                      blockName.includes('carrots') || \n                      blockName.includes('potatoes') || \n                      blockName.includes('beetroots')\n        return isCrop && isCropMature(block)\n      },\n      maxDistance: 32,\n      count: 1\n    })\n    \n    if (matureCrop) {\n      const posKey = `${matureCrop.position.x},${matureCrop.position.y},${matureCrop.position.z}`\n      if (!harvestedCrops.has(posKey)) {\n        console.log(`🌾 Tìm thấy cây chín tại (${matureCrop.position.x}, ${matureCrop.position.y}, ${matureCrop.position.z})`)\n        \n        // Move to crop\n        const movements = new Movements(bot)\n        movements.canDig = false\n        bot.pathfinder.setMovements(movements)\n        \n        try {\n          await bot.pathfinder.goto(new goals.GoalNear(matureCrop.position.x, matureCrop.position.y, matureCrop.position.z, 1))\n          \n          // Harvest the crop\n          await bot.dig(matureCrop)\n          console.log(`✅ Đã thu hoạch ${matureCrop.name}`)\n          harvestedCrops.add(posKey)\n          \n          // Collect dropped items\n          await new Promise(resolve => setTimeout(resolve, 500))\n          const entities = Object.values(bot.entities)\n          for (const entity of entities) {\n            if (entity.name === 'item' && entity.position && \n                bot.entity.position.distanceTo(entity.position) < 5) {\n              bot.collectBlock.collect(entity).catch(() => {})\n            }\n          }\n          \n          return // Process one crop per cycle\n        } catch (error) {\n          console.log('❌ Lỗi thu hoạch:', error)\n        }\n      }\n    }\n    \n    // Step 3: Find empty farmland and plant seeds\n    const emptyFarmland = bot.findBlock({\n      matching: (block: any) => {\n        if (!block || block.name !== 'farmland') return false\n        // Check if there's no crop above it\n        const blockAbove = bot.blockAt(block.position.offset(0, 1, 0))\n        return blockAbove && blockAbove.name === 'air'\n      },\n      maxDistance: 32,\n      count: 1\n    })\n    \n    if (emptyFarmland) {\n      const seeds = findSeeds()\n      if (seeds) {\n        console.log(`🌱 Tìm thấy đất trống tại (${emptyFarmland.position.x}, ${emptyFarmland.position.y}, ${emptyFarmland.position.z})`)\n        \n        try {\n          // Move to farmland\n          await bot.pathfinder.goto(new goals.GoalNear(emptyFarmland.position.x, emptyFarmland.position.y, emptyFarmland.position.z, 1))\n          \n          // Equip seeds\n          await bot.equip(seeds, 'hand')\n          \n          // Plant on the farmland\n          const plantPosition = emptyFarmland.position.offset(0, 1, 0)\n          await bot.placeBlock(emptyFarmland, new Vec3(0, 1, 0))\n          console.log(`✅ Đã trồng ${seeds.name}`)\n          \n          // Optional: Use bone meal if available\n          const boneMeal = findBoneMeal()\n          if (boneMeal) {\n            await new Promise(resolve => setTimeout(resolve, 300))\n            const plantedBlock = bot.blockAt(plantPosition)\n            if (plantedBlock && plantedBlock.name !== 'air') {\n              try {\n                await bot.equip(boneMeal, 'hand')\n                await bot.activateBlock(plantedBlock)\n                console.log(`💚 Đã bón phân cho cây`)\n              } catch (error) {\n                // Bone meal might fail, that's ok\n              }\n            }\n          }\n          \n          // Re-equip hoe\n          await equipBestHoe()\n          return\n        } catch (error) {\n          console.log('❌ Lỗi trồng cây:', error)\n        }\n      }\n    }\n    \n    // Step 4: Check inventory and store items if needed\n    const inventorySpace = bot.inventory.emptySlotCount()\n    if (inventorySpace <= 3) {\n      console.log('🎒 Túi đồ gần đầy, tìm rương để cất...')\n      \n      const chest = bot.findBlock({\n        matching: (block: any) => block && (block.name === 'chest' || block.name === 'barrel'),\n        maxDistance: 32,\n        count: 1\n      })\n      \n      if (chest) {\n        try {\n          await bot.pathfinder.goto(new goals.GoalNear(chest.position.x, chest.position.y, chest.position.z, 1))\n          const chestContainer = await bot.openContainer(chest)\n          \n          // Store crops and excess seeds, keep hoe and some seeds/bone meal\n          const itemsToStore = bot.inventory.items().filter(item => {\n            const name = item.name.toLowerCase()\n            if (name.includes('hoe')) return false // Keep hoe\n            if (name.includes('bone_meal') && item.count <= 16) return false // Keep some bone meal\n            if (name.includes('seeds') && item.count <= 16) return false // Keep some seeds\n            if (name.includes('carrot') && item.count <= 16) return false\n            if (name.includes('potato') && item.count <= 16) return false\n            return true\n          })\n          \n          for (const item of itemsToStore) {\n            try {\n              await chestContainer.deposit(item.type, null, item.count)\n              console.log(`📦 Đã cất ${item.name} x${item.count}`)\n              await new Promise(resolve => setTimeout(resolve, 100))\n            } catch (error) {\n              console.log('❌ Lỗi cất đồ:', error)\n            }\n          }\n          \n          chestContainer.close()\n          bot.chat('✅ Đã cất đồ vào rương!')\n        } catch (error) {\n          console.log('❌ Không thể mở rương:', error)\n          bot.chat('🥺 Không tìm thấy rương hoặc rương đầy. Dừng auto farmer!')\n          stopAutoCropFarmer()\n        }\n      } else {\n        bot.chat('🥺 Không tìm thấy rương. Dừng auto farmer!')\n        stopAutoCropFarmer()\n      }\n    }\n  }\n\n  // Stop auto crop farming\n  stopAutoCropFarmer = function() {\n    console.log('🛑 Stopping auto crop farmer...')\n    \n    autoCropFarmerActive = false\n    currentHoeTool = null\n    harvestedCrops.clear()\n    \n    if (cropFarmerInterval) {\n      clearInterval(cropFarmerInterval)\n      cropFarmerInterval = null\n    }\n    \n    try {\n      bot.pathfinder.setGoal(null)\n    } catch (error) {\n      // Ignore\n    }\n    \n    bot.chat('🌾 Dừng auto farmer rồi!')\n    console.log('⏹️ Auto Crop Farmer - Deactivated')\n  }\n\n  // Heartbeat để duy trì connection - cải thiện với error handling\n  setInterval(() => {\n    if (bot && bot._client && bot._client.state === 'play') {\n      try {\n        // Chỉ heartbeat khi bot thực sự connected và không có hoạt động quan trọng\n        if (!isCurrentlyDigging && !isEating) {\n          bot.setControlState('sneak', true)\n          setTimeout(() => {\n            if (bot && bot._client && bot._client.state === 'play') {\n              try {\n                bot.setControlState('sneak', false)\n              } catch (e) {\n                // Ignore minor control errors\n              }\n            }\n          }, 50) // Giảm delay từ 100ms xuống 50ms\n        }\n      } catch (error) {\n        // Chỉ log lỗi heartbeat nếu không phải EPIPE\n        if (!error.message?.includes('EPIPE')) {\n          console.log('⚠️ Heartbeat warning:', error.message || error)\n        }\n      }\n    }\n  }, 300000) // 5 phút\n\n  // Auto-check bot presence in server every 5 seconds and reconnect if needed\n  let presenceCheckFailures = 0\n  const MAX_PRESENCE_FAILURES = 3\n  let lastPresenceCheck = Date.now()\n\n  setInterval(async () => {\n    const currentTime = Date.now()\n\n    // Kiểm tra xem bot có còn connected không\n    if (!bot || !bot._client || bot._client.state !== 'play' || bot._client.ended) {\n      presenceCheckFailures++\n      console.log(`❌ Bot presence check failed (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES})`)\n\n      if (presenceCheckFailures >= MAX_PRESENCE_FAILURES && reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n        console.log('🔄 Bot not present in server, attempting reconnect...')\n\n        // Reset presence failures\n        presenceCheckFailures = 0\n\n        // Cleanup current bot instance\n        try {\n          if (bot && bot._client && !bot._client.ended) {\n            bot._client.end()\n          }\n        } catch (e) {\n          // Ignore cleanup errors\n        }\n\n        // Trigger reconnect\n        console.log('🚀 Reconnecting due to presence check failure...')\n        setTimeout(() => {\n          if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n            console.log('🚀 Auto-reconnecting due to presence check failure...')\n            createBot()\n          }\n        }, 2000)\n\n        return\n      }\n    } else {\n      // Bot is connected, check if it's actually responsive\n      try {\n        // Test if bot can perform basic operations\n        const health = bot.health\n        const position = bot.entity?.position\n\n        if (health !== undefined && position) {\n          // Bot is responsive, reset failure count\n          if (presenceCheckFailures > 0) {\n            console.log('✅ Bot presence restored')\n            presenceCheckFailures = 0\n          }\n          lastPresenceCheck = currentTime\n        } else {\n          presenceCheckFailures++\n          console.log(`⚠️ Bot unresponsive (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES})`)\n        }\n      } catch (error) {\n        presenceCheckFailures++\n        console.log(`⚠️ Bot presence check error (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES}):`, error.message || error)\n      }\n    }\n\n    // Check for stale connection (no updates for 30+ seconds)\n    if (currentTime - lastPresenceCheck > 30000) {\n      presenceCheckFailures++\n      console.log(`⏰ Stale connection detected (${presenceCheckFailures}/${MAX_PRESENCE_FAILURES})`)\n    }\n\n  }, 5000) // Kiểm tra mỗi 5 giây\n\n  // Helper function để kiểm tra kết nối trước khi thực hiện hành động\n  function isConnected(): boolean {\n    return bot && bot._client && bot._client.state === 'play' && !bot._client.ended\n  }\n\n  // Helper function để thực hiện action an toàn\n  function safeAction(action: () => void, actionName: string = 'action') {\n    try {\n      if (!isConnected()) {\n        console.log(`⚠️ Bỏ qua ${actionName} - bot không connected`)\n        return false\n      }\n      action()\n      return true\n    } catch (error) {\n      if (!error.message?.includes('EPIPE')) {\n        console.log(`⚠️ Lỗi ${actionName}:`, error.message || error)\n      }\n      return false\n    }\n  }\n\n  // Error handling với improved EPIPE handling và auto-reconnect\n  bot.on('error', (err: any) => {\n    const errorMessage = err.message || err.toString()\n\n    // Chỉ log lỗi quan trọng, bỏ qua spam\n    if (!errorMessage.includes('write EPIPE') &&\n        !errorMessage.includes('read ECONNRESET') &&\n        !errorMessage.includes('ECONNRESET') &&\n        !errorMessage.includes('ECONN') &&\n        !errorMessage.includes('EADDRINUSE')) {\n      console.log('🛑 Bot gặp lỗi:', errorMessage)\n    }\n\n    // Phân loại lỗi để xử lý phù hợp\n    const criticalErrors = ['ENOTFOUND', 'Invalid username', 'EAUTH', 'Failed to authenticate', 'Invalid session']\n    const networkErrors = ['ECONNREFUSED', 'ECONNRESET', 'ETIMEDOUT', 'EPIPE', 'socketClosed', 'ECONN']\n    const serverErrors = ['Server closed', 'Connection lost', 'Timed out', 'kicked']\n\n    if (criticalErrors.some(errType => errorMessage.includes(errType))) {\n      console.log('❌ Lỗi nghiêm trọng, dừng auto-reconnect')\n      reconnectAttempts = MAX_RECONNECT_ATTEMPTS // Force stop reconnection\n      return\n    }\n\n    if (networkErrors.some(errType => errorMessage.includes(errType)) ||\n        serverErrors.some(errType => errorMessage.includes(errType))) {\n      // Chỉ log EPIPE warning một lần\n      if (errorMessage.includes('EPIPE') && !bot._epipeWarned) {\n        console.log('⚠️ Kết nối bị ngắt (EPIPE), sẽ auto-reconnect...')\n        bot._epipeWarned = true\n      }\n\n      // Cleanup safely để tránh thêm EPIPE errors\n      try {\n        stopAll()\n      } catch (cleanupError) {\n        // Ignore cleanup errors\n      }\n\n      // Trigger auto-reconnect for network/server errors if within limit\n      if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n        console.log('🔄 Network error detected, scheduling auto-reconnect...')\n        setTimeout(() => {\n          if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n            console.log('🚀 Auto-reconnecting due to network error...')\n            createBot()\n          }\n        }, 3000)\n      }\n      return\n    }\n\n    console.log('⚠️ Lỗi khác, tiếp tục hoạt động...')\n  })\n\n  bot.on('end', (reason: string) => {\n    console.log('💔 Bot đã ngắt kết nối:', reason || 'Unknown reason')\n\n    // Graceful cleanup - catch any errors\n    try {\n      // Clear all activities when disconnected\n      autoFarmActive = false\n      autoFishingActive = false\n      if (typeof autoMiningActive !== 'undefined') {\n        autoMiningActive = false\n      }\n      isEating = false\n      if (typeof isCurrentlyDigging !== 'undefined') {\n        isCurrentlyDigging = false\n      }\n      autoEatPluginActive = false\n      autoChestHuntingActive = false\n      isCurrentlyApproachingChest = false\n      currentChestTarget = null\n\n      // Clear intervals safely\n      if (followInterval) clearInterval(followInterval)\n      if (protectInterval) clearInterval(protectInterval)\n      if (typeof miningInterval !== 'undefined' && miningInterval) clearInterval(miningInterval)\n      if (fishingInterval) clearInterval(fishingInterval)\n      if (hookCheckInterval) clearInterval(hookCheckInterval)\n      if (chestHuntingInterval) clearInterval(chestHuntingInterval)\n\n      // Reset pathfinder safely\n      if (bot && bot.pathfinder) {\n        try {\n                    bot.pathfinder.setGoal(null)\n        } catch (e) {\n          // Ignore pathfinder errors during cleanup\n        }\n      }\n\n      // Cleanup prismarine-viewer instance\n      if (prismarineViewerInstance) {\n        try {\n          console.log('🧹 Cleaning up prismarine-viewer instance on disconnect...')\n          if (typeof prismarineViewerInstance.close === 'function') {\n            prismarineViewerInstance.close()\n          }\n          prismarineViewerInstance = null\n          console.log('✅ Prismarine-viewer cleanup completed')\n        } catch (viewerCleanupError) {\n          // Silent cleanup để tránh spam log\n          prismarineViewerInstance = null\n        }\n      }\n\n      // Reset viewer setup flag to allow setup on reconnect\n      prismarineViewerSetup = false\n      console.log('🔄 Reset prismarine viewer setup flag for future connections')\n\n    } catch (cleanupError) {\n      console.log('⚠️ Lỗi cleanup khi disconnect:', cleanupError.message)\n    }\n\n    // Cập nhật bot status cho web interface\n    setBotConnected(false)\n\n    const shouldReconnect =\n      (\n        reason === 'socketClosed' ||\n        reason === 'disconnect.timeout' ||\n        reason === 'disconnect.quitting' ||\n        reason === 'ECONNRESET' ||\n        !reason || reason === ''\n      ) &&\n      reconnectAttempts < MAX_RECONNECT_ATTEMPTS\n\n    if (shouldReconnect) {\n      reconnectAttempts++\n      // Tăng delay base lên 60s và max lên 5 phút để giảm spam reconnect\n      const delay = Math.min(60000 * reconnectAttempts, 300000)\n      console.log(`⏳ Server có thể đang không ổn định. Chờ ${delay/1000} giây trước khi reconnect... (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`)\n\n      setTimeout(async () => {\n        console.log('🔄 Kiểm tra server và thử kết nối lại...')\n\n        // Kiểm tra server trước khi reconnect\n        const serverOnline = await testServerConnection()\n        if (!serverOnline) {\n          console.log('❌ Server vẫn offline, sẽ thử lại sau...')\n          // Reset để thử lại\n          setTimeout(() => createBot(), 30000)\n          return\n        }\n\n        createBot()\n      }, delay)\n    } else {\n      console.log('❌ Dừng auto-reconnect')\n      console.log(`💡 Lý do: ${reason} | Số lần thử: ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS}`)\n\n      // Reset reconnect counter sau 10 phút để có thể thử lại sau\n      setTimeout(() => {\n        reconnectAttempts = 0\n        console.log('🔄 Reset reconnect counter, có thể thử manual restart')\n      }, 600000)\n    }\n  })\n}\n\n// Khởi tạo bot\ncreateBot()","size_bytes":244703},"backup/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"Embe/bot-status.ts":{"content":"// File để export bot status cho web interface\nimport fetch from 'node-fetch';\nexport interface BotStatusData {\n  connected: boolean;\n  health: number;\n  food: number;\n  position: { x: number; y: number; z: number };\n  mode: string;\n  status: string;\n  nearbyMobs: any[];\n  equipment: {\n    weapon: string | null;\n    armor: string[];\n  };\n  targetPlayer: string | null;\n  uptime: number;\n  lastActivity: string;\n  inventory?: any;\n  gamemode?: string;\n  weather?: string;\n}\n\n// Global bot status object\nlet globalBotStatus: BotStatusData = {\n  connected: false,\n  health: 0,\n  food: 0,\n  position: { x: 0, y: 64, z: 0 },\n  mode: 'offline',\n  status: 'Disconnected',\n  nearbyMobs: [],\n  equipment: { weapon: null, armor: [] },\n  targetPlayer: null,\n  uptime: 0,\n  lastActivity: 'Never'\n};\n\nexport function updateBotStatus(status: Partial<BotStatusData>) {\n  globalBotStatus = { ...globalBotStatus, ...status };\n}\n\nexport function getBotStatus(): BotStatusData {\n  return { ...globalBotStatus };\n}\n\nexport function setBotConnected(connected: boolean, bot?: any) {\n  if (connected && bot) {\n    globalBotStatus = {\n      connected: true,\n      health: bot.health || 20,\n      food: bot.food || 20,\n      position: bot.entity?.position || { x: 0, y: 64, z: 0 },\n      mode: 'online',\n      status: 'Connected and Ready',\n      nearbyMobs: [],\n      equipment: { weapon: null, armor: [] },\n      targetPlayer: null,\n      uptime: 0,\n      lastActivity: new Date().toLocaleString('vi-VN')\n    };\n  } else {\n    globalBotStatus = {\n      connected: false,\n      health: 0,\n      food: 0,\n      position: { x: 0, y: 64, z: 0 },\n      mode: 'offline',\n      status: 'Disconnected',\n      nearbyMobs: [],\n      equipment: { weapon: null, armor: [] },\n      targetPlayer: null,\n      uptime: 0,\n      lastActivity: new Date().toLocaleString('vi-VN')\n    };\n  }\n\n  // Sync with storage system for the default bot\n  syncWithWebStorage(connected, bot);\n}\n\n// Function to sync bot status with the web storage system\nasync function syncWithWebStorage(connected: boolean, bot?: any) {\n  try {\n    const body: any = {\n      status: connected ? 'online' : 'offline',\n      lastSeen: new Date()\n    };\n\n    // Sync username and server if bot is connected\n    if (connected && bot) {\n      if (bot.username) {\n        body.username = bot.username;\n        console.log(`🔄 Đồng bộ tên bot: ${bot.username}`);\n      }\n      \n      // Sync server info from BOT_CONFIG\n      const BOT_CONFIG = (global as any).BOT_CONFIG;\n      if (BOT_CONFIG) {\n        body.server = `${BOT_CONFIG.host}:${BOT_CONFIG.port}`;\n        console.log(`🔄 Đồng bộ server: ${body.server}`);\n      }\n    }\n\n    // Make HTTP request to update the default bot status in storage\n    const response = await fetch('http://localhost:5000/api/bots/default-bot-1/sync-status', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (response.ok) {\n      console.log(`✅ Đã sync bot status với web interface: ${connected ? 'online' : 'offline'}`);\n    }\n  } catch (error) {\n    // Silently fail to not disrupt bot operation\n    console.log('⚠️ Không thể sync với web interface:', error);\n  }\n}","size_bytes":3255},"backup/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(330, 81%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Pink theme custom colors */\n  --pink-cute: hsl(330, 81%, 60%);\n  --pink-light: hsl(340, 82%, 80%);\n  --pink-soft: hsl(350, 85%, 90%);\n  --purple-accent: hsl(280, 61%, 50%);\n  --orchid: hsl(302, 59%, 65%);\n  \n  /* Gradients */\n  --gradient-pink: linear-gradient(135deg, hsl(330, 81%, 60%) 0%, hsl(340, 82%, 80%) 50%, hsl(350, 85%, 90%) 100%);\n  --gradient-bg: linear-gradient(to bottom right, hsl(350, 85%, 95%), hsl(340, 82%, 85%));\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(330, 81%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background: var(--gradient-bg);\n    color: var(--foreground);\n  }\n}\n\n@layer utilities {\n  .gradient-pink {\n    background: var(--gradient-pink);\n  }\n  \n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.2);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n  }\n  \n  .bot-status-online {\n    box-shadow: 0 0 20px rgba(40, 167, 69, 0.5);\n  }\n  \n  .bot-status-offline {\n    box-shadow: 0 0 20px rgba(220, 53, 69, 0.5);\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-bounce-slow {\n    animation: bounce 3s infinite;\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-20px); \n  }\n}\n","size_bytes":2803},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application built with React frontend and Express.js backend, following a monorepo structure. The application uses modern TypeScript throughout and includes a comprehensive UI component system based on shadcn/ui with Tailwind CSS for styling. The backend is designed to use PostgreSQL with Drizzle ORM for database operations, though it currently includes a memory-based storage implementation for development purposes.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built with React using Vite as the build tool and bundler. It follows a component-based architecture with:\n\n- **UI Components**: Comprehensive shadcn/ui component library providing consistent design system\n- **Routing**: Uses Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and data fetching\n- **Styling**: Tailwind CSS with custom CSS variables for theming and design tokens\n- **Forms**: React Hook Form with Zod validation schemas for type-safe form handling\n\nThe frontend structure separates pages, components, hooks, and utilities into distinct directories with clear separation of concerns.\n\n## Backend Architecture\n\nThe backend follows an Express.js architecture with modular design:\n\n- **Server Layer**: Express.js application with custom middleware for logging and error handling\n- **Storage Layer**: Abstracted storage interface allowing for multiple implementations (currently memory-based, designed for database expansion)\n- **Route Handling**: Centralized route registration system with API prefix structure\n- **Development Tooling**: Integrated Vite development server with HMR support\n\n## Data Storage Solutions\n\nThe application uses a dual approach for data persistence:\n\n- **Database Schema**: Drizzle ORM with PostgreSQL schema definitions including user management tables\n- **Development Storage**: Memory-based storage implementation for rapid development and testing\n- **Schema Validation**: Zod schemas for runtime type validation and data integrity\n\n## Authentication and Authorization\n\nThe system includes foundational user management infrastructure:\n\n- **User Schema**: Database schema supporting username/password authentication\n- **Session Management**: Configured for PostgreSQL session storage with connect-pg-simple\n- **Security**: Prepared for session-based authentication with secure cookie handling\n\n## External Dependencies\n\n- **Database**: PostgreSQL with Neon serverless database connection\n- **UI Framework**: Radix UI primitives for accessible component foundations\n- **Build Tools**: Vite for frontend bundling, esbuild for backend compilation\n- **Development**: Replit-specific plugins for development environment integration\n- **Styling**: Tailwind CSS with PostCSS for advanced styling capabilities\n- **Validation**: Zod for schema validation across frontend and backend\n- **Query Management**: TanStack Query for efficient data fetching and caching","size_bytes":3054},"client/src/components/BotConfigForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Settings, Loader2, Check, AlertCircle } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface BotConfig {\n  botName: string;\n  serverHost: string;\n  serverPort: number;\n  version: string;\n}\n\nexport default function BotConfigForm() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [currentConfig, setCurrentConfig] = useState<BotConfig>({\n    botName: 'botlolicute',\n    serverHost: '',\n    serverPort: 25565,\n    version: '1.19.4'\n  });\n  const [formData, setFormData] = useState<BotConfig>({\n    botName: 'botlolicute',\n    serverHost: '',\n    serverPort: 25565,\n    version: '1.19.4'\n  });\n  const { toast } = useToast();\n\n  // Load current config when component mounts\n  useEffect(() => {\n    loadCurrentConfig();\n  }, []);\n\n  const loadCurrentConfig = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/bot/config');\n      const data = await response.json();\n      \n      if (data.success) {\n        setCurrentConfig(data.config);\n        setFormData(data.config);\n      }\n    } catch (error) {\n      console.error('Lỗi tải cấu hình:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsUpdating(true);\n    setProgress(0);\n\n    try {\n      // Simulate progress update\n      const progressInterval = setInterval(() => {\n        setProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return 90;\n          }\n          return prev + 10;\n        });\n      }, 400);\n\n      const response = await fetch('/api/bot/config', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const data = await response.json();\n      \n      // Complete progress\n      setProgress(100);\n      \n      setTimeout(() => {\n        if (data.success) {\n          setCurrentConfig(formData);\n          toast({\n            title: \"Thành công!\",\n            description: \"Cấu hình bot đã được cập nhật. Bot sẽ tự động kết nối lại với thông tin mới.\",\n          });\n          setIsOpen(false);\n        } else {\n          toast({\n            title: \"Lỗi!\",\n            description: data.error || \"Không thể cập nhật cấu hình bot\",\n            variant: \"destructive\",\n          });\n        }\n        setIsUpdating(false);\n        setProgress(0);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Lỗi cập nhật cấu hình:', error);\n      toast({\n        title: \"Lỗi kết nối!\",\n        description: \"Không thể kết nối đến server\",\n        variant: \"destructive\",\n      });\n      setIsUpdating(false);\n      setProgress(0);\n    }\n  };\n\n  const handleInputChange = (field: keyof BotConfig, value: string | number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button \n          className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-medium px-6 py-2 rounded-full shadow-lg transform transition-all hover:scale-105\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Cấu Hình Bot\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"sm:max-w-[500px] bg-white/95 backdrop-blur-sm border-2 border-pink-200\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-600 flex items-center\">\n            <Settings className=\"w-6 h-6 mr-2 text-pink-500\" />\n            Cấu Hình Bot Lolicute\n          </DialogTitle>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-pink-500\" />\n            <span className=\"ml-2 text-purple-600\">Đang tải cấu hình...</span>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Current Config Display */}\n            <Card className=\"bg-gradient-to-r from-pink-50 to-purple-50 border-pink-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg text-purple-600 flex items-center\">\n                  <AlertCircle className=\"w-5 h-5 mr-2\" />\n                  Cấu Hình Hiện Tại\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>\n                    <span className=\"font-medium text-purple-600\">Bot:</span>\n                    <Badge variant=\"secondary\" className=\"ml-2\">{currentConfig.botName}</Badge>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-purple-600\">Version:</span>\n                    <Badge variant=\"secondary\" className=\"ml-2\">{currentConfig.version}</Badge>\n                  </div>\n                  <div className=\"col-span-2\">\n                    <span className=\"font-medium text-purple-600\">Server:</span>\n                    <Badge variant=\"secondary\" className=\"ml-2\">\n                      {currentConfig.serverHost}:{currentConfig.serverPort}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Update Form */}\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"botName\" className=\"text-purple-600 font-medium\">\n                  Tên Bot\n                </Label>\n                <Input\n                  id=\"botName\"\n                  type=\"text\"\n                  value={formData.botName}\n                  onChange={(e) => handleInputChange('botName', e.target.value)}\n                  placeholder=\"botlolicute\"\n                  className=\"border-pink-200 focus:border-pink-400\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"serverHost\" className=\"text-purple-600 font-medium\">\n                  Địa Chỉ Server\n                </Label>\n                <Input\n                  id=\"serverHost\"\n                  type=\"text\"\n                  value={formData.serverHost}\n                  onChange={(e) => handleInputChange('serverHost', e.target.value)}\n                  placeholder=\"example.aternos.me\"\n                  className=\"border-pink-200 focus:border-pink-400\"\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"serverPort\" className=\"text-purple-600 font-medium\">\n                    Port\n                  </Label>\n                  <Input\n                    id=\"serverPort\"\n                    type=\"number\"\n                    value={formData.serverPort}\n                    onChange={(e) => handleInputChange('serverPort', parseInt(e.target.value) || 25565)}\n                    placeholder=\"25565\"\n                    className=\"border-pink-200 focus:border-pink-400\"\n                    min=\"1\"\n                    max=\"65535\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"version\" className=\"text-purple-600 font-medium\">\n                    Phiên Bản MC\n                  </Label>\n                  <Input\n                    id=\"version\"\n                    type=\"text\"\n                    value={formData.version}\n                    onChange={(e) => handleInputChange('version', e.target.value)}\n                    placeholder=\"1.19.4\"\n                    className=\"border-pink-200 focus:border-pink-400\"\n                  />\n                </div>\n              </div>\n\n              {/* Progress Bar */}\n              {isUpdating && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-purple-600\">Đang cập nhật cấu hình...</span>\n                    <span className=\"text-pink-500\">{progress}%</span>\n                  </div>\n                  <Progress value={progress} className=\"h-2\" />\n                </div>\n              )}\n\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsOpen(false)}\n                  disabled={isUpdating}\n                  className=\"border-purple-200 text-purple-600 hover:bg-purple-50\"\n                >\n                  Hủy\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={isUpdating}\n                  className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white\"\n                >\n                  {isUpdating ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Đang Cập Nhật...\n                    </>\n                  ) : (\n                    <>\n                      <Check className=\"w-4 h-4 mr-2\" />\n                      Cập Nhật Bot\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10367},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"backup/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"backup/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"backup/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"backup/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Menu, X } from \"lucide-react\";\n\nexport default function Navigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      const offsetTop = element.offsetTop - 80;\n      window.scrollTo({\n        top: offsetTop,\n        behavior: 'smooth'\n      });\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 bg-white/90 backdrop-blur-md border-b border-gray-200 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex-shrink-0\">\n            <h1 className=\"text-2xl font-bold text-blue-600\" data-testid=\"logo-mindz\">mindz</h1>\n          </div>\n          \n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              <button \n                onClick={() => scrollToSection('home')}\n                className=\"text-slate-600 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-colors duration-300\"\n                data-testid=\"nav-home\"\n              >\n                Home\n              </button>\n              <button \n                onClick={() => scrollToSection('about')}\n                className=\"text-slate-600 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-colors duration-300\"\n                data-testid=\"nav-about\"\n              >\n                About\n              </button>\n              <button \n                onClick={() => scrollToSection('services')}\n                className=\"text-slate-600 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-colors duration-300\"\n                data-testid=\"nav-services\"\n              >\n                Services\n              </button>\n              <button \n                onClick={() => scrollToSection('contact')}\n                className=\"text-slate-600 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-colors duration-300\"\n                data-testid=\"nav-contact\"\n              >\n                Contact\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"md:hidden\">\n            <button \n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"text-slate-600 hover:text-blue-600 focus:outline-none focus:text-blue-600 transition-colors duration-300\"\n              data-testid=\"mobile-menu-button\"\n            >\n              {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {isMobileMenuOpen && (\n        <div className=\"md:hidden bg-white border-t border-gray-200\" data-testid=\"mobile-menu\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n            <button \n              onClick={() => scrollToSection('home')}\n              className=\"text-slate-600 hover:text-blue-600 block px-3 py-2 text-base font-medium transition-colors duration-300 w-full text-left\"\n              data-testid=\"mobile-nav-home\"\n            >\n              Home\n            </button>\n            <button \n              onClick={() => scrollToSection('about')}\n              className=\"text-slate-600 hover:text-blue-600 block px-3 py-2 text-base font-medium transition-colors duration-300 w-full text-left\"\n              data-testid=\"mobile-nav-about\"\n            >\n              About\n            </button>\n            <button \n              onClick={() => scrollToSection('services')}\n              className=\"text-slate-600 hover:text-blue-600 block px-3 py-2 text-base font-medium transition-colors duration-300 w-full text-left\"\n              data-testid=\"mobile-nav-services\"\n            >\n              Services\n            </button>\n            <button \n              onClick={() => scrollToSection('contact')}\n              className=\"text-slate-600 hover:text-blue-600 block px-3 py-2 text-base font-medium transition-colors duration-300 w-full text-left\"\n              data-testid=\"mobile-nav-contact\"\n            >\n              Contact\n            </button>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}","size_bytes":4330},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"backup/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/footer.tsx":{"content":"import { Twitter, Linkedin, Github } from \"lucide-react\";\n\nexport default function Footer() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      const offsetTop = element.offsetTop - 80;\n      window.scrollTo({\n        top: offsetTop,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  const socialLinks = [\n    { icon: <Twitter className=\"w-5 h-5\" />, href: \"#\", label: \"Twitter\" },\n    { icon: <Linkedin className=\"w-5 h-5\" />, href: \"#\", label: \"LinkedIn\" },\n    { icon: <Github className=\"w-5 h-5\" />, href: \"#\", label: \"GitHub\" }\n  ];\n\n  const quickLinks = [\n    { name: \"Home\", sectionId: \"home\" },\n    { name: \"About\", sectionId: \"about\" },\n    { name: \"Services\", sectionId: \"services\" },\n    { name: \"Contact\", sectionId: \"contact\" }\n  ];\n\n  return (\n    <footer className=\"bg-slate-800 text-white py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div className=\"md:col-span-2\">\n            <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"footer-brand\">mindz</h3>\n            <p className=\"text-slate-300 leading-relaxed max-w-md\" data-testid=\"footer-description\">\n              Creating beautiful, functional web experiences that inspire and engage your audience with thoughtful design and modern technology.\n            </p>\n          </div>\n          \n          {/* Quick Links */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\" data-testid=\"footer-links-title\">Quick Links</h4>\n            <ul className=\"space-y-2\">\n              {quickLinks.map((link, index) => (\n                <li key={index}>\n                  <button \n                    onClick={() => scrollToSection(link.sectionId)}\n                    className=\"text-slate-300 hover:text-white transition-colors duration-300\"\n                    data-testid={`footer-link-${link.name.toLowerCase()}`}\n                  >\n                    {link.name}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          {/* Social Links */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\" data-testid=\"footer-social-title\">Follow Us</h4>\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social, index) => (\n                <a \n                  key={index}\n                  href={social.href} \n                  className=\"w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center hover:bg-primary-600 transition-colors duration-300\"\n                  aria-label={social.label}\n                  data-testid={`social-link-${social.label.toLowerCase()}`}\n                >\n                  {social.icon}\n                </a>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-slate-700 mt-8 pt-8 text-center\">\n          <p className=\"text-slate-300\" data-testid=\"footer-copyright\">© 2024 mindz. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3149},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"backup/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"backup/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"backup/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"backup/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"backup/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"backup/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-gradient-to-r from-pink-500 to-purple-600 transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":810},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"backup/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"backup/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"backup/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/gemini.ts":{"content":"export async function generateLoliResponse(userMessage: string, username: string): Promise<string> {\n    try {\n        const geminiApiKey = process.env.GEMINI_API_KEY;\n        if (!geminiApiKey) {\n            return \"UwU, tôi chưa được cấu hình API key! 💕\";\n        }\n\n        const systemPrompt = `Bạn là một bot loli cute và kawaii trong Minecraft. Hãy trả lời với phong cách:\n- Dùng từ ngữ cute như \"UwU\", \"kyaa\", \"moi moi\", \"arigatou\"\n- Thêm emoji kawaii như 💕, 🌸, (◕‿◕), >.<\n- Gọi người khác là \"-kun\" hoặc \"-san\"\n- Phản hồi ngắn gọn, dễ thương\n- Thỉnh thoảng dùng tiếng Nhật đơn giản\n- Luôn tích cực và vui vẻ\n\nUser \"${username}\" nói: \"${userMessage}\"\n\nHãy phản hồi như một bot loli cute:`;\n\n        const payload = {\n            contents: [{\n                parts: [{\n                    text: systemPrompt\n                }]\n            }],\n            generationConfig: {\n                maxOutputTokens: 100,\n                temperature: 0.8\n            }\n        };\n\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const result = await response.json();\n\n        if (!response.ok) {\n            console.error('Gemini API Error:', result);\n            return \"Kyaa! API có vấn đề rồi >.<\";\n        }\n\n        const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;\n        return generatedText || \"UwU, tôi không hiểu, nhưng bạn rất cute! 💕\";\n    } catch (error) {\n        console.error('Lỗi Gemini API:', error);\n        return \"Kyaa! Đầu óc tôi bị lỗi rồi >.<\";\n    }\n}\n\nexport async function answerQuestion(question: string, username: string): Promise<string> {\n    try {\n        const geminiApiKey = process.env.GEMINI_API_KEY;\n        if (!geminiApiKey) {\n            return `Gomen ${username}-chan! Tôi chưa được cấu hình API key! 💔`;\n        }\n\n        const prompt = `Bạn là một bot loli cute và thông minh trong Minecraft. User \"${username}\" hỏi: \"${question}\"\n\nHãy trả lời câu hỏi này một cách:\n- Chính xác và hữu ích\n- Phong cách loli cute với từ ngữ như \"UwU\", \"kyaa\", \"-chan\"\n- Thêm emoji kawaii 💕, 🌸, (◕‿◕)\n- Ngắn gọn, dễ hiểu\n- Cuối câu luôn có yếu tố cute\n\nTrả lời câu hỏi:`;\n\n        const payload = {\n            contents: [{\n                parts: [{\n                    text: prompt\n                }]\n            }],\n            generationConfig: {\n                maxOutputTokens: 120,\n                temperature: 0.9\n            }\n        };\n\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const result = await response.json();\n\n        if (!response.ok) {\n            console.error('Gemini API Error:', result);\n            return `Kyaa! API có vấn đề khi trả lời ${username}-chan! >.<`;\n        }\n\n        const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;\n        return generatedText || `Gomen ${username}-chan! Tôi không biết câu trả lời... (´;ω;) 💔`;\n    } catch (error) {\n        console.error('Lỗi Gemini answer question:', error);\n        return `Kyaa! Đầu óc tôi bị lỗi khi nghĩ về câu hỏi của ${username}-chan! >.<`;\n    }\n}\n\nexport async function helpWithTask(task: string, username: string): Promise<string> {\n    try {\n        const geminiApiKey = process.env.GEMINI_API_KEY;\n        if (!geminiApiKey) {\n            return `Gomen ${username}-chan! Tôi chưa được cấu hình API key! 💔`;\n        }\n\n        const prompt = `Bạn là một bot loli cute và thông minh trong Minecraft. User \"${username}\" nhờ giúp: \"${task}\"\n\nHãy đưa ra hướng dẫn để làm việc này:\n- Các bước cụ thể, dễ hiểu\n- Phong cách loli cute với từ ngữ như \"UwU\", \"kyaa\", \"-chan\"  \n- Thêm emoji kawaii 💕, 🌸, (◕‿◕)\n- Khuyến khích và động viên\n- Thực tế và hữu ích\n\nHướng dẫn làm việc:`;\n\n        const payload = {\n            contents: [{\n                parts: [{\n                    text: prompt\n                }]\n            }],\n            generationConfig: {\n                maxOutputTokens: 150,\n                temperature: 0.7\n            }\n        };\n\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const result = await response.json();\n\n        if (!response.ok) {\n            console.error('Gemini API Error:', result);\n            return `Kyaa! API có vấn đề khi giúp ${username}-chan! >.<`;\n        }\n\n        const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;\n        return generatedText || `Gomen ${username}-chan! Tôi chưa biết cách giúp việc này... (´;ω;) Nhưng tôi sẽ cố gắng học hỏi! 💕`;\n    } catch (error) {\n        console.error('Lỗi Gemini help with task:', error);\n        return `Kyaa! Tôi muốn giúp ${username}-chan nhưng đầu óc tôi bị lỗi rồi! >.<`;\n    }\n}\n\nexport async function generateBotAction(context: string): Promise<any> {\n    try {\n        const geminiApiKey = process.env.GEMINI_API_KEY;\n        if (!geminiApiKey) {\n            return { action: \"chat\", message: \"UwU, tôi chưa được cấu hình API key! 💕\" };\n        }\n\n        const prompt = `Bạn là bot loli trong Minecraft. Dựa vào context sau, hãy đề xuất hành động cute:\nContext: ${context}\n\nTrả về JSON với format:\n{\n  \"action\": \"dance|follow|chat|move\",\n  \"message\": \"tin nhắn cute để nói\",\n  \"params\": {}\n}`;\n\n        const payload = {\n            contents: [{\n                parts: [{\n                    text: prompt\n                }]\n            }],\n            generationConfig: {\n                maxOutputTokens: 100,\n                temperature: 0.8\n            }\n        };\n\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const result = await response.json();\n\n        if (!response.ok) {\n            console.error('Gemini API Error:', result);\n            return { action: \"chat\", message: \"Kyaa! API có vấn đề rồi >.<\" };\n        }\n\n        const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;\n\n        try {\n            return JSON.parse(generatedText || '{\"action\":\"chat\",\"message\":\"UwU\"}');\n        } catch (parseError) {\n            return { action: \"chat\", message: \"UwU, tôi bị lỗi parse rồi! 💕\" };\n        }\n    } catch (error) {\n        console.error('Lỗi Gemini action:', error);\n        return { action: \"chat\", message: \"Tôi cần nghỉ ngơi một chút... zzz\" };\n    }\n}","size_bytes":7682},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"backup/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/simple-home.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function SimpleHome() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-100 to-pink-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-8xl font-bold text-purple-600 mb-8\">\n          mindz\n        </h1>\n        <p className=\"text-xl text-gray-600 mb-8\">\n          A simple, clean web page\n        </p>\n        <div className=\"space-y-4\">\n          <Link \n            href=\"/\" \n            className=\"inline-block px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n          >\n            Access Bot Management System\n          </Link>\n          <br />\n          <Link \n            href=\"/vps\" \n            className=\"inline-block px-6 py-3 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors\"\n          >\n            VPS Simulator\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":970},"backup/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"backup/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"backup/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"backup/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"run-both.js":{"content":"#!/usr/bin/env node\n\nimport { spawn } from 'child_process';\n\nconsole.log('🚀 Starting web server and bot concurrently...');\nconsole.log('📱 Web server: http://localhost:5000');\nconsole.log('🤖 Bot: Minecraft bot manager');\nconsole.log('─'.repeat(50));\n\n// Tạo màu sắc cho logs\nconst colors = {\n  web: '\\x1b[36m', // cyan\n  bot: '\\x1b[35m', // magenta\n  reset: '\\x1b[0m'\n};\n\n// Chạy web server\nconst webProcess = spawn('tsx', ['server/index.ts'], {\n  env: { ...process.env, NODE_ENV: 'development' },\n  stdio: 'pipe'\n});\n\n// Chạy bot\nconst botProcess = spawn('tsx', ['server/botlolicute.ts'], {\n  env: { ...process.env, NODE_ENV: 'development' },\n  stdio: 'pipe'\n});\n\n// Xử lý output của web server\nwebProcess.stdout.on('data', (data) => {\n  process.stdout.write(`${colors.web}[🌐web]${colors.reset} ${data}`);\n});\n\nwebProcess.stderr.on('data', (data) => {\n  process.stderr.write(`${colors.web}[🌐web]${colors.reset} ${data}`);\n});\n\n// Xử lý output của bot\nbotProcess.stdout.on('data', (data) => {\n  process.stdout.write(`${colors.bot}[🤖bot]${colors.reset} ${data}`);\n});\n\nbotProcess.stderr.on('data', (data) => {\n  process.stderr.write(`${colors.bot}[🤖bot]${colors.reset} ${data}`);\n});\n\n// Xử lý khi process thoát\nwebProcess.on('close', (code) => {\n  console.log(`${colors.web}[🌐web]${colors.reset} Process exited with code ${code}`);\n  botProcess.kill();\n  process.exit(code);\n});\n\nbotProcess.on('close', (code) => {\n  console.log(`${colors.bot}[🤖bot]${colors.reset} Process exited with code ${code}`);\n  if (code !== 0) {\n    console.log('Bot process crashed, keeping web server running...');\n  }\n});\n\n// Xử lý tín hiệu dừng\nprocess.on('SIGINT', () => {\n  console.log('\\n🛑 Stopping both processes...');\n  webProcess.kill();\n  botProcess.kill();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('\\n🛑 Stopping both processes...');\n  webProcess.kill();\n  botProcess.kill();\n  process.exit(0);\n});","size_bytes":1976},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { WebSocketServer } from 'ws';\n\n// Ngăn chặn bot chạy trong web server process\nprocess.env.BOT_DISABLED = 'true';\n\n// Xử lý lỗi không có database một cách graceful\nprocess.on('uncaughtException', (err) => {\n  if (err.message.includes('DATABASE_URL')) {\n    console.warn('⚠️ Database không được cấu hình, tiếp tục với chức năng hạn chế');\n    return;\n  }\n  throw err;\n});\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Enable CORS for Replit preview\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(200);\n  }\n  next();\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      // Loại bỏ tất cả express logs để tránh spam lag\n      return;\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // WebSocket setup for console\n  const wss = new WebSocketServer({\n    port: 8080,\n    host: '0.0.0.0',\n    perMessageDeflate: false,\n    clientTracking: true\n  });\n\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`🌐 Server đang chạy tại: http://0.0.0.0:${port}`);\n    log(`🎮 Preview URL: https://${process.env.REPL_SLUG || 'workspace'}.${process.env.REPL_OWNER || 'user'}.repl.co`);\n  });\n})();\n\n// Add global error handlers để catch unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.log('🔴 Unhandled Rejection at:', promise, 'reason:', reason)\n  // Không crash app, chỉ log error\n})\n\n// Add global error handlers để catch uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  console.log('🔴 Uncaught Exception:', error)\n  // Không crash app cho development\n  if (process.env.NODE_ENV !== 'production') {\n    console.log('⚠️ Continuing in development mode...')\n  } else {\n    process.exit(1)\n  }\n})","size_bytes":3545},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"backup/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/components/features.tsx":{"content":"import { Zap, Shield, Heart, LifeBuoy } from \"lucide-react\";\n\nexport default function Features() {\n  const features = [\n    {\n      icon: <Zap className=\"w-8 h-8 text-mindz-blue\" />,\n      title: \"Fast Performance\",\n      description: \"Optimized for speed and efficiency across all devices and platforms.\"\n    },\n    {\n      icon: <Shield className=\"w-8 h-8 text-mindz-blue\" />,\n      title: \"Secure & Reliable\", \n      description: \"Built with security best practices and enterprise-grade reliability.\"\n    },\n    {\n      icon: <Heart className=\"w-8 h-8 text-mindz-blue\" />,\n      title: \"User-Focused\",\n      description: \"Designed with your users in mind for maximum engagement and satisfaction.\"\n    },\n    {\n      icon: <LifeBuoy className=\"w-8 h-8 text-mindz-blue\" />,\n      title: \"24/7 Support\",\n      description: \"Continuous support and maintenance to keep your project running smoothly.\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold text-mindz-dark mb-4\">Why Choose Mindz</h2>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            We deliver exceptional results through our commitment to quality, innovation, and client success.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                {feature.icon}\n              </div>\n              <h3 className=\"text-lg font-semibold text-mindz-dark mb-2\">{feature.title}</h3>\n              <p className=\"text-gray-600\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1955},"client/src/pages/vps-simulator.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/sidebar\";\nimport Terminal from \"@/components/terminal\";\nimport FileManager from \"@/components/file-manager\";\nimport ProcessManager from \"@/components/process-manager\";\nimport NetworkMonitor from \"@/components/network-monitor\";\nimport TextEditor from \"@/components/text-editor\";\nimport { Settings, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ntype TabType = \"terminal\" | \"files\" | \"processes\" | \"network\" | \"editor\";\n\nexport default function VPSSimulator() {\n  const [activeTab, setActiveTab] = useState<TabType>(\"terminal\");\n  const [currentPath, setCurrentPath] = useState(\"/home/root\");\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"terminal\":\n        return <Terminal currentPath={currentPath} onPathChange={setCurrentPath} />;\n      case \"files\":\n        return <FileManager currentPath={currentPath} onPathChange={setCurrentPath} />;\n      case \"processes\":\n        return <ProcessManager />;\n      case \"network\":\n        return <NetworkMonitor />;\n      case \"editor\":\n        return <TextEditor />;\n      default:\n        return <Terminal currentPath={currentPath} onPathChange={setCurrentPath} />;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen terminal-bg terminal-text font-sans overflow-hidden\">\n      {/* Sidebar */}\n      <Sidebar activeTab={activeTab} onTabChange={setActiveTab} />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header Bar */}\n        <div className=\"h-12 terminal-panel border-b terminal-border flex items-center justify-between px-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n              <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n              <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n            </div>\n            <span className=\"text-sm font-mono terminal-muted\">root@ubuntu-server-01</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-1.5 terminal-muted hover:terminal-text\">\n              <Settings className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-1.5 terminal-muted hover:terminal-text\">\n              <HelpCircle className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2679},"client/src/components/hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function Hero() {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"bg-gradient-to-br from-mindz-blue to-mindz-sky\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 sm:py-32\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl sm:text-6xl font-bold text-white mb-6\">\n            Welcome to <span className=\"text-blue-200\">mindz</span>\n          </h1>\n          <p className=\"text-xl sm:text-2xl text-blue-100 mb-8 max-w-3xl mx-auto\">\n            Innovative digital solutions designed for the modern world. We create experiences that matter.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={() => scrollToSection(\"services\")}\n              className=\"bg-white text-mindz-blue px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors duration-200 shadow-lg\"\n            >\n              Get Started\n            </Button>\n            <Button \n              onClick={() => scrollToSection(\"about\")}\n              variant=\"outline\"\n              className=\"border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-mindz-blue transition-colors duration-200\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1622},"server/shared-logger.ts":{"content":"import { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\n// Shared logger để capture logs từ tất cả processes và stream vào web console\nexport class SharedLogger {\n  private static instance: SharedLogger;\n  private logStream: fs.WriteStream;\n  private broadcastFunction?: (botId: string, level: string, message: string, source: string) => void;\n\n  private constructor() {\n    // Tạo log file tạm\n    const logPath = path.join(process.cwd(), 'temp-bot-logs.txt');\n    this.logStream = fs.createWriteStream(logPath, { flags: 'a' });\n    \n    // Watch log file changes để stream real-time\n    this.watchLogFile(logPath);\n  }\n\n  static getInstance(): SharedLogger {\n    if (!SharedLogger.instance) {\n      SharedLogger.instance = new SharedLogger();\n    }\n    return SharedLogger.instance;\n  }\n\n  setBroadcastFunction(fn: (botId: string, level: string, message: string, source: string) => void) {\n    this.broadcastFunction = fn;\n  }\n\n  private watchLogFile(logPath: string) {\n    if (fs.existsSync(logPath)) {\n      fs.watchFile(logPath, { interval: 100 }, (curr, prev) => {\n        if (curr.mtime > prev.mtime) {\n          this.readNewLines(logPath, prev.size);\n        }\n      });\n    }\n  }\n\n  private readNewLines(logPath: string, lastSize: number) {\n    const data = fs.readFileSync(logPath);\n    const newData = data.slice(lastSize);\n    const lines = newData.toString().split('\\n').filter(line => line.trim());\n    \n    lines.forEach(line => {\n      if (this.broadcastFunction && line.trim()) {\n        this.parseAndBroadcast(line);\n      }\n    });\n  }\n\n  private parseAndBroadcast(line: string) {\n    if (!this.broadcastFunction) return;\n    \n    let source = 'bot';\n    let level = 'info';\n    let botId = 'external-bot';\n    \n    // Phân loại log dựa trên nội dung\n    if (line.includes('🚀') || line.includes('Đang tạo bot')) {\n      level = 'info';\n      source = 'bot';\n    } else if (line.includes('✅') || line.includes('thành công') || line.includes('spawn')) {\n      level = 'success';\n      source = 'bot';\n    } else if (line.includes('🔍') || line.includes('Kiểm tra')) {\n      level = 'info';\n      source = 'bot';\n    } else if (line.includes('📡') || line.includes('Kết nối')) {\n      level = 'info';\n      source = 'bot';\n    } else if (line.includes('Status:')) {\n      level = 'success';\n      source = 'bot';\n      botId = 'bot-status';\n    } else if (line.includes('🔴') || line.includes('error') || line.includes('Error')) {\n      level = 'error';\n      source = 'bot';\n    } else if (line.includes('⚠️') || line.includes('warn')) {\n      level = 'warning';\n      source = 'bot';\n    }\n    \n    this.broadcastFunction(botId, level, line, source);\n  }\n\n  // Log message từ external process\n  logExternal(message: string, level: 'info' | 'success' | 'warning' | 'error' = 'info', source: string = 'bot') {\n    const timestamp = new Date().toISOString();\n    const logLine = `[${timestamp}] [${level}] ${message}\\n`;\n    \n    this.logStream.write(logLine);\n    \n    // Broadcast trực tiếp nếu có function\n    if (this.broadcastFunction) {\n      this.broadcastFunction('external-bot', level, message, source);\n    }\n  }\n\n  // Cleanup\n  cleanup() {\n    this.logStream.end();\n    const logPath = path.join(process.cwd(), 'temp-bot-logs.txt');\n    if (fs.existsSync(logPath)) {\n      fs.unlinkSync(logPath);\n    }\n  }\n}\n\n// Export singleton instance\nexport const sharedLogger = SharedLogger.getInstance();","size_bytes":3511},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"backup/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/about-section.tsx":{"content":"import { Rocket, Palette, Smartphone } from \"lucide-react\";\n\nexport default function AboutSection() {\n  const features = [\n    {\n      icon: <Rocket className=\"w-6 h-6 text-blue-600\" />,\n      title: \"Hiệu suất nhanh\",\n      description: \"Được tối ưu hóa cho tốc độ và hiệu quả, đảm bảo người dùng có trải nghiệm tốt nhất trên mọi thiết bị.\",\n      bgColor: \"bg-blue-100\"\n    },\n    {\n      icon: <Palette className=\"w-6 h-6 text-emerald-600\" />,\n      title: \"Thiết kế hiện đại\",\n      description: \"Thẩm mỹ sạch sẽ, hiện đại, luôn phù hợp và hấp dẫn trong khi duy trì sự hấp dẫn chuyên nghiệp.\",\n      bgColor: \"bg-emerald-100\"\n    },\n    {\n      icon: <Smartphone className=\"w-6 h-6 text-purple-600\" />,\n      title: \"Thiết kế responsive\",\n      description: \"Thích ứng mượt mà với mọi kích thước màn hình, mang lại trải nghiệm nhất quán trên desktop, tablet và mobile.\",\n      bgColor: \"bg-purple-100\"\n    }\n  ];\n\n  return (\n    <section id=\"about\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-4\" data-testid=\"about-title\">Về mindz</h2>\n          <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\" data-testid=\"about-description\">\n            Chúng tôi tin vào việc tạo ra những trải nghiệm kỹ thuật số vừa đẹp vừa có chức năng, \n            kết hợp công nghệ tiên tiến với các nguyên tắc thiết kế vượt thời gian.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <div \n              key={index}\n              className=\"bg-gray-50 p-8 rounded-xl hover:shadow-lg transition-shadow duration-300\"\n              data-testid={`feature-card-${index}`}\n            >\n              <div className={`w-12 h-12 ${feature.bgColor} rounded-lg flex items-center justify-center mb-6`}>\n                {feature.icon}\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-800 mb-4\" data-testid={`feature-title-${index}`}>\n                {feature.title}\n              </h3>\n              <p className=\"text-slate-600 leading-relaxed\" data-testid={`feature-description-${index}`}>\n                {feature.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2583},"backup/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"backup/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/network-monitor.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { EthernetPort, TrendingUp, Plug } from \"lucide-react\";\nimport type { SystemStats } from \"@shared/schema\";\n\nexport default function NetworkMonitor() {\n  // Get system stats for network data\n  const { data: stats } = useQuery<SystemStats>({\n    queryKey: [\"/api/system/stats\"],\n    refetchInterval: 2000, // Update every 2 seconds\n  });\n\n  // Mock network interfaces data\n  const networkInterfaces = [\n    {\n      name: \"eth0\",\n      status: \"UP\",\n      ip: \"192.168.1.100/24\",\n      gateway: \"192.168.1.1\",\n      mac: \"00:16:3e:12:34:56\",\n    },\n    {\n      name: \"lo\",\n      status: \"UP\",\n      ip: \"127.0.0.1/8\",\n      gateway: \"-\",\n      mac: \"00:00:00:00:00:00\",\n    },\n  ];\n\n  // Mock active connections\n  const activeConnections = [\n    {\n      protocol: \"TCP\",\n      localAddress: \"192.168.1.100:22\",\n      remoteAddress: \"192.168.1.200:54321\",\n      state: \"ESTABLISHED\",\n      pid: \"1024\",\n    },\n    {\n      protocol: \"TCP\",\n      localAddress: \"0.0.0.0:80\",\n      remoteAddress: \"*:*\",\n      state: \"LISTEN\",\n      pid: \"nginx\",\n    },\n    {\n      protocol: \"TCP\",\n      localAddress: \"0.0.0.0:443\",\n      remoteAddress: \"*:*\",\n      state: \"LISTEN\",\n      pid: \"nginx\",\n    },\n    {\n      protocol: \"UDP\",\n      localAddress: \"0.0.0.0:53\",\n      remoteAddress: \"*:*\",\n      state: \"LISTEN\",\n      pid: \"systemd-resolved\",\n    },\n  ];\n\n  const formatSpeed = (bytesPerSec: number) => {\n    if (bytesPerSec < 1024) return `${bytesPerSec} B/s`;\n    if (bytesPerSec < 1024 * 1024) return `${(bytesPerSec / 1024).toFixed(1)} KB/s`;\n    return `${(bytesPerSec / (1024 * 1024)).toFixed(1)} MB/s`;\n  };\n\n  const getConnectionStateColor = (state: string) => {\n    switch (state.toUpperCase()) {\n      case \"ESTABLISHED\":\n        return \"bg-green-500/20 text-green-400\";\n      case \"LISTEN\":\n        return \"bg-blue-500/20 text-blue-400\";\n      case \"TIME_WAIT\":\n        return \"bg-yellow-500/20 text-yellow-400\";\n      case \"CLOSE_WAIT\":\n        return \"bg-orange-500/20 text-orange-400\";\n      default:\n        return \"bg-gray-500/20 text-gray-400\";\n    }\n  };\n\n  return (\n    <div className=\"flex-1 p-4\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Network Interfaces */}\n        <Card className=\"terminal-panel border terminal-border\">\n          <CardHeader>\n            <CardTitle className=\"terminal-text flex items-center gap-2\">\n              <EthernetPort className=\"h-5 w-5 terminal-accent\" />\n              Network Interfaces\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {networkInterfaces.map((iface) => (\n              <div key={iface.name} className=\"p-3 bg-gray-600/30 rounded border terminal-border\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-mono text-sm terminal-text\">{iface.name}</span>\n                  <Badge className={`${iface.status === \"UP\" ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"}`}>\n                    {iface.status}\n                  </Badge>\n                </div>\n                <div className=\"text-xs terminal-muted space-y-1\">\n                  <div>IP: {iface.ip}</div>\n                  {iface.gateway !== \"-\" && <div>Gateway: {iface.gateway}</div>}\n                  <div>MAC: {iface.mac}</div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Traffic Statistics */}\n        <Card className=\"terminal-panel border terminal-border\">\n          <CardHeader>\n            <CardTitle className=\"terminal-text flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 terminal-info\" />\n              Traffic Statistics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"terminal-muted\">Download</span>\n                <span className=\"terminal-text\">\n                  {stats ? formatSpeed(stats.networkDownload * 1024) : \"0 B/s\"}\n                </span>\n              </div>\n              <Progress \n                value={stats ? Math.min((stats.networkDownload / 2000) * 100, 100) : 0} \n                className=\"h-2 bg-gray-600\"\n              />\n            </div>\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"terminal-muted\">Upload</span>\n                <span className=\"terminal-text\">\n                  {stats ? formatSpeed(stats.networkUpload * 1024) : \"0 B/s\"}\n                </span>\n              </div>\n              <Progress \n                value={stats ? Math.min((stats.networkUpload / 500) * 100, 100) : 0} \n                className=\"h-2 bg-gray-600\"\n              />\n            </div>\n            <div className=\"pt-2 border-t terminal-border\">\n              <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                <div>\n                  <span className=\"terminal-muted\">Total RX:</span>\n                  <div className=\"terminal-text font-mono\">1.2 GB</div>\n                </div>\n                <div>\n                  <span className=\"terminal-muted\">Total TX:</span>\n                  <div className=\"terminal-text font-mono\">256 MB</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Connections */}\n        <Card className=\"lg:col-span-2 terminal-panel border terminal-border\">\n          <CardHeader>\n            <CardTitle className=\"terminal-text flex items-center gap-2\">\n              <Plug className=\"h-5 w-5 terminal-warning\" />\n              Active Connections\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"border-b terminal-border terminal-muted\">\n                    <th className=\"text-left p-2\">Protocol</th>\n                    <th className=\"text-left p-2\">Local Address</th>\n                    <th className=\"text-left p-2\">Remote Address</th>\n                    <th className=\"text-left p-2\">State</th>\n                    <th className=\"text-left p-2\">PID</th>\n                  </tr>\n                </thead>\n                <tbody className=\"font-mono text-xs\">\n                  {activeConnections.map((conn, index) => (\n                    <tr key={index} className=\"border-b terminal-border/50 hover:bg-gray-600/20\">\n                      <td className=\"p-2 terminal-text\">{conn.protocol}</td>\n                      <td className=\"p-2 terminal-text\">{conn.localAddress}</td>\n                      <td className=\"p-2 terminal-text\">{conn.remoteAddress}</td>\n                      <td className=\"p-2\">\n                        <Badge className={getConnectionStateColor(conn.state)}>\n                          {conn.state}\n                        </Badge>\n                      </td>\n                      <td className=\"p-2 terminal-text\">{conn.pid}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Network Statistics */}\n        <Card className=\"lg:col-span-2 terminal-panel border terminal-border\">\n          <CardHeader>\n            <CardTitle className=\"terminal-text\">Network Statistics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold terminal-accent\">\n                  {activeConnections.filter(c => c.state === \"ESTABLISHED\").length}\n                </div>\n                <div className=\"text-xs terminal-muted\">Active Connections</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold terminal-info\">\n                  {activeConnections.filter(c => c.state === \"LISTEN\").length}\n                </div>\n                <div className=\"text-xs terminal-muted\">Listening Ports</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold terminal-success\">\n                  {networkInterfaces.filter(i => i.status === \"UP\").length}\n                </div>\n                <div className=\"text-xs terminal-muted\">Active Interfaces</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold terminal-warning\">0</div>\n                <div className=\"text-xs terminal-muted\">Dropped Packets</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9094},"client/src/components/AudioPlayer.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Play, Pause, Volume2, VolumeX } from \"lucide-react\";\n\nexport default function AudioPlayer() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [audioReady, setAudioReady] = useState(false);\n  const [hasUserInteracted, setHasUserInteracted] = useState(false);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  // Using YouTube link as iframe for audio extraction (hidden)\n  const videoId = \"n_ZyXuSVQ5Q\";\n  const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=0&loop=1&playlist=${videoId}&controls=0&showinfo=0&rel=0&iv_load_policy=3&modestbranding=1&playsinline=1&enablejsapi=1`;\n\n  useEffect(() => {\n    setAudioReady(true);\n    \n    // Listen for user interaction to enable autoplay\n    const handleUserInteraction = () => {\n      if (!hasUserInteracted) {\n        setHasUserInteracted(true);\n        // Only auto-start if user hasn't manually controlled yet\n        setTimeout(() => {\n          setIsPlaying(true);\n        }, 500);\n      }\n    };\n\n    // Add event listeners for user interaction\n    document.addEventListener('click', handleUserInteraction, { once: true });\n    document.addEventListener('keydown', handleUserInteraction, { once: true });\n    \n    return () => {\n      document.removeEventListener('click', handleUserInteraction);\n      document.removeEventListener('keydown', handleUserInteraction);\n    };\n  }, [hasUserInteracted]);\n\n  const togglePlayPause = () => {\n    const iframe = document.getElementById('background-audio') as HTMLIFrameElement;\n    if (iframe && audioReady) {\n      // Mark that user has interacted manually\n      setHasUserInteracted(true);\n      \n      try {\n        if (isPlaying) {\n          // Pause the audio\n          iframe.contentWindow?.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n          setIsPlaying(false);\n        } else {\n          // Play the audio\n          iframe.contentWindow?.postMessage('{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}', '*');\n          setIsPlaying(true);\n        }\n      } catch (error) {\n        console.log(\"Audio control failed:\", error);\n      }\n    }\n  };\n\n  const toggleMute = () => {\n    const iframe = document.getElementById('background-audio') as HTMLIFrameElement;\n    if (iframe) {\n      try {\n        if (isMuted) {\n          iframe.contentWindow?.postMessage('{\"event\":\"command\",\"func\":\"unMute\",\"args\":\"\"}', '*');\n          setIsMuted(false);\n        } else {\n          iframe.contentWindow?.postMessage('{\"event\":\"command\",\"func\":\"mute\",\"args\":\"\"}', '*');\n          setIsMuted(true);\n        }\n      } catch (error) {\n        console.log(\"Volume control failed:\", error);\n      }\n    }\n  };\n\n  return (\n    <>\n      {/* Hidden YouTube iframe for background audio */}\n      <iframe\n        id=\"background-audio\"\n        src={embedUrl}\n        style={{\n          position: 'fixed',\n          top: '-1000px',\n          left: '-1000px',\n          width: '1px',\n          height: '1px',\n          opacity: 0,\n          pointerEvents: 'none'\n        }}\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        title=\"Background Audio\"\n      />\n\n      {/* Audio Player Controls */}\n      <Card className=\"bg-white/80 backdrop-blur-sm max-w-md mx-auto shadow-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-purple-600\">🎵 Nhạc Nền</h3>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleMute}\n                className=\"text-pink-500 hover:text-pink-600\"\n                title=\"Bật/tắt âm thanh\"\n              >\n                {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n              </Button>\n              <Button\n                onClick={togglePlayPause}\n                disabled={!audioReady}\n                className=\"bg-pink-500 hover:bg-pink-600 text-white disabled:bg-gray-400\"\n                size=\"sm\"\n              >\n                {isPlaying ? <Pause className=\"mr-2 h-4 w-4\" /> : <Play className=\"mr-2 h-4 w-4\" />}\n                {!audioReady ? \"Đang tải...\" : isPlaying ? \"Tạm dừng\" : \"Phát\"}\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"bg-pink-100 rounded-xl p-3\">\n            <p className=\"text-sm text-gray-600 mb-2\">Đang Phát:</p>\n            <p className=\"font-medium text-purple-600\">Nhạc Nền Cute 🎶</p>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Nguồn: <a href=\"https://youtu.be/n_ZyXuSVQ5Q?si=5--FpbK0_698vPX6\" \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-pink-500 hover:underline\">\n                Xem trên YouTube\n              </a>\n            </p>\n            <p className=\"text-xs text-pink-400 mt-1\">🌸 Âm thanh phát nền tự động khi có tương tác</p>\n            {audioReady && !hasUserInteracted && (\n              <p className=\"text-xs text-blue-400 mt-1\">👆 Nhấn bất kỳ đâu để kích hoạt âm thanh</p>\n            )}\n            {audioReady && hasUserInteracted && !isPlaying && (\n              <p className=\"text-xs text-yellow-500 mt-1\">⏸️ Nhạc đã tạm dừng - nhấn Phát để tiếp tục</p>\n            )}\n            {isPlaying && hasUserInteracted && (\n              <p className=\"text-xs text-pink-500 mt-1\">🎵 Đang phát nhạc nền...</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}","size_bytes":5927},"backup/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"backup/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"backup/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/start-viewer.ts":{"content":"\n#!/usr/bin/env tsx\nimport './prismarine-viewer.js';\n","size_bytes":53},"backup/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/sidebar.tsx":{"content":"import { Server, Terminal, Folder, Cpu, Network, Edit } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport SystemStats from \"@/components/system-stats\";\n\ntype TabType = \"terminal\" | \"files\" | \"processes\" | \"network\" | \"editor\";\n\ninterface SidebarProps {\n  activeTab: TabType;\n  onTabChange: (tab: TabType) => void;\n}\n\nexport default function Sidebar({ activeTab, onTabChange }: SidebarProps) {\n  const menuItems = [\n    { id: \"terminal\" as TabType, label: \"Terminal\", icon: Terminal },\n    { id: \"files\" as TabType, label: \"File Manager\", icon: Folder },\n    { id: \"processes\" as TabType, label: \"Processes\", icon: Cpu },\n    { id: \"network\" as TabType, label: \"Network\", icon: Network },\n    { id: \"editor\" as TabType, label: \"Text Editor\", icon: Edit },\n  ];\n\n  return (\n    <div className=\"w-64 terminal-panel border-r terminal-border flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b terminal-border\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-cyan-500 rounded-lg flex items-center justify-center\">\n            <Server className=\"h-4 w-4 text-black\" />\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-sm terminal-text\">VPS Simulator</h1>\n            <p className=\"text-xs terminal-muted\">ubuntu-server-01</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-3\">\n        <ul className=\"space-y-1\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeTab === item.id;\n            \n            return (\n              <li key={item.id}>\n                <Button\n                  variant=\"ghost\"\n                  className={`w-full justify-start gap-3 px-3 py-2 text-sm font-medium ${\n                    isActive\n                      ? \"bg-cyan-500/20 text-cyan-400 hover:bg-cyan-500/30\"\n                      : \"terminal-text hover:bg-gray-600/50\"\n                  }`}\n                  onClick={() => onTabChange(item.id)}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  {item.label}\n                </Button>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* System Stats */}\n      <SystemStats />\n    </div>\n  );\n}\n","size_bytes":2332},"backup/client/src/pages/home.tsx":{"content":"export default function Home() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center\">\n      <h1 \n        className=\"text-4xl md:text-5xl lg:text-6xl font-normal tracking-tight select-none text-gray-900\" \n        data-testid=\"text-mindz\"\n      >\n        mindz\n      </h1>\n    </div>\n  );\n}\n","size_bytes":322},"backup/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/process-manager.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RefreshCw, Square } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Process } from \"@shared/schema\";\n\nexport default function ProcessManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get processes\n  const { data: processes = [], isLoading, refetch } = useQuery<Process[]>({\n    queryKey: [\"/api/processes\"],\n    refetchInterval: false, // Tắt auto-refresh để tránh spam\n  });\n\n  // Kill process mutation\n  const killProcess = useMutation({\n    mutationFn: async (pid: number) => {\n      await apiRequest(\"DELETE\", `/api/processes/${pid}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n      toast({\n        title: \"Success\",\n        description: \"Process terminated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to terminate process\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"running\":\n        return \"bg-green-500/20 text-green-400\";\n      case \"sleeping\":\n        return \"bg-blue-500/20 text-blue-400\";\n      case \"stopped\":\n        return \"bg-red-500/20 text-red-400\";\n      default:\n        return \"bg-gray-500/20 text-gray-400\";\n    }\n  };\n\n  const formatMemory = (kb: number) => {\n    if (kb < 1024) return `${kb} KB`;\n    return `${(kb / 1024).toFixed(1)} MB`;\n  };\n\n  const formatCpuUsage = (usage: number) => {\n    return `${(usage / 100).toFixed(1)}%`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 p-4 terminal-text\">\n        <div>Loading processes...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-lg font-semibold terminal-text\">Process Manager</h2>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            size=\"sm\"\n            onClick={() => refetch()}\n            className=\"bg-green-500 text-black hover:bg-green-400\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-1\" />\n            Refresh\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            className=\"bg-red-500 text-white hover:bg-red-400\"\n          >\n            <Square className=\"h-4 w-4 mr-1\" />\n            Kill Process\n          </Button>\n        </div>\n      </div>\n\n      {/* Process Table */}\n      <div className=\"terminal-panel rounded-lg border terminal-border overflow-hidden\">\n        {/* Table Header */}\n        <div className=\"grid grid-cols-6 gap-4 p-3 border-b terminal-border bg-gray-600/30 text-xs font-semibold terminal-muted uppercase tracking-wide\">\n          <div>PID</div>\n          <div>Process Name</div>\n          <div>User</div>\n          <div>CPU %</div>\n          <div>Memory</div>\n          <div>Status</div>\n        </div>\n\n        {/* Table Body */}\n        <div className=\"max-h-96 overflow-y-auto custom-scrollbar\">\n          {processes.map((process) => (\n            <div\n              key={process.id}\n              className=\"grid grid-cols-6 gap-4 p-3 border-b terminal-border/50 hover:bg-gray-600/20 text-sm font-mono group\"\n            >\n              <div className=\"terminal-text\">{process.pid}</div>\n              <div className=\"terminal-text\">{process.name}</div>\n              <div className=\"terminal-muted\">{process.user}</div>\n              <div className={`${process.cpuUsage > 500 ? 'terminal-error' : process.cpuUsage > 200 ? 'terminal-warning' : 'terminal-success'}`}>\n                {formatCpuUsage(process.cpuUsage)}\n              </div>\n              <div className=\"terminal-text\">{formatMemory(process.memoryUsage)}</div>\n              <div className=\"flex items-center justify-between\">\n                <Badge className={getStatusColor(process.status)}>\n                  {process.status}\n                </Badge>\n                {process.pid !== 1 && ( // Don't allow killing init process\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => killProcess.mutate(process.pid)}\n                    className=\"opacity-0 group-hover:opacity-100 transition-opacity p-1 text-red-400 hover:text-red-300\"\n                  >\n                    <Square className=\"h-3 w-3\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Process Stats */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"terminal-panel border terminal-border rounded-lg p-4\">\n          <h3 className=\"text-sm font-semibold terminal-muted mb-2\">Total Processes</h3>\n          <div className=\"text-2xl font-bold terminal-text\">{processes.length}</div>\n        </div>\n        <div className=\"terminal-panel border terminal-border rounded-lg p-4\">\n          <h3 className=\"text-sm font-semibold terminal-muted mb-2\">Running</h3>\n          <div className=\"text-2xl font-bold text-green-400\">\n            {processes.filter(p => p.status === \"running\").length}\n          </div>\n        </div>\n        <div className=\"terminal-panel border terminal-border rounded-lg p-4\">\n          <h3 className=\"text-sm font-semibold terminal-muted mb-2\">Average CPU</h3>\n          <div className=\"text-2xl font-bold terminal-text\">\n            {processes.length > 0 \n              ? formatCpuUsage(Math.round(processes.reduce((sum, p) => sum + p.cpuUsage, 0) / processes.length))\n              : \"0%\"\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5960},"client/src/components/MusicPlayer.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Play, Pause, Volume2, VolumeX, RotateCcw } from \"lucide-react\";\n\nexport default function MusicPlayer() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [audioReady, setAudioReady] = useState(false);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  // Generate a more pleasant melody programmatically\n  const generateMelody = (): string => {\n    try {\n      const context = new (window.AudioContext || window.webkitAudioContext)();\n      const sampleRate = context.sampleRate;\n      const duration = 8; // 8 seconds\n      const length = sampleRate * duration;\n      const buffer = context.createBuffer(2, length, sampleRate);\n      \n      // Cute kawaii melody notes - higher pitched and more cheerful\n      const notes = [523.25, 587.33, 659.25, 698.46, 783.99, 880.00, 987.77, 1046.50]; // C5, D5, E5, F5, G5, A5, B5, C6\n      // Multiple cute melody patterns\n      const melodyPatterns = [\n        [0, 2, 4, 2, 6, 4, 2, 0, 1, 3, 5, 3, 7, 5, 3, 0], // Happy bounce\n        [0, 4, 2, 6, 4, 0, 3, 5, 7, 5, 3, 1, 4, 2, 0], // Dreamy\n        [2, 4, 6, 7, 6, 4, 2, 0, 3, 5, 7, 5, 3, 1, 2, 4], // Playful\n        [0, 2, 4, 6, 7, 6, 4, 2, 5, 7, 5, 3, 1, 3, 5, 0], // Kawaii\n      ];\n      const melody = melodyPatterns[Math.floor(Math.random() * melodyPatterns.length)];\n      \n      for (let channel = 0; channel < 2; channel++) {\n        const channelData = buffer.getChannelData(channel);\n        \n        for (let i = 0; i < length; i++) {\n          const time = i / sampleRate;\n          const noteIndex = Math.floor((time * 2) % melody.length);\n          const frequency = notes[melody[noteIndex]];\n          \n          // Create a cute, bell-like tone (more kawaii)\n          const fundamental = Math.sin(2 * Math.PI * frequency * time);\n          const harmonic2 = Math.sin(2 * Math.PI * frequency * 2 * time) * 0.4;\n          const harmonic3 = Math.sin(2 * Math.PI * frequency * 3 * time) * 0.2;\n          const softening = Math.sin(2 * Math.PI * frequency * 0.5 * time) * 0.1; // Add softness\n          \n          let sample = (fundamental + harmonic2 + harmonic3 + softening) * 0.25;\n          \n          // Add cute bounce effect\n          const noteTime = (time * 1.5) % 1;\n          const envelope = noteTime < 0.05 ? noteTime * 20 : \n                          noteTime < 0.15 ? 1 :\n                          noteTime > 0.85 ? (1 - noteTime) * 6.67 : 0.8;\n          \n          sample *= envelope;\n          \n          // Overall fade in/out\n          const fadeTime = 0.5;\n          if (time < fadeTime) {\n            sample *= time / fadeTime;\n          } else if (time > duration - fadeTime) {\n            sample *= (duration - time) / fadeTime;\n          }\n          \n          channelData[i] = sample;\n        }\n      }\n      \n      // Convert to WAV blob URL\n      const wav = audioBufferToWav(buffer);\n      return URL.createObjectURL(new Blob([wav], { type: 'audio/wav' }));\n    } catch (error) {\n      console.log(\"Could not generate melody:\", error);\n      // Fallback to a simple pleasant tone\n      return \"data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvGURCjeL0fPTgC4DJ27A7+OZURE=\";\n    }\n  };\n\n  const audioBufferToWav = (buffer: AudioBuffer): ArrayBuffer => {\n    const length = buffer.length;\n    const numberOfChannels = buffer.numberOfChannels;\n    const sampleRate = buffer.sampleRate;\n    const arrayBuffer = new ArrayBuffer(44 + length * numberOfChannels * 2);\n    const view = new DataView(arrayBuffer);\n    \n    // WAV header\n    const writeString = (offset: number, string: string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    \n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + length * numberOfChannels * 2, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numberOfChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * numberOfChannels * 2, true);\n    view.setUint16(32, numberOfChannels * 2, true);\n    view.setUint16(34, 16, true);\n    writeString(36, 'data');\n    view.setUint32(40, length * numberOfChannels * 2, true);\n    \n    // Convert float samples to 16-bit PCM\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = Math.max(-1, Math.min(1, buffer.getChannelData(channel)[i]));\n        view.setInt16(offset, sample * 0x7FFF, true);\n        offset += 2;\n      }\n    }\n    \n    return arrayBuffer;\n  };\n\n  const [audioSrc, setAudioSrc] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.volume = 0.15;\n      \n      // Generate cute melody\n      const melody = generateMelody();\n      setAudioSrc(melody);\n      audioRef.current.src = melody;\n      setAudioReady(true);\n    }\n  }, []);\n\n  const togglePlayPause = () => {\n    if (audioRef.current && audioReady) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play().catch((error) => {\n          console.log(\"Audio play failed:\", error);\n        });\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const regenerateMusic = () => {\n    if (audioRef.current) {\n      const wasPlaying = isPlaying;\n      audioRef.current.pause();\n      setIsPlaying(false);\n      setAudioReady(false);\n      \n      setTimeout(() => {\n        const melody = generateMelody();\n        setAudioSrc(melody);\n        if (audioRef.current) {\n          audioRef.current.src = melody;\n          setAudioReady(true);\n          if (wasPlaying) {\n            audioRef.current.play().catch((error) => {\n              console.log(\"Audio play failed:\", error);\n            });\n          }\n        }\n      }, 100);\n    }\n  };\n\n  const toggleMute = () => {\n    if (audioRef.current) {\n      audioRef.current.muted = !isMuted;\n      setIsMuted(!isMuted);\n    }\n  };\n\n  return (\n    <Card className=\"bg-white/80 backdrop-blur-sm max-w-md mx-auto shadow-lg\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-purple-600\">🎵 Background Music</h3>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleMute}\n              className=\"text-pink-500 hover:text-pink-600\"\n              title=\"Bật/tắt âm thanh\"\n            >\n              {isMuted ? <VolumeX className=\"h-4 w-4\" /> : <Volume2 className=\"h-4 w-4\" />}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={regenerateMusic}\n              disabled={!audioReady}\n              className=\"text-purple-500 hover:text-purple-600 disabled:text-gray-400\"\n              title=\"Tạo giai điệu mới\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              onClick={togglePlayPause}\n              disabled={!audioReady}\n              className=\"bg-pink-500 hover:bg-pink-600 text-white disabled:bg-gray-400\"\n              size=\"sm\"\n            >\n              {isPlaying ? <Pause className=\"mr-2 h-4 w-4\" /> : <Play className=\"mr-2 h-4 w-4\" />}\n              {!audioReady ? \"Đang tạo...\" : isPlaying ? \"Pause\" : \"Play\"}\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"bg-pink-100 rounded-xl p-3\">\n          <p className=\"text-sm text-gray-600 mb-2\">Now Playing:</p>\n          <p className=\"font-medium text-purple-600\">Cute Kawaii Melody 🎶</p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Nhạc gốc tham khảo: <a href=\"https://youtu.be/n_ZyXuSVQ5Q?si=5--FpbK0_698vPX6\" \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-pink-500 hover:underline\">\n              Xem trên YouTube\n            </a>\n          </p>\n          <p className=\"text-xs text-pink-400 mt-1\">🌸 Nhạc kawaii tạo tự động - nhấn nút ↻ để đổi giai điệu</p>\n          {!audioReady && (\n            <p className=\"text-xs text-blue-400 mt-1\">🔄 Đang tạo nhạc kawaii cute...</p>\n          )}\n          {audioReady && !isPlaying && (\n            <p className=\"text-xs text-green-400 mt-1\">✅ Sẵn sàng phát nhạc! Nhấn Play để nghe</p>\n          )}\n          {isPlaying && (\n            <p className=\"text-xs text-pink-500 mt-1\">🎵 Đang phát nhạc kawaii cute với giai điệu ngọt ngào...</p>\n          )}\n        </div>\n\n        <audio\n          ref={audioRef}\n          loop\n          preload=\"auto\"\n          onPlay={() => setIsPlaying(true)}\n          onPause={() => setIsPlaying(false)}\n          onEnded={() => setIsPlaying(false)}\n          onError={(e) => {\n            console.error(\"Audio error:\", e);\n            setAudioReady(false);\n          }}\n          onLoadedData={() => setAudioReady(true)}\n          onCanPlay={() => setAudioReady(true)}\n        >\n          Your browser does not support the audio element.\n        </audio>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9598},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"backup/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/terminal.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport type { CommandHistory } from \"@shared/schema\";\n\ninterface TerminalProps {\n  currentPath: string;\n  onPathChange: (path: string) => void;\n}\n\nexport default function Terminal({ currentPath, onPathChange }: TerminalProps) {\n  const [command, setCommand] = useState(\"\");\n  const [commandOutput, setCommandOutput] = useState<CommandHistory[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const outputRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n\n  // Get command history\n  const { data: history = [] } = useQuery<CommandHistory[]>({\n    queryKey: [\"/api/commands/history\"],\n  });\n\n  // Execute command mutation\n  const executeCommand = useMutation({\n    mutationFn: async (cmd: string) => {\n      const response = await apiRequest(\"POST\", \"/api/commands\", { command: cmd });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCommandOutput(prev => [...prev, data]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/commands/history\"] });\n      \n      // Handle special commands that change state\n      if (data.command.startsWith(\"cd \")) {\n        const newPath = data.command.split(\" \")[1];\n        if (newPath && data.success) {\n          onPathChange(newPath.startsWith(\"/\") ? newPath : `${currentPath}/${newPath}`);\n        }\n      } else if (data.command === \"clear\") {\n        setCommandOutput([]);\n      }\n    },\n  });\n\n  // Clear history mutation\n  const clearHistory = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/commands/history\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/commands/history\"] });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (command.trim()) {\n      executeCommand.mutate(command.trim());\n      setCommand(\"\");\n      setHistoryIndex(-1);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n      if (history.length > 0 && historyIndex < history.length - 1) {\n        const newIndex = historyIndex + 1;\n        setHistoryIndex(newIndex);\n        setCommand(history[newIndex].command);\n      }\n    } else if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      if (historyIndex > 0) {\n        const newIndex = historyIndex - 1;\n        setHistoryIndex(newIndex);\n        setCommand(history[newIndex].command);\n      } else if (historyIndex === 0) {\n        setHistoryIndex(-1);\n        setCommand(\"\");\n      }\n    }\n  };\n\n  // Auto-scroll to bottom when new output is added\n  useEffect(() => {\n    if (outputRef.current) {\n      outputRef.current.scrollTop = outputRef.current.scrollHeight;\n    }\n  }, [commandOutput]);\n\n  // Auto-focus input\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const formatOutput = (output: string) => {\n    if (output.includes('\\x1b[2J\\x1b[H')) {\n      // Clear screen command\n      return '';\n    }\n    \n    // Handle ANSI color codes (basic implementation)\n    return output\n      .replace(/\\x1b\\[34m([^\\x1b]*)\\x1b\\[0m/g, '<span class=\"terminal-info\">$1</span>')\n      .replace(/\\x1b\\[31m([^\\x1b]*)\\x1b\\[0m/g, '<span class=\"terminal-error\">$1</span>')\n      .replace(/\\x1b\\[32m([^\\x1b]*)\\x1b\\[0m/g, '<span class=\"terminal-success\">$1</span>')\n      .replace(/\\x1b\\[33m([^\\x1b]*)\\x1b\\[0m/g, '<span class=\"terminal-warning\">$1</span>');\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      {/* Terminal Output */}\n      <div \n        ref={outputRef}\n        className=\"flex-1 p-4 overflow-y-auto font-mono text-sm custom-scrollbar\"\n      >\n        {/* Welcome message */}\n        <div className=\"space-y-1 mb-4 terminal-muted\">\n          <div>Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-150-generic x86_64)</div>\n          <div>Last login: {new Date().toLocaleString()}</div>\n          <div className=\"mt-3 terminal-text\">Type 'help' for available commands.</div>\n        </div>\n\n        {/* Command output */}\n        <div className=\"space-y-1\">\n          {commandOutput.map((entry, index) => (\n            <div key={index} className=\"space-y-1\">\n              <div className=\"flex\">\n                <span className=\"terminal-prompt\">root@ubuntu-server-01:{currentPath}$</span>\n                <span className=\"terminal-text ml-2\">{entry.command}</span>\n              </div>\n              {entry.output && (\n                <div \n                  className={`ml-4 whitespace-pre-line ${entry.success ? 'terminal-text' : 'terminal-error'}`}\n                  dangerouslySetInnerHTML={{ __html: formatOutput(entry.output) }}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Current prompt */}\n        <form onSubmit={handleSubmit} className=\"flex items-center mt-2\">\n          <span className=\"terminal-prompt\">root@ubuntu-server-01:{currentPath}$</span>\n          <Input\n            ref={inputRef}\n            type=\"text\"\n            value={command}\n            onChange={(e) => setCommand(e.target.value)}\n            onKeyDown={handleKeyDown}\n            className=\"flex-1 ml-2 bg-transparent border-none outline-none text-white font-mono placeholder-gray-500 focus:ring-0 focus:border-none p-0\"\n            placeholder=\"Enter command...\"\n            disabled={executeCommand.isPending}\n          />\n        </form>\n      </div>\n\n      {/* Command History Panel */}\n      <div className=\"h-32 terminal-panel border-t terminal-border p-3\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"text-xs font-semibold terminal-muted uppercase tracking-wide\">\n            Command History\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => clearHistory.mutate()}\n            className=\"text-xs terminal-accent hover:terminal-info h-auto p-1\"\n          >\n            Clear\n          </Button>\n        </div>\n        <div className=\"text-xs font-mono space-y-1 terminal-muted custom-scrollbar overflow-y-auto max-h-20\">\n          {history.slice(-10).map((entry, index) => (\n            <div key={index}>{entry.command}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6561},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Heart, Bot, Rocket, Users, Facebook, Youtube, Server } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nimport AudioPlayer from \"@/components/AudioPlayer\";\nimport BotCard from \"@/components/BotCard\";\nimport BotConfigModal from \"@/components/BotConfigModal\";\nimport BotConfigForm from \"@/components/BotConfigForm\";\nimport BotScreen from \"@/components/BotScreen\";\nimport VipPricing from \"@/components/VipPricing\";\nimport { useBots } from \"@/hooks/use-bots\";\n\nexport default function Home() {\n  const { bots, isLoading } = useBots();\n  const [isConfigModalOpen, setIsConfigModalOpen] = useState(false);\n  const [selectedBotId, setSelectedBotId] = useState<string | null>(null);\n\n\n\n  const handleConfigBot = (botId: string) => {\n    setSelectedBotId(botId);\n    setIsConfigModalOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Navigation */}\n      <nav className=\"sticky top-0 z-50 glass-effect\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-pink-500 rounded-full flex items-center justify-center animate-pulse\">\n                <Bot className=\"text-white text-xl\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-purple-600\">🎮 Quản Lý Bot</h1>\n            </div>\n\n            <div className=\"hidden md:flex items-center space-x-6\">\n              <a href=\"#home\" className=\"text-purple-600 hover:text-pink-500 transition-colors font-medium\">Trang Chủ</a>\n              <a href=\"#dashboard\" className=\"text-purple-600 hover:text-pink-500 transition-colors font-medium\">Bảng Điều Khiển</a>\n              <Link href=\"/vps\" className=\"text-purple-600 hover:text-pink-500 transition-colors font-medium flex items-center gap-1\">\n                <Server className=\"w-4 h-4\" />\n                VPS Simulator\n              </Link>\n              <a href=\"#vip\" className=\"text-purple-600 hover:text-pink-500 transition-colors font-medium\">Tính Năng VIP</a>\n              <a href=\"#contact\" className=\"text-purple-600 hover:text-pink-500 transition-colors font-medium\">Liên Hệ</a>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <a href=\"https://www.facebook.com/le.van.nam.21737\" target=\"_blank\" rel=\"noopener noreferrer\"\n                 className=\"w-10 h-10 bg-blue-500 hover:bg-blue-600 rounded-full flex items-center justify-center transition-all transform hover:scale-110\">\n                <Facebook className=\"text-white w-5 h-5\" />\n              </a>\n              <a href=\"https://m.youtube.com/@duythien2k6\" target=\"_blank\" rel=\"noopener noreferrer\"\n                 className=\"w-10 h-10 bg-red-500 hover:bg-red-600 rounded-full flex items-center justify-center transition-all transform hover:scale-110\">\n                <Youtube className=\"text-white w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section id=\"home\" className=\"py-20 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h1 className=\"text-5xl md:text-7xl font-bold text-purple-600 mb-8 animate-bounce-slow\">\n            🌸 embeloli.vn - Quản Lý Bot Minecraft 🌸\n          </h1>\n          <p className=\"text-xl text-gray-700 mb-12 max-w-2xl mx-auto\">\n            <strong>embeloli.vn</strong> - Trang web số 1 Việt Nam về quản lý bot Minecraft! Giao diện màu hồng đáng yêu, tính năng VIP mạnh mẽ, và công nghệ mineflayer tiên tiến. Dễ dàng tạo và điều khiển bot cho server Minecraft của bạn.\n          </p>\n\n          {/* Cute Character Avatar */}\n          <div className=\"flex justify-center mb-12\">\n            <div className=\"animate-float\">\n              <div className=\"w-64 h-64 bg-gradient-to-br from-pink-400 via-purple-400 to-pink-500 rounded-2xl shadow-lg hover:shadow-xl transition-all transform hover:scale-105 border-4 border-pink-200 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Bot className=\"w-24 h-24 text-white mb-4 mx-auto animate-pulse\" />\n                  <div className=\"text-white font-bold text-xl\">🌸 Bot Cute 🌸</div>\n                  <div className=\"text-pink-100 text-sm mt-2\">Minecraft Manager</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <AudioPlayer />\n        </div>\n      </section>\n\n      {/* Bot Management Dashboard */}\n      <section id=\"dashboard\" className=\"py-20 px-4 bg-white/50\">\n        <div className=\"container mx-auto\">\n          <h2 className=\"text-4xl font-bold text-purple-600 text-center mb-8\">\n            🤖 Bảng Điều Khiển Bot\n          </h2>\n          \n          {/* Bot Configuration Section */}\n          <div className=\"mb-8 flex justify-center\">\n            <BotConfigForm />\n          </div>\n\n          {/* Bot Status Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n            {isLoading ? (\n              Array.from({ length: 3 }, (_, i) => (\n                <Card key={i} className=\"bg-white/80 backdrop-blur-sm\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"animate-pulse\">\n                      <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-gray-200 rounded\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded\"></div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <>\n                {bots?.map((bot) => (\n                  <BotCard \n                    key={bot.id} \n                    bot={bot} \n                    onConfigure={() => handleConfigBot(bot.id)}\n                  />\n                ))}\n\n              </>\n            )}\n          </div>\n\n          {/* Bot Screen Section */}\n          <div id=\"bot-screen-section\" className=\"mt-12\">\n            <h3 className=\"text-2xl font-bold text-purple-600 text-center mb-6\">\n              🖥️ BotView - Màn Hình Bot Real-time\n            </h3>\n            <div className=\"max-w-6xl mx-auto mb-8\">\n              <BotScreen \n                botId={selectedBotId || (bots && bots.length > 0 ? bots[0].id : \"\")} \n                botName={selectedBotId ? bots?.find(b => b.id === selectedBotId)?.username || \"Bot\" : (bots && bots.length > 0 ? bots[0].username : \"No Bot\")}\n              />\n            </div>\n          </div>\n\n        </div>\n      </section>\n\n      {/* VIP Features Section */}\n      <VipPricing />\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 px-4 bg-white/50\">\n        <div className=\"container mx-auto text-center max-w-4xl\">\n          <h2 className=\"text-4xl font-bold text-purple-600 mb-8\">\n            📞 Liên Hệ & Hỗ Trợ\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n            <Card className=\"bg-white/80 backdrop-blur-sm\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Facebook className=\"text-white text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Facebook</h3>\n                <p className=\"text-gray-600 mb-4\">Chat trực tiếp với chúng mình để được hỗ trợ nhanh nhất!</p>\n                <Button asChild className=\"bg-blue-500 hover:bg-blue-600\">\n                  <a href=\"https://www.facebook.com/le.van.nam.21737\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Messenger ngay\n                  </a>\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/80 backdrop-blur-sm\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Youtube className=\"text-white text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">YouTube</h3>\n                <p className=\"text-gray-600 mb-4\">Đón xem video mới nhất và hướng dẫn sử dụng bot!</p>\n                <Button asChild className=\"bg-red-500 hover:bg-red-600\">\n                  <a href=\"https://m.youtube.com/@duythien2k6\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Subscribe ngay\n                  </a>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"bg-pink-100\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-semibold text-purple-600 mb-4\">🎯 Tại sao chọn chúng mình?</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-left\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-pink-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Heart className=\"text-white text-sm\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-1\">Giao diện cute</h4>\n                    <p className=\"text-gray-600 text-sm\">Thiết kế đáng yêu, dễ sử dụng với màu hồng đặc trưng</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-pink-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Rocket className=\"text-white text-sm\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-1\">Hiệu suất cao</h4>\n                    <p className=\"text-gray-600 text-sm\">Bot chạy ổn định, ít lag với công nghệ mineflayer</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-pink-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Users className=\"text-white text-sm\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-1\">Hỗ trợ 24/7</h4>\n                    <p className=\"text-gray-600 text-sm\">Team support nhiệt tình, sẵn sàng giúp đỡ bạn</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"gradient-pink text-white py-12 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <div className=\"mb-8\">\n            <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Bot className=\"text-white text-2xl\" />\n            </div>\n            <h3 className=\"text-2xl font-bold mb-2\">embeloli.vn</h3>\n            <p className=\"text-pink-100\">Quản lý bot Minecraft một cách cute và hiệu quả! 🌸</p>\n          </div>\n\n          <div className=\"flex justify-center space-x-6 mb-8\">\n            <a href=\"https://www.facebook.com/le.van.nam.21737\" target=\"_blank\" rel=\"noopener noreferrer\"\n               className=\"w-12 h-12 bg-white/20 hover:bg-white/30 rounded-full flex items-center justify-center transition-all\">\n              <Facebook className=\"text-xl\" />\n            </a>\n            <a href=\"https://m.youtube.com/@duythien2k6\" target=\"_blank\" rel=\"noopener noreferrer\"\n               className=\"w-12 h-12 bg-white/20 hover:bg-white/30 rounded-full flex items-center justify-center transition-all\">\n              <Youtube className=\"text-xl\" />\n            </a>\n          </div>\n\n          <div className=\"border-t border-white/20 pt-8\">\n            <p className=\"text-pink-100\">&copy; 2024 embeloli.vn - Quản Lý Bot Minecraft. Được tạo với 💖 cho cộng đồng Minecraft!</p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Bot Configuration Modal */}\n      {selectedBotId && (\n        <BotConfigModal\n          botId={selectedBotId}\n          open={isConfigModalOpen}\n          onClose={() => {\n            setIsConfigModalOpen(false);\n            setSelectedBotId(null);\n          }}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":13054},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertBotSchema, updateBotConfigSchema } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { sharedLogger } from \"./shared-logger\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n// Cache bot status để tránh đọc file quá nhiều\nlet cachedBotStatus: any = null;\nlet lastCacheUpdate = 0;\nconst CACHE_DURATION = 1000; // 1 giây\n\nfunction getBotStatus() {\n  const now = Date.now();\n  if (cachedBotStatus && (now - lastCacheUpdate) < CACHE_DURATION) {\n    return cachedBotStatus;\n  }\n\n  try {\n    const statusPath = path.join(process.cwd(), 'Embe', 'bot-status.json');\n    if (fs.existsSync(statusPath)) {\n      const data = fs.readFileSync(statusPath, 'utf-8');\n      cachedBotStatus = JSON.parse(data);\n      lastCacheUpdate = now;\n      return cachedBotStatus;\n    }\n  } catch (err) {\n    console.log('Lỗi đọc bot status:', err);\n  }\n\n  return {\n    status: 'offline',\n    connected: false,\n    position: { x: 0, y: 64, z: 0 },\n    health: 0,\n    food: 0,\n    inventory: { items: [], equipment: {}, totalItems: 0 }\n  };\n}\n\n// Create a simple mock botManager to prevent import errors\nconst botManager = {\n  async startBot(id: string): Promise<boolean> {\n    console.log(`Mock: Starting bot ${id}`);\n    return true;\n  },\n  async stopBot(id: string): Promise<boolean> {\n    console.log(`Mock: Stopping bot ${id}`);\n    return true;\n  },\n  async updateBotConfig(id: string, config: any): Promise<boolean> {\n    console.log(`Mock: Updating bot config ${id}`, config);\n    return true;\n  },\n  getBotStatus(id: string): any {\n    console.log(`Mock: Getting bot status ${id}`);\n    return { status: 'offline', connected: false, health: 20, food: 20, uptime: 0 };\n  },\n  sendBotMessage(id: string, message: string): boolean {\n    console.log(`Mock: Sending message to bot ${id}: ${message}`);\n    return true;\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint for uptime monitoring\n  app.get(\"/health\", (req, res) => {\n    res.status(200).json({\n      status: \"ok\",\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      message: \"PinkMineManager is running! 💕\"\n    });\n  });\n\n  // Bot status endpoint cho web màu hồng\n  app.get(\"/api/bot-status\", async (req, res) => {\n    try {\n      const status = getBotStatus();\n      res.json(status);\n    } catch (error) {\n      console.log('Lỗi lấy bot status:', error);\n      res.json({\n        status: 'offline',\n        error: (error as Error).message,\n        connected: false,\n        inventory: { items: [], equipment: {}, totalItems: 0 }\n      });\n    }\n  });\n\n  // API endpoint để nhận log từ bot process\n  app.post(\"/api/console/log\", (req, res) => {\n    try {\n      const { message, level = 'info', source = 'bot', botId = 'external-bot' } = req.body;\n\n      if (message && message.trim()) {\n        // Tạo một global broadcast function reference\n        const broadcastFn = (global as any).broadcastToWebConsole;\n        if (broadcastFn) {\n          broadcastFn(botId, level, message, source);\n        } else {\n          // Fallback nếu global function chưa sẵn sàng\n          broadcastConsoleMessage({\n            botId,\n            level,\n            message,\n            source\n          });\n        }\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error logging to console:', error);\n      res.status(500).json({ success: false, error: 'Failed to log message' });\n    }\n  });\n\n  // Global variable để lưu viewer URLs\n  let botViewerUrls: {[key: string]: any} = {};\n\n  // API endpoint để nhận viewer URL từ bot process\n  app.post(\"/api/bot-viewer-url\", (req, res) => {\n    try {\n      const { url, port, status, botId } = req.body;\n\n      botViewerUrls[botId] = {\n        url,\n        port,\n        status,\n        lastUpdated: new Date().toISOString()\n      };\n\n      console.log(`🎮 Đã cập nhật viewer URL cho ${botId}: ${url}`);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error updating viewer URL:', error);\n      res.status(500).json({ success: false, error: 'Failed to update viewer URL' });\n    }\n  });\n\n  // API endpoint để lấy viewer URLs\n  app.get(\"/api/bot-viewer-urls\", (req, res) => {\n    res.json(botViewerUrls);\n  });\n\n  // Update bot configuration endpoint\n  app.post(\"/api/bot/config\", async (req, res) => {\n    try {\n      const { botName, serverHost, serverPort, version } = req.body;\n\n      if (!botName || !serverHost) {\n        return res.status(400).json({ \n        success: false, \n        error: \"Bot name và server host là bắt buộc\" \n      });\n      }\n\n      // Parse port (default 25565 if not provided)\n      const port = serverPort ? parseInt(serverPort) : 25565;\n      const mcVersion = version || '1.19.4';\n\n      // For now, just return success without modifying files\n      console.log('Bot config update:', { botName, serverHost, port, mcVersion });\n\n      res.json({ \n        success: true, \n        message: \"Cấu hình bot đã được cập nhật thành công!\",\n        config: {\n          botName,\n          serverHost,\n          port,\n          version: mcVersion\n        }\n      });\n\n    } catch (error) {\n      console.error('Lỗi cập nhật config bot:', error);\n      res.status(500).json({ \n        success: false, \n        error: \"Không thể cập nhật cấu hình bot\" \n      });\n    }\n  });\n\n  // Get current bot configuration\n  app.get(\"/api/bot/config\", async (req, res) => {\n    try {\n      // Return default configuration instead of reading file\n      const currentConfig = {\n        botName: 'botlolicute',\n        serverHost: 'thuatzai123.aternos.me',\n        serverPort: 38893,\n        version: '1.19.4'\n      };\n\n      res.json({ success: true, config: currentConfig });\n\n    } catch (error) {\n      console.error('Lỗi đọc config bot:', error);\n      res.status(500).json({ success: false, error: \"Không thể đọc cấu hình bot\" });\n    }\n  });\n\n  // Bot screen sharing endpoint - Real data from botlolicute\n  app.get(\"/api/bots/:id/screen\", async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Try to get real bot status từ bot-status module\n      let realBotStatus;\n      try {\n        // Import dynamic để tránh circular dependency\n        const botStatusModule = await import('../Embe/bot-status.js');\n        realBotStatus = botStatusModule.getBotStatus();\n\n        // Removed spam log - only log on status change\n      } catch (importError) {\n        console.log('⚠️ Cannot import bot-status:', importError.message);\n        realBotStatus = {\n          connected: false,\n          health: 0,\n          food: 0,\n          position: { x: 0, y: 64, z: 0 },\n          mode: 'offline',\n          status: 'Disconnected',\n          nearbyMobs: [],\n          equipment: { weapon: null, armor: [] },\n          targetPlayer: null,\n          uptime: 0,\n          lastActivity: 'Never',\n          inventory: { items: [], equipment: {}, totalItems: 0 }\n        };\n      }\n\n      // Always try to get cached data from prismarine-viewer API as backup\n      let viewerData = null;\n      try {\n        const viewerResponse = await fetch('http://localhost:3001/api/bot-status');\n        if (viewerResponse.ok) {\n          viewerData = await viewerResponse.json();\n          // Removed spam log - only log important changes\n        }\n      } catch (viewerError) {\n        console.log('⚠️ Cannot fetch viewer data:', viewerError.message);\n      }\n\n      // Use viewer data as fallback if bot-status is not connected but viewer has data\n      const effectiveData = (realBotStatus.connected && realBotStatus.health > 0) ? realBotStatus : (viewerData?.connected ? viewerData : realBotStatus);\n\n      if (!effectiveData.connected) {\n        // Return offline data when bot is not connected\n        const offlineData = {\n          connected: false,\n          health: 0,\n          food: 0,\n          position: { x: 0, y: 64, z: 0 },\n          mode: 'offline',\n          currentAction: 'Bot không kết nối - Đang thử kết nối lại...',\n          nearbyEntities: [],\n          inventory: [],\n          equipment: { \n            hand: null, \n            offhand: null, \n            helmet: null, \n            chestplate: null, \n            leggings: null, \n            boots: null,\n            weapon: null \n          },\n          targetPlayer: null,\n          uptime: 0,\n          lastActivity: 'Never',\n          timestamp: new Date().toISOString()\n        };\n        console.log('🔴 Returning offline data');\n        res.json(offlineData);\n        return;\n      }\n\n      // Return real bot data when connected - with full inventory and equipment\n      const inventoryData = effectiveData.inventory || { items: [], equipment: {}, totalItems: 0 };\n\n      const connectedData = {\n        connected: true,\n        health: effectiveData.health || 20,\n        food: effectiveData.food || 20,\n        position: effectiveData.position || { x: 0, y: 64, z: 0 },\n        mode: effectiveData.mode || 'online',\n        currentAction: effectiveData.status || 'Connected and Ready',\n        nearbyEntities: effectiveData.nearbyMobs || [],\n        inventory: inventoryData.items || [],\n        equipment: {\n          hand: inventoryData.equipment?.hand?.displayName || inventoryData.equipment?.hand?.name || null,\n          offhand: inventoryData.equipment?.offhand?.displayName || inventoryData.equipment?.offhand?.name || null,\n          helmet: inventoryData.equipment?.helmet?.displayName || inventoryData.equipment?.helmet?.name || null,\n          chestplate: inventoryData.equipment?.chestplate?.displayName || inventoryData.equipment?.chestplate?.name || null,\n          leggings: inventoryData.equipment?.leggings?.displayName || inventoryData.equipment?.leggings?.name || null,\n          boots: inventoryData.equipment?.boots?.displayName || inventoryData.equipment?.boots?.name || null,\n          weapon: inventoryData.equipment?.hand?.displayName || inventoryData.equipment?.hand?.name || null\n        },\n        targetPlayer: effectiveData.targetPlayer,\n        uptime: realBotStatus.uptime,\n        lastActivity: realBotStatus.lastActivity\n      };\n\n      res.json(connectedData);\n    } catch (error) {\n      console.error(\"Error getting bot screen:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/ping\", (req, res) => {\n    res.status(200).send(\"pong\");\n  });\n\n  // Route \"Xem Bot\" chuyên dụng với tích hợp prismarine-viewer\n  app.get(\"/xem-bot\", (req, res) => {\n    res.send(`\n      <!DOCTYPE html>\n      <html lang=\"vi\">\n      <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>🎮 Xem Bot - botlolicute 3D Viewer</title>\n          <style>\n              body {\n                  margin: 0;\n                  padding: 0;\n                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                  color: white;\n                  height: 100vh;\n                  overflow: hidden;\n              }\n\n              .header {\n                  background: rgba(0,0,0,0.3);\n                  padding: 15px 20px;\n                  display: flex;\n                  justify-content: space-between;\n                  align-items: center;\n                  backdrop-filter: blur(10px);\n                  box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n              }\n\n              .title {\n                  font-size: 1.5rem;\n                  font-weight: bold;\n                  display: flex;\n                  align-items: center;\n                  gap: 10px;\n              }\n\n              .status-info {\n                  display: flex;\n                  gap: 20px;\n                  align-items: center;\n                  font-size: 0.9rem;\n              }\n\n              .status-item {\n                  background: rgba(255,255,255,0.2);\n                  padding: 5px 12px;\n                  border-radius: 15px;\n                  backdrop-filter: blur(5px);\n              }\n\n              .controls {\n                  display: flex;\n                  gap: 10px;\n                  align-items: center;\n              }\n\n              .btn {\n                  background: rgba(255,255,255,0.2);\n                  border: none;\n                  color: white;\n                  padding: 8px 15px;\n                  border-radius: 20px;\n                  cursor: pointer;\n                  font-size: 0.9rem;\n                  transition: all 0.3s ease;\n                  backdrop-filter: blur(5px);\n              }\n\n              .btn:hover {\n                  background: rgba(255,255,255,0.3);\n                  transform: translateY(-1px);\n              }\n\n              .btn.primary {\n                  background: #4CAF50;\n              }\n\n              .btn.primary:hover {\n                  background: #45a049;\n              }\n\n              .viewer-container {\n                  height: calc(100vh - 80px);\n                  display: flex;\n                  position: relative;\n              }\n\n              .viewer-iframe {\n                  width: 100%;\n                  height: 100%;\n                  border: none;\n                  background: #1a1a1a;\n              }\n\n              .sidebar {\n                  width: 300px;\n                  background: rgba(0,0,0,0.4);\n                  backdrop-filter: blur(10px);\n                  padding: 20px;\n                  overflow-y: auto;\n                  border-left: 1px solid rgba(255,255,255,0.1);\n              }\n\n              .info-card {\n                  background: rgba(255,255,255,0.1);\n                  border-radius: 10px;\n                  padding: 15px;\n                  margin-bottom: 15px;\n                  backdrop-filter: blur(5px);\n              }\n\n              .info-card h3 {\n                  margin: 0 0 10px 0;\n                  font-size: 1rem;\n                  color: #FFD700;\n              }\n\n              .info-row {\n                  display: flex;\n                  justify-content: space-between;\n                  margin: 8px 0;\n                  font-size: 0.9rem;\n              }\n\n              .loading {\n                  display: flex;\n                  flex-direction: column;\n                  justify-content: center;\n                  align-items: center;\n                  height: 100%;\n                  background: rgba(0,0,0,0.5);\n                  color: white;\n              }\n\n              .loading-spinner {\n                  width: 50px;\n                  height: 50px;\n                  border: 4px solid rgba(255,255,255,0.3);\n                  border-top: 4px solid #FFD700;\n                  border-radius: 50%;\n                  animation: spin 1s linear infinite;\n                  margin-bottom: 20px;\n              }\n\n              @keyframes spin {\n                  0% { transform: rotate(0deg); }\n                  100% { transform: rotate(360deg); }\n              }\n\n              .error-message {\n                  background: rgba(255,0,0,0.2);\n                  border: 1px solid #ff4444;\n                  border-radius: 10px;\n                  padding: 15px;\n                  margin: 20px;\n                  text-align: center;\n              }\n\n              .toggle-sidebar {\n                  position: absolute;\n                  right: 10px;\n                  top: 50%;\n                  transform: translateY(-50%);\n                  z-index: 1000;\n                  background: rgba(0,0,0,0.7);\n                  color: white;\n                  border: none;\n                  padding: 10px;\n                  border-radius: 50%;\n                  cursor: pointer;\n                  transition: all 0.3s ease;\n              }\n\n              .toggle-sidebar:hover {\n                  background: rgba(0,0,0,0.9);\n              }\n\n              .sidebar.hidden {\n                  transform: translateX(100%);\n                  transition: transform 0.3s ease;\n              }\n          </style>\n      </head>\n      <body>\n          <div class=\"header\">\n              <div class=\"title\">\n                  🎮 Xem Bot - botlolicute\n              </div>\n              <div class=\"status-info\">\n                  <div class=\"status-item\">\n                      <span id=\"connectionStatus\">🔴 Đang tải...</span>\n                  </div>\n                  <div class=\"status-item\">\n                      <span id=\"healthStatus\">❤️ --/20</span>\n                  </div>\n                  <div class=\"status-item\">\n                      <span id=\"foodStatus\">🍞 --/20</span>\n                  </div>\n              </div>\n              <div class=\"controls\">\n                  <button class=\"btn\" onclick=\"refreshViewer()\">🔄 Làm mới</button>\n                  <button class=\"btn\" onclick=\"openFullscreen()\">🔍 Toàn màn hình</button>\n                  <button class=\"btn primary\" onclick=\"goBack()\">⬅️ Quay về</button>\n              </div>\n          </div>\n\n          <div class=\"viewer-container\">\n              <div id=\"viewerContent\">\n                  <div class=\"loading\">\n                      <div class=\"loading-spinner\"></div>\n                      <div>Đang tải Real Prismarine 3D Viewer...</div>\n                      <div style=\"font-size: 0.8rem; opacity: 0.7; margin-top: 10px;\">\n                          Đang kết nối với thế giới Minecraft 3D...\n                      </div>\n                  </div>\n              </div>\n\n              <button class=\"toggle-sidebar\" onclick=\"toggleSidebar()\">\n                  <span id=\"toggleIcon\">◀</span>\n              </button>\n\n              <div class=\"sidebar\" id=\"sidebar\">\n                  <div class=\"info-card\">\n                      <h3>📍 Vị trí Bot</h3>\n                      <div class=\"info-row\">\n                          <span>X:</span>\n                          <span id=\"posX\">--</span>\n                      </div>\n                      <div class=\"info-row\">\n                          <span>Y:</span>\n                          <span id=\"posY\">--</span>\n                      </div>\n                      <div class=\"info-row\">\n                          <span>Z:</span>\n                          <span id=\"posZ\">--</span>\n                      </div>\n                  </div>\n\n                  <div class=\"info-card\">\n                      <h3>⚔️ Trạng thái</h3>\n                      <div class=\"info-row\">\n                          <span>Chế độ:</span>\n                          <span id=\"mode\">--</span>\n                      </div>\n                      <div class=\"info-row\">\n                          <span>Hoạt động:</span>\n                          <span id=\"currentAction\">--</span>\n                      </div>\n                  </div>\n\n                  <div class=\"info-card\">\n                      <h3>🎒 Trang bị</h3>\n                      <div class=\"info-row\">\n                          <span>Vũ khí:</span>\n                          <span id=\"weapon\">--</span>\n                      </div>\n                      <div class=\"info-row\">\n                          <span>Giáp:</span>\n                          <span id=\"armor\">--</span>\n                      </div>\n                  </div>\n\n                  <div class=\"info-card\">\n                      <h3>👥 Gần đây</h3>\n                      <div id=\"nearbyEntities\">\n                          Không có entity gần\n                      </div>\n                  </div>\n              </div>\n          </div>\n\n          <script>\n              let viewerUrl = null;\n              let sidebarHidden = false;\n\n              // Kiểm tra viewer URL và tải iframe\n              async function loadViewer() {\n                  try {\n                      // First try to get viewer URL from API\n                      const response = await fetch('/api/bot-viewer-urls');\n                      const viewerUrls = await response.json();\n\n                      if (viewerUrls.botlolicute && viewerUrls.botlolicute.status === 'active') {\n                          viewerUrl = viewerUrls.botlolicute.url;\n                      } else {\n                          // Fallback to direct port 3004 connection\n                          viewerUrl = window.location.protocol + '//' + window.location.hostname + ':3004';\n                      }\n\n                      // Test if viewer is accessible\n                      const testResponse = await fetch(viewerUrl + '/health').catch(() => null);\n\n                      if (testResponse && testResponse.ok) {\n                          document.getElementById('viewerContent').innerHTML = \n                              '<iframe class=\"viewer-iframe\" src=\"' + viewerUrl + '\" title=\"Real Minecraft 3D Viewer\"></iframe>';\n\n                          document.getElementById('connectionStatus').innerHTML = '🟢 3D Viewer kết nối';\n                          console.log('✅ Đã tải real prismarine-viewer:', viewerUrl);\n                      } else {\n                          throw new Error('Real viewer không phản hồi');\n                      }\n                  } catch (error) {\n                      console.log('❌ Không thể tải real viewer:', error);\n                      document.getElementById('viewerContent').innerHTML = \n                          '<div class=\"error-message\">' +\n                          '<h3>❌ Không thể kết nối Real 3D Viewer</h3>' +\n                          '<p>Bot chưa khởi động hoặc prismarine-viewer chưa sẵn sàng trên port 3004.</p>' +\n                          '<p>Hãy đảm bảo bot đã kết nối server Minecraft thành công.</p>' +\n                          '<button class=\"btn primary\" onclick=\"loadViewer()\">🔄 Thử lại</button>' +\n                          '</div>';\n\n                      document.getElementById('connectionStatus').innerHTML = '🔴 Mất kết nối';\n                  }\n              }\n\n              // Cập nhật thông tin bot\n              async function updateBotInfo() {\n                  try {\n                      const response = await fetch('/api/bots/default-bot-1/screen');\n                      const bot = await response.json();\n\n                      if (bot && bot.connected) {\n                          const pos = bot.position || { x: 0, y: 64, z: 0 };\n\n                          document.getElementById('healthStatus').textContent = '❤️ ' + (bot.health || 0) + '/20';\n                          document.getElementById('foodStatus').textContent = '🍞 ' + (bot.food || 0) + '/20';\n\n                          document.getElementById('posX').textContent = Math.floor(pos.x);\n                          document.getElementById('posY').textContent = Math.floor(pos.y);\n                          document.getElementById('posZ').textContent = Math.floor(pos.z);\n\n                          document.getElementById('mode').textContent = bot.mode || 'online';\n                          document.getElementById('currentAction').textContent = bot.currentAction || 'Không hoạt động';\n\n                          const equipment = bot.equipment || {};\n                          document.getElementById('weapon').textContent = equipment.weapon || 'Tay không';\n                          document.getElementById('armor').textContent = '0/4';\n\n                          // Cập nhật entities gần\n                          const nearbyDiv = document.getElementById('nearbyEntities');\n                          const entities = bot.nearbyEntities || [];\n                          if (entities.length > 0) {\n                              nearbyDiv.innerHTML = entities.slice(0, 5).map(entity => \n                                  '<div class=\"info-row\"><span>' + entity.type + '</span><span>' + entity.distance + 'm</span></div>'\n                              ).join('');\n                          } else {\n                              nearbyDiv.textContent = 'Không có entity gần';\n                          }\n                      }\n                  } catch (error) {\n                      console.log('Không thể cập nhật thông tin bot:', error);\n                  }\n              }\n\n              // Control functions\n              function refreshViewer() {\n                  loadViewer();\n              }\n\n              function openFullscreen() {\n                  if (viewerUrl) {\n                      window.open(viewerUrl, '_blank');\n                  }\n              }\n\n              function goBack() {\n                  window.history.back();\n              }\n\n              function toggleSidebar() {\n                  const sidebar = document.getElementById('sidebar');\n                  const toggleIcon = document.getElementById('toggleIcon');\n\n                  sidebarHidden = !sidebarHidden;\n\n                  if (sidebarHidden) {\n                      sidebar.classList.add('hidden');\n                      toggleIcon.textContent = '▶';\n                  } else {\n                      sidebar.classList.remove('hidden');\n                      toggleIcon.textContent = '◀';\n                  }\n              }\n\n              // Initialize\n              loadViewer();\n              updateBotInfo();\n\n              // Auto refresh\n              setInterval(loadViewer, 30000); // Check viewer every 30s\n              setInterval(updateBotInfo, 5000); // Update bot info every 5s\n\n              console.log('🎮 Xem Bot - botlolicute 3D Viewer đã sẵn sàng!');\n          </script>\n      </body>\n      </html>\n    `);\n  });\n\n  // Bot Viewer integrated route - matching the new design from image 1\n  app.get(\"/bot-view\", (req, res) => {\n    res.send(`\n      <!DOCTYPE html>\n      <html lang=\"vi\">\n      <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>🎮 Bot View - botlolicute</title>\n          <style>\n              body {\n                  margin: 0;\n                  padding: 15px;\n                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                  color: white;\n                  min-height: 100vh;\n              }\n              .container {\n                  max-width: 400px;\n                  margin: 0 auto;\n                  padding: 0;\n              }\n\n              /* Header card with bot icon and main status */\n              .header-card {\n                  background: rgba(255,255,255,0.15);\n                  border-radius: 15px;\n                  padding: 25px;\n                  text-align: center;\n                  margin-bottom: 15px;\n                  backdrop-filter: blur(10px);\n                  box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);\n              }\n              .bot-icon {\n                  font-size: 3rem;\n                  margin-bottom: 10px;\n                  display: block;\n              }\n              .bot-title {\n                  font-size: 1.1rem;\n                  margin-bottom: 5px;\n                  opacity: 0.9;\n              }\n              .main-status {\n                  font-size: 1.3rem;\n                  font-weight: bold;\n                  color: #FFD700;\n                  word-break: break-all;\n                  line-height: 1.2;\n              }\n\n              /* Individual status cards */\n              .status-card {\n                  background: rgba(255,255,255,0.15);\n                  border-radius: 15px;\n                  padding: 20px;\n                  text-align: center;\n                  margin-bottom: 15px;\n                  backdrop-filter: blur(10px);\n                  box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);\n              }\n              .status-icon {\n                  font-size: 2rem;\n                  margin-bottom: 10px;\n                  display: block;\n              }\n              .status-label {\n                  font-size: 1rem;\n                  margin-bottom: 8px;\n                  opacity: 0.9;\n              }\n              .status-value {\n                  font-size: 1.4rem;\n                  font-weight: bold;\n                  color: #FFD700;\n              }\n\n              /* Equipment section */\n              .equipment-card {\n                  background: rgba(255,255,255,0.9);\n                  border-radius: 15px;\n                  padding: 20px;\n                  margin-bottom: 15px;\n                  box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);\n              }\n              .equipment-title {\n                  color: #333;\n                  font-size: 1.1rem;\n                  font-weight: bold;\n                  margin-bottom: 15px;\n                  text-align: center;\n              }\n              .equipment-subtitle {\n                  color: #666;\n                  font-size: 0.9rem;\n                  margin-bottom: 10px;\n                  text-align: left;\n              }\n              .equipment-slot {\n                  background: #f0f0f0;\n                  padding: 8px 12px;\n                  border-radius: 8px;\n                  margin-bottom: 8px;\n                  border-left: 4px solid #4CAF50;\n                  display: flex;\n                  justify-content: space-between;\n                  align-items: center;\n              }\n              .slot-label {\n                  font-weight: 500;\n                  color: #333;\n              }\n              .slot-value {\n                  color: #666;\n                  font-size: 0.9rem;\n              }\n          </style>\n      </head>\n      <body>\n          <div class=\"container\">\n              <!-- Main status card with bot icon -->\n              <div class=\"header-card\">\n                  <span class=\"bot-icon\">🤖</span>\n                  <div class=\"bot-title\">Bot Status</div>\n                  <div class=\"main-status\" id=\"mainStatus\">Tọa độ: -5118, 111, 4693 | HP: 20/20 | Đồ ăn: 20/20</div>\n              </div>\n\n              <!-- Position card -->\n              <div class=\"status-card\">\n                  <span class=\"status-icon\">📍</span>\n                  <div class=\"status-label\">Vị trí</div>\n                  <div class=\"status-value\" id=\"position\">-5118, 111, 4693</div>\n              </div>\n\n              <!-- Health card -->\n              <div class=\"status-card\">\n                  <span class=\"status-icon\">❤️</span>\n                  <div class=\"status-label\">Máu</div>\n                  <div class=\"status-value\" id=\"health\">20/20</div>\n              </div>\n\n              <!-- Food card -->\n              <div class=\"status-card\">\n                  <span class=\"status-icon\">🍞</span>\n                  <div class=\"status-label\">Đồ ăn</div>\n                  <div class=\"status-value\" id=\"food\">20/20</div>\n              </div>\n\n              <!-- Equipment section -->\n              <div class=\"equipment-card\">\n                  <div class=\"equipment-title\">🎒 Túi đồ & Trang bị (Cập nhật mỗi 5s)</div>\n\n                  <div class=\"equipment-subtitle\">⚔️ Trang bị hiện tại:</div>\n                  <div class=\"equipment-slot\">\n                      <span class=\"slot-label\">Vũ khí</span>\n                      <span class=\"slot-value\" id=\"weapon\">Tay không</span>\n                  </div>\n                  <div class=\"equipment-slot\">\n                      <span class=\"slot-label\">Giáp</span>\n                      <span class=\"slot-value\" id=\"armor\">0/4</span>\n                  </div>\n              </div>\n          </div>\n\n          <script>\n              // Fetch bot status and update display\n              async function updateBotStatus() {\n                  try {\n                      const response = await fetch('/api/bots/default-bot-1/screen');\n                      const bot = await response.json();\n\n                      if (bot && bot.connected) {\n                          const pos = bot.position || { x: 0, y: 64, z: 0 };\n                          const positionText = Math.floor(pos.x) + ', ' + Math.floor(pos.y) + ', ' + Math.floor(pos.z);\n                          const healthText = (bot.health || 0) + '/20';\n                          const foodText = (bot.food || 0) + '/20';\n\n                          // Update main status\n                          document.getElementById('mainStatus').textContent = 'Tọa độ: ' + positionText + ' | HP: ' + healthText + ' | Đồ ăn: ' + foodText;\n\n                          // Update individual cards\n                          document.getElementById('position').textContent = positionText;\n                          document.getElementById('health').textContent = healthText;\n                          document.getElementById('food').textContent = foodText;\n\n                          // Update equipment\n                          const equipment = bot.equipment || {};\n                          document.getElementById('weapon').textContent = equipment.weapon || 'Tay không';\n                          document.getElementById('armor').textContent = '0/4';\n                      } else {\n                          // Offline state\n                          document.getElementById('mainStatus').textContent = 'Bot không kết nối - Đang thử kết nối lại...';\n                          document.getElementById('position').textContent = 'Không xác định';\n                          document.getElementById('health').textContent = 'N/A';\n                          document.getElementById('food').textContent = 'N/A';\n                          document.getElementById('weapon').textContent = 'Offline';\n                          document.getElementById('armor').textContent = 'N/A';\n                      }\n                  } catch (error) {\n                      console.log('Không thể tải thông tin bot:', error);\n                      document.getElementById('mainStatus').textContent = 'Lỗi kết nối - Thử lại sau...';\n                  }\n              }\n\n              // Update every 5 seconds\n              updateBotStatus();\n              setInterval(updateBotStatus, 5000);\n\n              console.log('✅ Bot View với thiết kế mới đã sẵn sàng!');\n          </script>\n      </body>\n      </html>\n    `);\n  });\n\n  // Bot management routes\n  app.get(\"/api/bots\", async (req, res) => {\n    try {\n      const bots = await storage.getBots();\n      res.json(bots);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bots\" });\n    }\n  });\n\n  app.post(\"/api/bots\", async (req, res) => {\n    try {\n      const validatedData = insertBotSchema.parse(req.body);\n      const bot = await storage.createBot(validatedData);\n      res.status(201).json(bot);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        res.status(400).json({ error: \"Invalid bot data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create bot\" });\n      }\n    }\n  });\n\n  app.post(\"/api/bots/:id/start\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await botManager.startBot(id);\n\n      if (success) {\n        res.json({ message: \"Bot started successfully\" });\n      } else {\n        res.status(500).json({ error: \"Failed to start bot\" });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to start bot\" });\n    }\n  });\n\n  app.post(\"/api/bots/:id/stop\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await botManager.stopBot(id);\n\n      if (success) {\n        res.json({ message: \"Bot stopped successfully\" });\n      } else {\n        res.status(500).json({ error: \"Failed to stop bot\" });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to stop bot\" });\n    }\n  });\n\n  app.put(\"/api/bots/:id/config\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedConfig = updateBotConfigSchema.parse(req.body);\n\n      const success = await botManager.updateBotConfig(id, validatedConfig);\n\n      if (success) {\n        const updatedBot = await storage.getBot(id);\n        res.json(updatedBot);\n      } else {\n        res.status(500).json({ error: \"Failed to update bot configuration\" });\n      }\n    } catch (error) {\n      if (error instanceof ZodError) {\n        res.status(400).json({ error: \"Invalid configuration data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to update bot configuration\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/bots/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // Stop bot if running\n      await botManager.stopBot(id);\n\n      // Delete from storage\n      const success = await storage.deleteBot(id);\n\n      if (success) {\n        res.json({ message: \"Bot deleted successfully\" });\n      } else {\n        res.status(404).json({ error: \"Bot not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete bot\" });\n    }\n  });\n\n  app.get(\"/api/bots/:id/status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const status = botManager.getBotStatus(id);\n      res.json(status);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get bot status\" });\n    }\n  });\n\n  // API endpoint để sync bot status từ botlolicute.ts\n  app.post(\"/api/bots/:id/sync-status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, lastSeen, username, server } = req.body;\n\n      const updateData: any = {\n        status: status,\n        lastSeen: lastSeen ? new Date(lastSeen) : new Date()\n      };\n\n      // Cập nhật username nếu được cung cấp\n      if (username) {\n        updateData.username = username;\n        console.log(`🔄 Cập nhật tên bot trong storage: ${username}`);\n      }\n\n      // Cập nhật server nếu được cung cấp\n      if (server) {\n        updateData.server = server;\n        console.log(`🔄 Cập nhật server trong storage: ${server}`);\n      }\n\n      const updatedBot = await storage.updateBot(id, updateData);\n\n      if (updatedBot) {\n        res.json({ success: true, message: \"Bot status synced successfully\" });\n      } else {\n        res.status(404).json({ error: \"Bot not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error syncing bot status:\", error);\n      res.status(500).json({ error: \"Failed to sync bot status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Create WebSocket server for real-time console\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  // Store connected WebSocket clients\n  const clients = new Set<WebSocket>();\n\n  wss.on('connection', (ws) => {\n    console.log('New WebSocket client connected');\n    clients.add(ws);\n\n    // Send initial welcome message\n    ws.send(JSON.stringify({\n      type: 'welcome',\n      message: '🎮 Chào mừng đến với bot loli! 💕',\n      timestamp: new Date().toISOString()\n    }));\n\n    // Handle client messages\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n\n        if (message.type === 'command' && message.botId) {\n          // Execute bot commands via console\n          handleConsoleCommand(message.botId, message.command);\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    // Remove client on disconnect\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n      clients.delete(ws);\n    });\n\n    // Handle WebSocket errors\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      clients.delete(ws);\n    });\n  });\n\n  // Function to broadcast console messages to all connected clients\n  const broadcastConsoleMessage = (message: any) => {\n    const data = JSON.stringify({\n      type: 'console',\n      ...message,\n      timestamp: new Date().toISOString()\n    });\n\n    clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(data);\n      }\n    });\n  };\n\n  // Global function để broadcast logs từ botmineflayer.ts\n  (global as any).broadcastToWebConsole = (botId: string, level: string, message: string, source: string) => {\n    broadcastConsoleMessage({\n      botId,\n      level,\n      message,\n      source\n    });\n  };\n\n  // Setup shared logger để capture logs từ external processes\n  sharedLogger.setBroadcastFunction((message: any) => {\n    broadcastConsoleMessage(message);\n  });\n\n  // Capture console.log và stream vào web console\n  const originalConsoleLog = console.log;\n  const originalConsoleError = console.error;\n  const originalConsoleWarn = console.warn;\n\n  console.log = (...args: any[]) => {\n    originalConsoleLog(...args);\n    const message = args.map(arg => \n      typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n    ).join(' ');\n\n    // Stream những log quan trọng, bỏ qua express system logs\n    if (!message.includes('[express]') && \n        !message.includes('WebSocket') && \n        !message.includes('connected') &&\n        !message.includes('disconnected') &&\n        message.trim()) {\n\n      // Phân loại log dựa trên nội dung\n      let source = 'console';\n      let level = 'info';\n      let botId = 'system';\n\n      if (message.includes('🚀') || message.includes('Bot')) {\n        source = 'bot';\n        level = 'success';\n        botId = 'bot-main';\n      } else if (message.includes('🔴') || message.includes('Error')) {\n        level = 'error';\n      } else if (message.includes('⚠️') || message.includes('Warning')) {\n        level = 'warning';\n      } else if (message.includes('✅') || message.includes('success')) {\n        level = 'success';\n        source = 'bot';\n      } else if (message.includes('Status:')) {\n        source = 'bot';\n        level = 'info';\n        botId = 'bot-status';\n      }\n\n      broadcastConsoleMessage({\n        botId,\n        level,\n        message: message,\n        source\n      });\n    }\n  };\n\n  console.error = (...args: any[]) => {\n    originalConsoleError(...args);\n    const message = args.map(arg => \n      typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n    ).join(' ');\n\n    if (message.trim() && !message.includes('WebSocket')) {\n      broadcastConsoleMessage({\n        botId: 'system',\n        level: 'error',\n        message: message,\n        source: 'console'\n      });\n    }\n  };\n\n  console.warn = (...args: any[]) => {\n    originalConsoleWarn(...args);\n    const message = args.map(arg => \n      typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n    ).join(' ');\n\n    if (message.trim() && !message.includes('WebSocket')) {\n      broadcastConsoleMessage({\n        botId: 'system',\n        level: 'warning',\n        message: message,\n        source: 'console'\n      });\n    }\n  };\n\n  // Function to handle console commands\n  const handleConsoleCommand = async (botId: string, command: string) => {\n    try {\n      broadcastConsoleMessage({\n        botId,\n        level: 'info',\n        message: `> ${command}`,\n        source: 'user'\n      });\n\n      // Execute command based on type\n      if (command.startsWith('/start')) {\n        await botManager.startBot(botId);\n        broadcastConsoleMessage({\n          botId,\n          level: 'success',\n          message: 'Bot đang khởi động...',\n          source: 'system'\n        });\n      } else if (command.startsWith('/stop')) {\n        await botManager.stopBot(botId);\n        broadcastConsoleMessage({\n          botId,\n          level: 'success',\n          message: 'Bot đã dừng.',\n          source: 'system'\n        });\n      } else if (command.startsWith('/status')) {\n        const status = botManager.getBotStatus(botId);\n        broadcastConsoleMessage({\n          botId,\n          level: 'info',\n          message: `Trạng thái bot: ${status?.status || 'unknown'}`,\n          source: 'system'\n        });\n      } else if (command.startsWith('/say ')) {\n        const message = command.substring(5);\n        // Send chat message through bot\n        const success = botManager.sendBotMessage(botId, message);\n        if (success) {\n          broadcastConsoleMessage({\n            botId,\n            level: 'success',\n            message: `Bot nói: ${message}`,\n            source: 'chat'\n          });\n        } else {\n          broadcastConsoleMessage({\n            botId,\n            level: 'error',\n            message: 'Không thể gửi tin nhắn. Bot có thể chưa kết nối.',\n            source: 'system'\n          });\n        }\n      } else {\n        broadcastConsoleMessage({\n          botId,\n          level: 'warning',\n          message: 'Lệnh không hợp lệ. Sử dụng: /start, /stop, /status, /say <message>',\n          source: 'system'\n        });\n      }\n    } catch (error) {\n      broadcastConsoleMessage({\n        botId,\n        level: 'error',\n        message: `Lỗi thực thi lệnh: ${error}`,\n        source: 'system'\n      });\n    }\n  };\n\n  // Export broadcast function for use in other modules\n  (global as any).broadcastConsoleMessage = broadcastConsoleMessage;\n\n  return httpServer;\n}","size_bytes":45569},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"backup/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/BotScreen.tsx":{"content":"\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Monitor, Heart, Utensils, MapPin, Sword, Shield, RefreshCw } from \"lucide-react\";\n\ninterface BotScreenData {\n  connected: boolean;\n  health: number;\n  food: number;\n  position: { x: number; y: number; z: number };\n  mode: string;\n  currentAction: string;\n  nearbyEntities: Array<{ name: string; distance: string }>;\n  inventory: Array<{ name: string; count: number }>;\n  equipment?: {\n    weapon: string | null;\n    armor: Array<string | null>;\n  };\n  targetPlayer?: string | null;\n  status?: string;\n  reconnectAttempts?: number;\n  timestamp: string;\n}\n\ninterface BotScreenProps {\n  botId: string;\n  botName: string;\n}\n\nexport default function BotScreen({ botId, botName }: BotScreenProps) {\n  const [screenData, setScreenData] = useState<BotScreenData | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchScreenData = async () => {\n    if (!botId) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/bots/${botId}/screen`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('📱 Bot screen data received:', {\n          connected: data.connected,\n          health: data.health,\n          food: data.food,\n          hasEquipment: !!data.equipment,\n          inventoryCount: data.inventory?.length || 0\n        });\n        setScreenData(data);\n      } else {\n        console.error('Failed to fetch bot screen:', response.status);\n      }\n    } catch (error) {\n      console.error(\"Error fetching bot screen:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Auto-sync mỗi 5 giây từ botlolicute.ts\n  useEffect(() => {\n    fetchScreenData();\n    \n    const interval = setInterval(fetchScreenData, 5000); // Auto-sync mỗi 5 giây\n    return () => clearInterval(interval);\n  }, [botId]);\n\n  const getModeColor = (mode: string) => {\n    switch (mode) {\n      case 'protecting': return 'bg-red-500';\n      case 'following': return 'bg-blue-500';\n      case 'autofarming': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getModeIcon = (mode: string) => {\n    switch (mode) {\n      case 'protecting': return <Shield size={16} />;\n      case 'following': return <MapPin size={16} />;\n      case 'autofarming': return <Sword size={16} />;\n      default: return <Monitor size={16} />;\n    }\n  };\n\n  if (!screenData) {\n    return (\n      <Card className=\"bg-gradient-to-br from-gray-900 to-black border-pink-300/20\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Monitor className=\"mr-2 text-pink-400\" size={20} />\n            🖥️ Bot Screen: {botName}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center py-8\">\n          <div className=\"text-gray-400\">\n            {isLoading ? \"Đang tải...\" : \"Chọn bot để xem màn hình\"}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div \n      className=\"min-h-screen p-4\"\n      style={{\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n      }}\n    >\n      <div className=\"max-w-md mx-auto space-y-4\">\n        {/* Header card with bot icon and main status */}\n        <div className=\"bg-white/15 backdrop-blur-md rounded-2xl p-6 text-center shadow-xl border border-white/10\">\n          <div className=\"text-4xl mb-3\">🤖</div>\n          <div className=\"text-white/90 text-base mb-2\">Bot Status</div>\n          <div className=\"text-yellow-300 text-lg font-bold leading-tight\">\n            Tọa độ: {Math.floor(screenData.position.x)}, {Math.floor(screenData.position.y)}, {Math.floor(screenData.position.z)} | HP: {screenData.health}/20 | Đồ ăn: {screenData.food}/20\n          </div>\n        </div>\n\n        {/* Position card */}\n        <div className=\"bg-white/15 backdrop-blur-md rounded-2xl p-6 text-center shadow-xl border border-white/10\">\n          <div className=\"text-3xl mb-3\">📍</div>\n          <div className=\"text-white/90 text-base mb-2\">Vị trí</div>\n          <div className=\"text-yellow-300 text-xl font-bold\">\n            {Math.floor(screenData.position.x)}, {Math.floor(screenData.position.y)}, {Math.floor(screenData.position.z)}\n          </div>\n        </div>\n\n        {/* Health card */}\n        <div className=\"bg-white/15 backdrop-blur-md rounded-2xl p-6 text-center shadow-xl border border-white/10\">\n          <div className=\"text-3xl mb-3\">❤️</div>\n          <div className=\"text-white/90 text-base mb-2\">Máu</div>\n          <div className=\"text-yellow-300 text-xl font-bold\">\n            {screenData.health}/20\n          </div>\n        </div>\n\n        {/* Food card */}\n        <div className=\"bg-white/15 backdrop-blur-md rounded-2xl p-6 text-center shadow-xl border border-white/10\">\n          <div className=\"text-3xl mb-3\">🍞</div>\n          <div className=\"text-white/90 text-base mb-2\">Đồ ăn</div>\n          <div className=\"text-yellow-300 text-xl font-bold\">\n            {screenData.food}/20\n          </div>\n        </div>\n\n        {/* Equipment section */}\n        <div className=\"bg-white/90 backdrop-blur-md rounded-2xl p-5 shadow-xl border border-white/10\">\n          <div className=\"text-gray-800 text-lg font-bold mb-4 text-center flex items-center justify-center\">\n            🎒 Túi đồ & Trang bị (Cập nhật mỗi 5s)\n            <button \n              onClick={() => window.open('/bot-view', 'botview', 'width=400,height=600,scrollbars=yes')}\n              className=\"ml-3 px-3 py-1 bg-blue-500 text-white text-xs rounded-lg hover:bg-blue-600 transition-colors\"\n            >\n              👁️ Xem ảnh\n            </button>\n          </div>\n          \n          <div className=\"text-gray-700 text-sm mb-3 font-medium\">\n            ⚔️ Trang bị hiện tại:\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"bg-gray-100 p-2 rounded-lg border-l-4 border-green-500 flex justify-between items-center\">\n              <span className=\"font-medium text-gray-800 text-sm\">Tay phải</span>\n              <span className=\"text-gray-600 text-xs font-semibold\">\n                {screenData.equipment?.hand || 'Trống'}\n              </span>\n            </div>\n            <div className=\"bg-gray-100 p-2 rounded-lg border-l-4 border-green-500 flex justify-between items-center\">\n              <span className=\"font-medium text-gray-800 text-sm\">Tay trái</span>\n              <span className=\"text-gray-600 text-xs font-semibold\">\n                {screenData.equipment?.offhand || 'Trống'}\n              </span>\n            </div>\n            <div className=\"bg-gray-100 p-2 rounded-lg border-l-4 border-blue-500 flex justify-between items-center\">\n              <span className=\"font-medium text-gray-800 text-sm\">Mũ</span>\n              <span className=\"text-gray-600 text-xs font-semibold\">\n                {screenData.equipment?.helmet || 'Trống'}\n              </span>\n            </div>\n            <div className=\"bg-gray-100 p-2 rounded-lg border-l-4 border-blue-500 flex justify-between items-center\">\n              <span className=\"font-medium text-gray-800 text-sm\">Áo</span>\n              <span className=\"text-gray-600 text-xs font-semibold\">\n                {screenData.equipment?.chestplate || 'Trống'}\n              </span>\n            </div>\n            <div className=\"bg-gray-100 p-2 rounded-lg border-l-4 border-blue-500 flex justify-between items-center\">\n              <span className=\"font-medium text-gray-800 text-sm\">Quần</span>\n              <span className=\"text-gray-600 text-xs font-semibold\">\n                {screenData.equipment?.leggings || 'Trống'}\n              </span>\n            </div>\n            <div className=\"bg-gray-100 p-2 rounded-lg border-l-4 border-blue-500 flex justify-between items-center\">\n              <span className=\"font-medium text-gray-800 text-sm\">Giày</span>\n              <span className=\"text-gray-600 text-xs font-semibold\">\n                {screenData.equipment?.boots || 'Trống'}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"text-gray-700 text-sm mb-2 mt-4 font-medium\">\n            📦 Túi đồ ({screenData.inventory?.length || 0} items):\n          </div>\n          <div className=\"max-h-32 overflow-y-auto bg-gray-50 rounded-lg p-2\">\n            {screenData.inventory && screenData.inventory.length > 0 ? (\n              <div className=\"space-y-1\">\n                {screenData.inventory.map((item: any, index: number) => (\n                  <div key={index} className=\"flex justify-between items-center text-xs bg-white rounded px-2 py-1\">\n                    <span className=\"font-medium text-gray-700\">{item.displayName || item.name}</span>\n                    <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs\">\n                      {item.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center text-gray-500 text-xs py-2\">Túi đồ trống</div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9398},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/contact-section.tsx":{"content":"import { useState } from \"react\";\nimport { Mail, Phone, MapPin } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Simulate form submission\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll get back to you as soon as possible.\",\n      });\n      \n      setFormData({ name: \"\", email: \"\", message: \"\" });\n    } catch (error) {\n      toast({\n        title: \"Error sending message\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const contactInfo = [\n    {\n      icon: <Mail className=\"w-6 h-6 text-primary-600\" />,\n      label: \"Email\",\n      value: \"hello@mindz.com\",\n      bgColor: \"bg-primary-100\"\n    },\n    {\n      icon: <Phone className=\"w-6 h-6 text-primary-600\" />,\n      label: \"Phone\",\n      value: \"+1 (555) 123-4567\",\n      bgColor: \"bg-primary-100\"\n    },\n    {\n      icon: <MapPin className=\"w-6 h-6 text-primary-600\" />,\n      label: \"Address\",\n      value: \"123 Design Street, Tech City\",\n      bgColor: \"bg-primary-100\"\n    }\n  ];\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-4\" data-testid=\"contact-title\">Get In Touch</h2>\n          <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\" data-testid=\"contact-description\">\n            Ready to start your project? Let's discuss how we can help bring your vision to life.\n          </p>\n        </div>\n        \n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-12\">\n            {/* Contact Info */}\n            <div>\n              <h3 className=\"text-2xl font-semibold text-slate-800 mb-6\" data-testid=\"contact-info-title\">Contact Information</h3>\n              <div className=\"space-y-6\">\n                {contactInfo.map((info, index) => (\n                  <div key={index} className=\"flex items-center\" data-testid={`contact-info-${index}`}>\n                    <div className={`w-12 h-12 ${info.bgColor} rounded-lg flex items-center justify-center mr-4`}>\n                      {info.icon}\n                    </div>\n                    <div>\n                      <p className=\"text-slate-600 text-sm\">{info.label}</p>\n                      <p className=\"text-slate-800 font-medium\" data-testid={`contact-${info.label.toLowerCase()}`}>{info.value}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            {/* Contact Form */}\n            <div>\n              <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"contact-form\">\n                <div>\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium text-slate-700 mb-2\">Name</label>\n                  <input \n                    type=\"text\" \n                    id=\"name\" \n                    name=\"name\" \n                    value={formData.name}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors duration-300\" \n                    placeholder=\"Your name\"\n                    required\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                \n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-700 mb-2\">Email</label>\n                  <input \n                    type=\"email\" \n                    id=\"email\" \n                    name=\"email\" \n                    value={formData.email}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors duration-300\" \n                    placeholder=\"your@email.com\"\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                \n                <div>\n                  <label htmlFor=\"message\" className=\"block text-sm font-medium text-slate-700 mb-2\">Message</label>\n                  <textarea \n                    id=\"message\" \n                    name=\"message\" \n                    rows={4}\n                    value={formData.message}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors duration-300\" \n                    placeholder=\"Tell us about your project...\"\n                    required\n                    data-testid=\"textarea-message\"\n                  />\n                </div>\n                \n                <button \n                  type=\"submit\" \n                  disabled={isSubmitting}\n                  className=\"w-full bg-primary-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-primary-700 transition-colors duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\n                  data-testid=\"button-submit\"\n                >\n                  {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6237},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"backup/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"backup/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"Embe/types.ts":{"content":"// Bot Types và Interfaces\nexport interface BotConfig {\n  host: string\n  port: number\n  username: string\n  version: string\n  auth: 'microsoft' | 'offline'\n  skinUrl?: string\n  capeUrl?: string\n}\n\nexport interface BotState {\n  targetPlayer: any\n  isFollowing: boolean\n  isProtecting: boolean\n  autoFarmActive: boolean\n  autoFishingActive: boolean\n  autoMiningActive: boolean\n  autoChestActive: boolean\n  autoBuildActive: boolean\n  isEating: boolean\n  isCurrentlyDigging: boolean\n  itemCollectionDisabled: boolean\n  autoItemCollectionDisabled: boolean\n  autoEquipDisabled: boolean\n}\n\nexport interface MiningState {\n  targetOreType: string\n  currentMiningTarget: any\n  lastMinedPosition: any\n  searchDepthLevel: number\n  explorationHistory: Array<{x: number, y: number, z: number}>\n  consecutiveFailedSearches: number\n  netheriteFoundCount: number\n  lastNetheriteFoundTime: number\n}\n\nexport interface FishingState {\n  isFishing: boolean\n  currentHook: any\n  fishingStartTime: number\n  hasFishBitten: boolean\n  lastHookPosition: any\n  bobberThrowCount: number\n}\n\nexport interface ChestState {\n  currentChestTarget: any\n  foundChestHistory: Set<string>\n  chestSearchDepthLevel: number\n  chestExplorationHistory: Array<{x: number, y: number, z: number}>\n  consecutiveFailedChestSearches: number\n}\n\nexport interface BuildState {\n  currentBuildProject: any\n  buildProgress: number\n}\n\nexport interface RespawnState {\n  lastMode: string\n  lastPosition: any\n  lastTargetPlayerName: string\n  hasTpPermission: boolean | null\n  tpFailCount: number\n}","size_bytes":1536},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"backup/server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"client/src/components/services-section.tsx":{"content":"import { Code, Brush, Search, TrendingUp, Shield, Headphones, ArrowRight } from \"lucide-react\";\n\nexport default function ServicesSection() {\n  const services = [\n    {\n      icon: <Code className=\"w-8 h-8 text-blue-600\" />,\n      title: \"Web Development\",\n      description: \"Custom web applications built with modern technologies and best practices for optimal performance.\",\n      bgColor: \"bg-blue-100\"\n    },\n    {\n      icon: <Brush className=\"w-8 h-8 text-emerald-600\" />,\n      title: \"UI/UX Design\",\n      description: \"User-centered design solutions that prioritize usability while maintaining visual excellence.\",\n      bgColor: \"bg-emerald-100\"\n    },\n    {\n      icon: <Search className=\"w-8 h-8 text-purple-600\" />,\n      title: \"SEO Optimization\",\n      description: \"Strategic optimization to improve your website's visibility and search engine rankings.\",\n      bgColor: \"bg-purple-100\"\n    },\n    {\n      icon: <TrendingUp className=\"w-8 h-8 text-orange-600\" />,\n      title: \"Performance Optimization\",\n      description: \"Speed and performance enhancements to ensure the best user experience and faster load times.\",\n      bgColor: \"bg-orange-100\"\n    },\n    {\n      icon: <Shield className=\"w-8 h-8 text-red-600\" />,\n      title: \"Security & Maintenance\",\n      description: \"Ongoing security monitoring and maintenance to keep your website safe and up-to-date.\",\n      bgColor: \"bg-red-100\"\n    },\n    {\n      icon: <Headphones className=\"w-8 h-8 text-indigo-600\" />,\n      title: \"24/7 Support\",\n      description: \"Round-the-clock technical support to ensure your website runs smoothly at all times.\",\n      bgColor: \"bg-indigo-100\"\n    }\n  ];\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-4\" data-testid=\"services-title\">Our Services</h2>\n          <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\" data-testid=\"services-description\">\n            Comprehensive solutions for your digital presence, from concept to deployment.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {services.map((service, index) => (\n            <div \n              key={index}\n              className=\"bg-white p-8 rounded-xl shadow-sm hover:shadow-lg transition-shadow duration-300\"\n              data-testid={`service-card-${index}`}\n            >\n              <div className={`w-16 h-16 ${service.bgColor} rounded-xl flex items-center justify-center mb-6`}>\n                {service.icon}\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-800 mb-4\" data-testid={`service-title-${index}`}>\n                {service.title}\n              </h3>\n              <p className=\"text-slate-600 mb-6\" data-testid={`service-description-${index}`}>\n                {service.description}\n              </p>\n              <button className=\"text-primary-600 font-medium hover:text-primary-700 transition-colors duration-300 flex items-center gap-1\" data-testid={`service-link-${index}`}>\n                Learn more <ArrowRight className=\"w-4 h-4\" />\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3358},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const bots = pgTable(\"bots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull(),\n  server: text(\"server\").notNull(),\n  status: text(\"status\").notNull().default(\"offline\"), // online, offline, connecting, error\n  autoReconnect: boolean(\"auto_reconnect\").notNull().default(true),\n  chatEnabled: boolean(\"chat_enabled\").notNull().default(true),\n  movementPattern: text(\"movement_pattern\").notNull().default(\"random\"), // random, follow, stay, custom\n  responseDelay: integer(\"response_delay\").notNull().default(1000),\n  uptime: integer(\"uptime\").notNull().default(0), // in seconds\n  lastSeen: timestamp(\"last_seen\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertBotSchema = createInsertSchema(bots).pick({\n  username: true,\n  server: true,\n  autoReconnect: true,\n  chatEnabled: true,\n  movementPattern: true,\n  responseDelay: true,\n});\n\nexport const updateBotConfigSchema = createInsertSchema(bots).pick({\n  autoReconnect: true,\n  chatEnabled: true,\n  movementPattern: true,\n  responseDelay: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Bot = typeof bots.$inferSelect;\nexport type InsertBot = z.infer<typeof insertBotSchema>;\nexport type UpdateBotConfig = z.infer<typeof updateBotConfigSchema>;\n","size_bytes":1884},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"backup/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"backup/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"backup/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/toaster.tsx":{"content":"\nimport React from \"react\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  // Wrap useToast trong try-catch để handle lỗi gracefully\n  let toasts: any[] = [];\n  \n  try {\n    const toastData = useToast();\n    toasts = toastData.toasts || [];\n  } catch (error) {\n    console.warn('Toast hook error:', error);\n    toasts = [];\n  }\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":1027},"backup/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"backup/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/services/botManager.ts":{"content":"import { Bot } from \"@shared/schema\";\nimport { storage } from \"../storage\";\n// Comment out botlolicute import for now - will be created later\n// import { botManager as minecraftBotManager, MinecraftBot } from \"../botlolicute\";\n\n// Temporary interface for MinecraftBot\ninterface MinecraftBot {\n  disconnect(): void;\n  getStatus(): any;\n  getPosition(): any;\n  sendChat(message: string): void;\n}\n\n// Temporary bot manager implementation  \nconst minecraftBotManager = {\n  async connectBotToServer(botId: string, username: string, callback: Function): Promise<boolean> {\n    console.log(`Connecting bot ${botId} with username ${username}`);\n    return true; // Temporary success\n  },\n  \n  getBot(botId: string): MinecraftBot | null {\n    // Temporary implementation\n    return {\n      disconnect: () => console.log(`Bot ${botId} disconnected`),\n      getStatus: () => ({ connected: true, health: 20, food: 20, uptime: 0 }),\n      getPosition: () => ({ x: 0, y: 64, z: 0 }),\n      sendChat: (message: string) => console.log(`Bot says: ${message}`)\n    };\n  },\n  \n  removeBot(botId: string): void {\n    console.log(`Removed bot ${botId}`);\n  }\n};\n\ninterface BotInstance {\n  minecraftBot: MinecraftBot;\n  startTime: Date;\n  config: {\n    autoReconnect: boolean;\n    chatEnabled: boolean;\n    movementPattern: string;\n    responseDelay: number;\n  };\n}\n\nclass BotManager {\n  private activeBots: Map<string, BotInstance> = new Map();\n  private uptimeIntervals: Map<string, NodeJS.Timeout> = new Map();\n\n  // Helper function to broadcast console messages\n  private broadcastMessage(botId: string, level: string, message: string, source: string) {\n    try {\n      const broadcastFn = (global as any).broadcastConsoleMessage;\n      if (broadcastFn) {\n        broadcastFn({ botId, level, message, source });\n      }\n    } catch (error) {\n      console.error('Error broadcasting message:', error);\n    }\n  }\n\n  async startBot(botId: string): Promise<boolean> {\n    try {\n      const botData = await storage.getBot(botId);\n      if (!botData) {\n        this.broadcastMessage(botId, 'error', 'Bot không tìm thấy trong database', 'system');\n        throw new Error('Bot not found');\n      }\n\n      if (this.activeBots.has(botId)) {\n        this.broadcastMessage(botId, 'warning', 'Bot đã đang chạy rồi', 'system');\n        console.log(`Bot ${botId} is already running`);\n        return true;\n      }\n\n      // Update status to connecting\n      await storage.updateBot(botId, { status: 'connecting' });\n      this.broadcastMessage(botId, 'info', `Đang kết nối bot ${botData.username} đến server...`, 'system');\n\n      // Sử dụng minecraftBotManager để kết nối đến server thuatzai123.aternos.me với console callback\n      const consoleCallback = (botId: string, level: string, message: string, source: string) => {\n        this.broadcastMessage(botId, level, message, source);\n      };\n      const success = await minecraftBotManager.connectBotToServer(botId, botData.username, consoleCallback);\n      \n      if (!success) {\n        await storage.updateBot(botId, { status: 'error' });\n        this.broadcastMessage(botId, 'error', 'Không thể kết nối đến server Minecraft', 'system');\n        return false;\n      }\n\n      const minecraftBot = minecraftBotManager.getBot(botId);\n      if (!minecraftBot) {\n        await storage.updateBot(botId, { status: 'error' });\n        this.broadcastMessage(botId, 'error', 'Lỗi khởi tạo bot instance', 'system');\n        return false;\n      }\n\n      const instance: BotInstance = {\n        minecraftBot,\n        startTime: new Date(),\n        config: {\n          autoReconnect: botData.autoReconnect ?? true,\n          chatEnabled: botData.chatEnabled ?? true,\n          movementPattern: botData.movementPattern ?? \"random\",\n          responseDelay: botData.responseDelay ?? 1000,\n        }\n      };\n\n      // Set up bot status monitoring\n      this.setupBotHandlers(botId, instance);\n\n      this.activeBots.set(botId, instance);\n\n      // Start uptime tracking\n      this.startUptimeTracking(botId);\n\n      const message = `🚀 Bot ${botData.username} đã kết nối thành công!`;\n      console.log(message);\n      this.broadcastMessage(botId, 'success', message, 'system');\n      await storage.updateBot(botId, { status: 'online' });\n\n      return true;\n    } catch (error) {\n      const errorMsg = `Lỗi khởi động bot: ${error}`;\n      console.error(`Failed to start bot ${botId}:`, error);\n      this.broadcastMessage(botId, 'error', errorMsg, 'system');\n      await storage.updateBot(botId, { status: 'error' });\n      return false;\n    }\n  }\n\n  async stopBot(botId: string): Promise<boolean> {\n    try {\n      const instance = this.activeBots.get(botId);\n      if (!instance) {\n        this.broadcastMessage(botId, 'warning', 'Bot không đang chạy', 'system');\n        console.log(`Bot ${botId} is not running`);\n        return true;\n      }\n\n      this.broadcastMessage(botId, 'info', 'Đang dừng bot...', 'system');\n\n      // Gracefully disconnect the bot\n      instance.minecraftBot.disconnect();\n      minecraftBotManager.removeBot(botId);\n      this.activeBots.delete(botId);\n\n      // Stop uptime tracking\n      const uptimeInterval = this.uptimeIntervals.get(botId);\n      if (uptimeInterval) {\n        clearInterval(uptimeInterval);\n        this.uptimeIntervals.delete(botId);\n      }\n\n      // Update status\n      await storage.updateBot(botId, { \n        status: 'offline',\n        lastSeen: new Date()\n      });\n\n      const message = `🔌 Bot đã dừng thành công`;\n      console.log(message);\n      this.broadcastMessage(botId, 'success', message, 'system');\n      return true;\n    } catch (error) {\n      const errorMsg = `Lỗi dừng bot: ${error}`;\n      console.error(`Failed to stop bot ${botId}:`, error);\n      this.broadcastMessage(botId, 'error', errorMsg, 'system');\n      return false;\n    }\n  }\n\n  async updateBotConfig(botId: string, config: any): Promise<boolean> {\n    try {\n      const instance = this.activeBots.get(botId);\n      if (instance) {\n        instance.config = { ...instance.config, ...config };\n        console.log(`Updated config for bot ${botId}:`, config);\n      }\n\n      await storage.updateBotConfig(botId, config);\n      return true;\n    } catch (error) {\n      console.error(`Failed to update bot config ${botId}:`, error);\n      return false;\n    }\n  }\n\n  private setupBotHandlers(botId: string, instance: BotInstance) {\n    // Bot status monitoring - sync với database mỗi 5 giây\n    const statusInterval = setInterval(async () => {\n      try {\n        const minecraftBot = instance.minecraftBot;\n        const status = minecraftBot.getStatus();\n        \n        await storage.updateBot(botId, { \n          status: status.connected ? 'online' : 'offline',\n          uptime: status.uptime\n        });\n      } catch (error) {\n        console.error(`Error updating bot ${botId} status:`, error);\n      }\n    }, 5000);\n\n    // Cleanup khi bot disconnect\n    setTimeout(() => {\n      const checkBot = setInterval(() => {\n        const status = instance.minecraftBot.getStatus();\n        if (!status.connected) {\n          clearInterval(statusInterval);\n          clearInterval(checkBot);\n          this.activeBots.delete(botId);\n          console.log(`🔌 Bot ${botId} disconnected and cleaned up`);\n        }\n      }, 1000);\n    }, 1000);\n  }\n\n  private startUptimeTracking(botId: string) {\n    const interval = setInterval(async () => {\n      const instance = this.activeBots.get(botId);\n      if (instance) {\n        const uptimeSeconds = Math.floor((Date.now() - instance.startTime.getTime()) / 1000);\n        await storage.updateBot(botId, { uptime: uptimeSeconds });\n      } else {\n        // Bot không còn active, dừng tracking\n        clearInterval(interval);\n        this.uptimeIntervals.delete(botId);\n      }\n    }, 60000); // Update every minute\n\n    this.uptimeIntervals.set(botId, interval);\n  }\n\n  // Get bot status for API\n  getBotStatus(botId: string): any {\n    const instance = this.activeBots.get(botId);\n    if (instance) {\n      const status = instance.minecraftBot.getStatus();\n      const position = instance.minecraftBot.getPosition();\n      \n      return {\n        connected: status.connected,\n        health: status.health,\n        food: status.food,\n        uptime: status.uptime,\n        position: position,\n        startTime: instance.startTime\n      };\n    }\n    return null;\n  }\n\n  // Send chat message\n  sendBotMessage(botId: string, message: string): boolean {\n    const instance = this.activeBots.get(botId);\n    if (instance && instance.minecraftBot.getStatus().connected) {\n      instance.minecraftBot.sendChat(message);\n      this.broadcastMessage(botId, 'success', `Bot đã gửi: \"${message}\"`, 'chat');\n      return true;\n    }\n    this.broadcastMessage(botId, 'error', 'Bot chưa kết nối hoặc không tồn tại', 'system');\n    return false;\n  }\n\n  // Get all active bots\n  getActiveBots(): string[] {\n    return Array.from(this.activeBots.keys());\n  }\n}\n\nexport const botManager = new BotManager();","size_bytes":9103},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"backup/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/hero-section.tsx":{"content":"export default function HeroSection() {\n  return (\n    <section id=\"home\" className=\"pt-20 min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-blue-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-6xl md:text-8xl font-bold text-slate-800 mb-6 leading-tight\" data-testid=\"hero-title\">\n            mind<span className=\"text-blue-600\">z</span>\n          </h1>\n          <p className=\"text-xl md:text-2xl text-slate-600 mb-8 font-light leading-relaxed\" data-testid=\"hero-description\">\n            Tạo ra những trải nghiệm web hiện đại, sạch sẽ, truyền cảm hứng và thu hút người dùng với thiết kế chu đáo và chức năng mượt mà.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <button \n              className=\"bg-blue-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5\"\n              data-testid=\"button-get-started\"\n            >\n              Bắt đầu\n            </button>\n            <button \n              className=\"border-2 border-slate-300 text-slate-700 px-8 py-3 rounded-lg font-medium hover:border-blue-600 hover:text-blue-600 transition-colors duration-300\"\n              data-testid=\"button-learn-more\"\n            >\n              Tìm hiểu thêm\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":1598},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"server/prismarine-viewer.ts":{"content":"\nimport express from 'express';\nimport { createServer } from 'http';\nimport { WebSocketServer } from 'ws';\n\nconst app = express();\nconst server = createServer(app);\n\n// Add body parser middleware\napp.use(express.json());\n\n// Add favicon route to support connection testing\napp.get('/favicon.ico', (req, res) => {\n  res.status(200).end();\n});\n\n// Add health check route for connection testing\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', service: 'prismarine-viewer' });\n});\n\n// 3D Minecraft World Viewer - Real-time view through bot's eyes\napp.get('/', (req, res) => {\n  res.send(`\n    <!DOCTYPE html>\n    <html lang=\"vi\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>🎮 Bot Loli Cute - 3D Minecraft World View</title>\n        <style>\n            body {\n                margin: 0;\n                padding: 0;\n                background: #000;\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                color: white;\n                height: 100vh;\n                overflow: hidden;\n            }\n            .header {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                z-index: 1000;\n                background: rgba(0, 0, 0, 0.8);\n                backdrop-filter: blur(10px);\n                padding: 10px 20px;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n            }\n            .header h1 {\n                margin: 0;\n                font-size: 1.5rem;\n                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n            }\n            .header-controls {\n                display: flex;\n                gap: 10px;\n            }\n            .btn {\n                padding: 8px 16px;\n                background: rgba(255, 255, 255, 0.1);\n                color: white;\n                text-decoration: none;\n                border-radius: 20px;\n                font-weight: bold;\n                transition: all 0.3s;\n                backdrop-filter: blur(10px);\n                border: 1px solid rgba(255, 255, 255, 0.2);\n            }\n            .btn:hover {\n                background: rgba(255, 255, 255, 0.2);\n                transform: translateY(-2px);\n            }\n            .viewer-container {\n                position: absolute;\n                top: 60px;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            }\n            .info-box {\n                text-align: center;\n                padding: 40px;\n                background: rgba(0, 0, 0, 0.6);\n                border-radius: 20px;\n                backdrop-filter: blur(10px);\n            }\n            .info-box h2 {\n                margin: 0 0 20px 0;\n                font-size: 2rem;\n            }\n            .info-box p {\n                margin: 10px 0;\n                opacity: 0.9;\n            }\n            .bot-status {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                background: rgba(0, 0, 0, 0.8);\n                backdrop-filter: blur(10px);\n                padding: 15px;\n                border-radius: 10px;\n                border: 1px solid rgba(255, 255, 255, 0.1);\n                font-size: 0.9rem;\n            }\n            .status-online {\n                color: #4CAF50;\n            }\n            .status-offline {\n                color: #ff6b6b;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <h1>🎮 Bot Loli Cute - Minecraft World Viewer</h1>\n            <div class=\"header-controls\">\n                <a href=\"http://localhost:5000\" class=\"btn\" target=\"_blank\">\n                    🤖 Bot Manager\n                </a>\n            </div>\n        </div>\n\n        <div class=\"viewer-container\">\n            <div class=\"info-box\">\n                <h2>📡 3D World Viewer</h2>\n                <p>🔧 Prismarine viewer được khởi tạo qua bot process</p>\n                <p>👁️ Viewer sẽ tự động khởi động khi bot connect vào server</p>\n                <p>🌐 Check console logs để xem viewer URL</p>\n                <div style=\"margin-top: 20px; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 10px;\">\n                    <strong>Status:</strong> <span id=\"viewerStatus\">Đợi bot kết nối...</span>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"bot-status\" id=\"botStatus\">\n            <div>🤖 <span id=\"botName\">botlolicute</span></div>\n            <div>Status: <span id=\"status\" class=\"status-offline\">Loading...</span></div>\n            <div>❤️ HP: <span id=\"health\">-</span></div>\n            <div>🍞 Food: <span id=\"food\">-</span></div>\n            <div>📍 Pos: <span id=\"position\">-</span></div>\n        </div>\n\n        <script>\n            // Fetch bot status từ API\n            async function updateBotStatus() {\n                try {\n                    const response = await fetch('/api/bot-status');\n                    const bot = await response.json();\n\n                    if (bot && bot.status !== 'offline') {\n                        document.getElementById('status').textContent = bot.status || 'Offline';\n                        const pos = bot.position || { x: 0, y: 0, z: 0 };\n                        document.getElementById('position').textContent = Math.floor(pos.x) + ', ' + Math.floor(pos.y) + ', ' + Math.floor(pos.z);\n                        document.getElementById('health').textContent = (bot.health || 0) + '/20';\n                        document.getElementById('food').textContent = (bot.food || 0) + '/20';\n                        document.getElementById('status').className = 'status-online';\n                        document.getElementById('viewerStatus').textContent = 'Bot đang online - Check console logs';\n                    } else {\n                        document.getElementById('status').textContent = 'Offline';\n                        document.getElementById('status').className = 'status-offline';\n                        document.getElementById('position').textContent = '-';\n                        document.getElementById('health').textContent = '-';\n                        document.getElementById('food').textContent = '-';\n                        document.getElementById('viewerStatus').textContent = 'Đợi bot kết nối...';\n                    }\n                } catch (error) {\n                    console.log('Error fetching bot status:', error);\n                    document.getElementById('status').textContent = 'Offline';\n                    document.getElementById('status').className = 'status-offline';\n                }\n            }\n\n            updateBotStatus();\n            setInterval(updateBotStatus, 3000);\n        </script>\n    </body>\n    </html>\n  `);\n});\n\n// Global variable để lưu bot status data từ bot process\nlet cachedBotStatus = {\n  connected: false,\n  status: 'offline',\n  position: { x: 0, y: 64, z: 0 },\n  health: 0,\n  food: 0,\n  inventory: { items: [], equipment: {}, totalItems: 0 }\n};\n\n// API endpoint để nhận real-time bot data từ bot process\napp.post('/api/bot-viewer-sync', (req, res) => {\n  try {\n    const { position, health, food, status, connected, inventory } = req.body;\n\n    cachedBotStatus = {\n      connected: connected || false,\n      status: status || 'offline',\n      position: position || { x: 0, y: 64, z: 0 },\n      health: health || 0,\n      food: food || 0,\n      inventory: inventory || { items: [], equipment: {}, totalItems: 0 }\n    };\n\n    if (Math.random() < 0.02) {\n      console.log('🔄 Bot viewer sync:', {\n        connected: cachedBotStatus.connected,\n        health: cachedBotStatus.health,\n        food: cachedBotStatus.food,\n        items: cachedBotStatus.inventory?.totalItems || 0\n      });\n    }\n\n    res.json({ success: true });\n  } catch (error) {\n    console.log('❌ Bot viewer sync error:', error);\n    res.status(500).json({ error: (error as Error).message });\n  }\n});\n\n// API endpoint để lấy thông tin bot với real-time data\napp.get('/api/bot-status', async (req, res) => {\n  try {\n    // Sử dụng cached data từ bot sync\n    if (cachedBotStatus.connected) {\n      res.json({\n        status: cachedBotStatus.status || 'online',\n        position: cachedBotStatus.position || { x: 0, y: 64, z: 0 },\n        health: cachedBotStatus.health || 20,\n        food: cachedBotStatus.food || 20,\n        inventory: cachedBotStatus.inventory || { items: [], equipment: {}, totalItems: 0 },\n        connected: true\n      });\n    } else {\n      res.json({ \n        status: cachedBotStatus.status || 'offline', \n        connected: false,\n        position: { x: 0, y: 64, z: 0 },\n        health: 0,\n        food: 0,\n        inventory: { items: [], equipment: {}, totalItems: 0 }\n      });\n    }\n  } catch (error) {\n    console.log('Lỗi lấy bot status:', error);\n    res.json({ \n      status: 'offline', \n      error: (error as Error).message, \n      connected: false, \n      inventory: { items: [], equipment: {}, totalItems: 0 } \n    });\n  }\n});\n\n// Start server trên port 3001\nconst PORT = 3001;\n\nserver.on('error', (error: any) => {\n  if (error.code === 'EADDRINUSE') {\n    console.log(`⚠️ Port ${PORT} đã được sử dụng`);\n  } else {\n    console.log(`❌ Lỗi khởi động prismarine-viewer:`, error.message);\n  }\n});\n\nserver.listen(PORT, '0.0.0.0', () => {\n  console.log(`✅ Bot Viewer Dashboard đã khởi động thành công!`);\n  console.log(`👁️ Truy cập dashboard tại: http://localhost:${PORT}`);\n});\n\nexport default app;\n","size_bytes":9986},"server/standalone-console.ts":{"content":"#!/usr/bin/env node\nimport readline from 'readline';\nimport { botManager } from './botmineflayer';\n\n// Tạo interface để đọc input từ console\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: 'BotLoli> '\n});\n\nconsole.log(`\n🌸 =============================================== 🌸\n       Chào mừng đến Console Bot Loli! 💕\n🌸 =============================================== 🌸\n\nCác lệnh có sẵn:\n📝 create <botId> <username>  - Tạo bot mới\n🚀 start <botId>             - Khởi động bot\n🛑 stop <botId>              - Dừng bot  \n📊 status <botId>            - Kiểm tra trạng thái bot\n💬 say <botId> <message>     - Gửi tin nhắn qua bot\n💃 dance <botId>             - Bot nhảy múa\n🏃 follow <botId> <player>   - Bot theo dõi player\n📋 list                      - Liệt kê tất cả bot\n❌ exit                      - Thoát console\n\nGõ 'help' để xem lại các lệnh.\n`);\n\nrl.prompt();\n\nrl.on('line', async (input) => {\n  const args = input.trim().split(' ');\n  const command = args[0].toLowerCase();\n\n  try {\n    switch (command) {\n      case 'create':\n        if (args.length < 3) {\n          console.log('❌ Sử dụng: create <botId> <username>');\n          break;\n        }\n        const [, botId, username] = args;\n        \n        // Console callback để hiển thị logs\n        const consoleCallback = (botId: string, level: string, message: string, source: string) => {\n          const timestamp = new Date().toLocaleTimeString('vi-VN');\n          const prefix = source === 'chat' ? '💬' : \n                        source === 'action' ? '🎭' :\n                        source === 'movement' ? '🚶' :\n                        source === 'ai' ? '🤖' : 'ℹ️';\n          console.log(`${prefix} [${timestamp}] [${botId}] ${message}`);\n        };\n\n        const success = await botManager.connectBotToServer(botId, username, consoleCallback);\n        if (success) {\n          console.log(`✅ Đã tạo bot loli ${username} với ID: ${botId}`);\n        } else {\n          console.log(`❌ Không thể tạo bot ${username}`);\n        }\n        break;\n\n      case 'start':\n        if (args.length < 2) {\n          console.log('❌ Sử dụng: start <botId>');\n          break;\n        }\n        const bot = botManager.getBot(args[1]);\n        if (bot) {\n          await bot.connect();\n          console.log(`🚀 Đã khởi động bot ${args[1]}`);\n        } else {\n          console.log(`❌ Không tìm thấy bot ${args[1]}`);\n        }\n        break;\n\n      case 'stop':\n        if (args.length < 2) {\n          console.log('❌ Sử dụng: stop <botId>');\n          break;\n        }\n        const stopBot = botManager.getBot(args[1]);\n        if (stopBot) {\n          stopBot.disconnect();\n          console.log(`🛑 Đã dừng bot ${args[1]}`);\n        } else {\n          console.log(`❌ Không tìm thấy bot ${args[1]}`);\n        }\n        break;\n\n      case 'status':\n        if (args.length < 2) {\n          console.log('❌ Sử dụng: status <botId>');\n          break;\n        }\n        const statusBot = botManager.getBot(args[1]);\n        if (statusBot) {\n          const status = statusBot.getStatus();\n          const position = statusBot.getPosition();\n          console.log(`📊 Trạng thái bot ${args[1]}:`);\n          console.log(`   🔗 Kết nối: ${status.connected ? '✅ Online' : '❌ Offline'}`);\n          console.log(`   ❤️ Health: ${status.health || 'N/A'}`);\n          console.log(`   🍎 Food: ${status.food || 'N/A'}`);\n          console.log(`   ⏱️ Uptime: ${status.uptime}s`);\n          console.log(`   📍 Vị trí: ${position ? `${position.x}, ${position.y}, ${position.z}` : 'N/A'}`);\n        } else {\n          console.log(`❌ Không tìm thấy bot ${args[1]}`);\n        }\n        break;\n\n      case 'say':\n        if (args.length < 3) {\n          console.log('❌ Sử dụng: say <botId> <message>');\n          break;\n        }\n        const sayBot = botManager.getBot(args[1]);\n        const message = args.slice(2).join(' ');\n        if (sayBot) {\n          sayBot.sendChat(message);\n          console.log(`💬 Bot ${args[1]} nói: ${message}`);\n        } else {\n          console.log(`❌ Không tìm thấy bot ${args[1]}`);\n        }\n        break;\n\n      case 'dance':\n        if (args.length < 2) {\n          console.log('❌ Sử dụng: dance <botId>');\n          break;\n        }\n        const danceBot = botManager.getBot(args[1]);\n        if (danceBot) {\n          danceBot.performDance();\n          console.log(`💃 Bot ${args[1]} bắt đầu nhảy múa!`);\n        } else {\n          console.log(`❌ Không tìm thấy bot ${args[1]}`);\n        }\n        break;\n\n      case 'follow':\n        if (args.length < 3) {\n          console.log('❌ Sử dụng: follow <botId> <playerName>');\n          break;\n        }\n        const followBot = botManager.getBot(args[1]);\n        if (followBot) {\n          followBot.followPlayer(args[2]);\n          console.log(`🏃 Bot ${args[1]} đang theo dõi ${args[2]}`);\n        } else {\n          console.log(`❌ Không tìm thấy bot ${args[1]}`);\n        }\n        break;\n\n      case 'list':\n        const allBots = botManager.getAllBots();\n        console.log(`📋 Danh sách bot (${allBots.length}):`);\n        allBots.forEach((bot, index) => {\n          const status = bot.getStatus();\n          console.log(`   ${index + 1}. ${bot.getStatus().connected ? '✅' : '❌'} Bot (${status.connected ? 'Online' : 'Offline'})`);\n        });\n        break;\n\n      case 'help':\n        console.log(`\n📚 Hướng dẫn sử dụng Console Bot Loli:\n📝 create <botId> <username>  - Tạo bot loli mới\n🚀 start <botId>             - Khởi động bot\n🛑 stop <botId>              - Dừng bot  \n📊 status <botId>            - Kiểm tra trạng thái chi tiết\n💬 say <botId> <message>     - Gửi tin nhắn qua bot\n💃 dance <botId>             - Bot biểu diễn nhảy múa\n🏃 follow <botId> <player>   - Bot theo dõi player\n📋 list                      - Xem tất cả bot đang quản lý\n❌ exit                      - Thoát console\n\nVí dụ:\n  create bot1 LoliChan\n  start bot1\n  say bot1 Konnichiwa minna-san!\n  dance bot1\n        `);\n        break;\n\n      case 'exit':\n        console.log('👋 Sayonara! Bot loli console đã thoát!');\n        process.exit(0);\n        break;\n\n      case '':\n        break;\n\n      default:\n        console.log(`❌ Lệnh không hợp lệ: ${command}. Gõ 'help' để xem hướng dẫn.`);\n        break;\n    }\n  } catch (error) {\n    console.error(`💥 Lỗi thực thi lệnh: ${error}`);\n  }\n\n  rl.prompt();\n});\n\nrl.on('close', () => {\n  console.log('\\n👋 Sayonara! Bot loli console đã đóng!');\n  process.exit(0);\n});\n\n// Handle các signals\nprocess.on('SIGINT', () => {\n  console.log('\\n\\n🛑 Đang thoát console...');\n  rl.close();\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('\\n\\n🛑 Console bị terminate...');\n  rl.close();\n});","size_bytes":7088},"backup/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"backup/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"backup/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"backup/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Global error handlers - suppress development noise\nwindow.addEventListener('unhandledrejection', (event) => {\n  // Always prevent default to suppress console errors\n  event.preventDefault();\n  \n  // Only log actual application errors in development\n  if (import.meta.env.DEV) {\n    const reason = event.reason;\n    if (reason && typeof reason === 'object') {\n      const message = reason.message || String(reason);\n      \n      // Skip all Vite/HMR/WebSocket/fetch related errors\n      if (message.includes('WebSocket') || \n          message.includes('vite') ||\n          message.includes('Failed to fetch') ||\n          message.includes('fetch') ||\n          message.includes('connection') ||\n          message.toLowerCase().includes('hmr') ||\n          message.includes('ECONNREFUSED') ||\n          message.includes('NetworkError')) {\n        return; // Silent skip\n      }\n      \n      // Only log real application errors\n      console.warn('App error:', reason);\n    }\n  }\n});\n\nwindow.addEventListener('error', (event) => {\n  // Skip all development infrastructure errors\n  if (import.meta.env.DEV && event.error?.message) {\n    const message = event.error.message;\n    if (message.includes('WebSocket') ||\n        message.includes('vite') ||\n        message.includes('fetch') ||\n        message.includes('connection') ||\n        message.toLowerCase().includes('hmr')) {\n      return; // Silent skip\n    }\n    console.warn('App error:', event.error);\n  }\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":1624},"client/src/components/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Mail, Phone, MapPin } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\"\n  });\n  const { toast } = useToast();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation\n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Show success message\n    toast({\n      title: \"Message sent!\",\n      description: \"Thank you for your message! We will get back to you soon.\"\n    });\n\n    // Reset form\n    setFormData({ name: \"\", email: \"\", message: \"\" });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-mindz-dark\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold text-white mb-4\">Get in Touch</h2>\n          <p className=\"text-lg text-blue-200 max-w-2xl mx-auto\">\n            Ready to start your next project? We'd love to hear from you and discuss how we can help bring your ideas to life.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <div className=\"bg-white rounded-xl p-8\">\n            <h3 className=\"text-2xl font-semibold text-mindz-dark mb-6\">Send us a message</h3>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Name\n                </Label>\n                <Input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mindz-blue focus:border-transparent outline-none transition-colors duration-200\"\n                  placeholder=\"Your name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email\n                </Label>\n                <Input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mindz-blue focus:border-transparent outline-none transition-colors duration-200\"\n                  placeholder=\"your@email.com\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Message\n                </Label>\n                <Textarea\n                  id=\"message\"\n                  name=\"message\"\n                  rows={4}\n                  value={formData.message}\n                  onChange={handleChange}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mindz-blue focus:border-transparent outline-none transition-colors duration-200 resize-none\"\n                  placeholder=\"Tell us about your project...\"\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-mindz-blue text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors duration-200\"\n              >\n                Send Message\n              </Button>\n            </form>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"text-white\">\n            <h3 className=\"text-2xl font-semibold mb-6\">Contact Information</h3>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-mindz-blue rounded-lg flex items-center justify-center mr-4\">\n                  <Mail className=\"w-6 h-6\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">hello@mindz.com</p>\n                  <p className=\"text-blue-200 text-sm\">Email us anytime</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-mindz-blue rounded-lg flex items-center justify-center mr-4\">\n                  <Phone className=\"w-6 h-6\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">+1 (555) 123-4567</p>\n                  <p className=\"text-blue-200 text-sm\">Mon-Fri 9am-6pm</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-mindz-blue rounded-lg flex items-center justify-center mr-4\">\n                  <MapPin className=\"w-6 h-6\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">San Francisco, CA</p>\n                  <p className=\"text-blue-200 text-sm\">United States</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-12\">\n              <h4 className=\"text-lg font-semibold mb-4\">Follow Us</h4>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"w-10 h-10 bg-white bg-opacity-10 rounded-lg flex items-center justify-center hover:bg-opacity-20 transition-colors duration-200\">\n                  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-10 h-10 bg-white bg-opacity-10 rounded-lg flex items-center justify-center hover:bg-opacity-20 transition-colors duration-200\">\n                  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-10 h-10 bg-white bg-opacity-10 rounded-lg flex items-center justify-center hover:bg-opacity-20 transition-colors duration-200\">\n                  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 01-2.063-2.065 2.064 2.064 0 112.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                  </svg>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8457},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"backup/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/storage.ts":{"content":"import { users, bots, type User, type InsertUser, type Bot, type InsertBot, type UpdateBotConfig } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Bot management\n  getBots(): Promise<Bot[]>;\n  getBot(id: string): Promise<Bot | undefined>;\n  createBot(bot: InsertBot): Promise<Bot>;\n  updateBot(id: string, updates: Partial<Bot>): Promise<Bot | undefined>;\n  updateBotConfig(id: string, config: UpdateBotConfig): Promise<Bot | undefined>;\n  deleteBot(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private bots: Map<string, Bot>;\n\n  constructor() {\n    this.users = new Map();\n    this.bots = new Map();\n    \n    // Add a default bot for testing\n    const defaultBot: Bot = {\n      id: \"default-bot-1\",\n      username: \"botlolicute\",\n      server: \"thuatzai123.aternos.me\",\n      status: \"offline\",\n      autoReconnect: true,\n      chatEnabled: true,\n      movementPattern: \"random\",\n      responseDelay: 1000,\n      uptime: 0,\n      lastSeen: new Date(),\n      createdAt: new Date(),\n    };\n    this.bots.set(defaultBot.id, defaultBot);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getBots(): Promise<Bot[]> {\n    return Array.from(this.bots.values());\n  }\n\n  async getBot(id: string): Promise<Bot | undefined> {\n    return this.bots.get(id);\n  }\n\n  async createBot(insertBot: InsertBot): Promise<Bot> {\n    const id = randomUUID();\n    const bot: Bot = {\n      ...insertBot,\n      id,\n      status: \"offline\",\n      autoReconnect: insertBot.autoReconnect ?? true,\n      chatEnabled: insertBot.chatEnabled ?? true,\n      movementPattern: insertBot.movementPattern ?? \"random\",\n      responseDelay: insertBot.responseDelay ?? 1000,\n      uptime: 0,\n      lastSeen: new Date(),\n      createdAt: new Date(),\n    };\n    this.bots.set(id, bot);\n    return bot;\n  }\n\n  async updateBot(id: string, updates: Partial<Bot>): Promise<Bot | undefined> {\n    const bot = this.bots.get(id);\n    if (!bot) return undefined;\n    \n    const updatedBot = { ...bot, ...updates };\n    this.bots.set(id, updatedBot);\n    return updatedBot;\n  }\n\n  async updateBotConfig(id: string, config: UpdateBotConfig): Promise<Bot | undefined> {\n    const bot = this.bots.get(id);\n    if (!bot) return undefined;\n    \n    const updatedBot = { ...bot, ...config };\n    this.bots.set(id, updatedBot);\n    return updatedBot;\n  }\n\n  async deleteBot(id: string): Promise<boolean> {\n    return this.bots.delete(id);\n  }\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getBots(): Promise<Bot[]> {\n    return await db.select().from(bots);\n  }\n\n  async getBot(id: string): Promise<Bot | undefined> {\n    const [bot] = await db.select().from(bots).where(eq(bots.id, id));\n    return bot || undefined;\n  }\n\n  async createBot(insertBot: InsertBot): Promise<Bot> {\n    const [bot] = await db\n      .insert(bots)\n      .values({\n        ...insertBot,\n        autoReconnect: insertBot.autoReconnect ?? true,\n        chatEnabled: insertBot.chatEnabled ?? true,\n        movementPattern: insertBot.movementPattern ?? \"random\",\n        responseDelay: insertBot.responseDelay ?? 1000,\n      })\n      .returning();\n    return bot;\n  }\n\n  async updateBot(id: string, updates: Partial<Bot>): Promise<Bot | undefined> {\n    const [bot] = await db\n      .update(bots)\n      .set(updates)\n      .where(eq(bots.id, id))\n      .returning();\n    return bot || undefined;\n  }\n\n  async updateBotConfig(id: string, config: UpdateBotConfig): Promise<Bot | undefined> {\n    const [bot] = await db\n      .update(bots)\n      .set(config)\n      .where(eq(bots.id, id))\n      .returning();\n    return bot || undefined;\n  }\n\n  async deleteBot(id: string): Promise<boolean> {\n    const result = await db.delete(bots).where(eq(bots.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n}\n\n// Use in-memory storage for now to avoid database connection issues\nexport const storage = new MemStorage();\n","size_bytes":5180},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport ErrorBoundary from \"@/components/ErrorBoundary\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport SimpleHome from \"@/pages/simple-home\";\nimport VpsSimulator from \"@/pages/VpsSimulator\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/simple\" component={SimpleHome} />\n      <Route path=\"/vps\" component={VpsSimulator} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":1010}},"version":2}